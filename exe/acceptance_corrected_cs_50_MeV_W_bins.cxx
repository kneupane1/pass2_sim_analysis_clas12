#include <fstream>
#include <string>

#include "TCanvas.h"
#include "TF1.h"
#include "TFile.h"
#include "TGraph.h"
#include "TMultiGraph.h"
#include "TH1.h"
#include "TH2.h"
#include "THnSparse.h"
#include "TLegend.h"
#include "TLorentzVector.h"
#include "TPaveStats.h"
#include "TROOT.h"
#include "TStyle.h"
#include "TThread.h"
// #include "colors.hpp"
// #include "constants.hpp"
// #include "cuts.hpp"
// #include "deltat.hpp"
// #include "reaction.hpp"
#include <mutex>
#include "TMath.h"
#include <TLine.h>

static const double PI = TMath::Pi();
static const float INV_SQRT_2PI = TMath::Sqrt(2 * TMath::Pi());
static const double DEG2RAD = PI / 180.0;
static const double RAD2DEG = 180.0 / PI;
static const double MASS_P = 0.93827203;
static const double MASS_E = 0.000511;
static const double MASS_PIP = 0.13957018;
static const double MASS_PIM = 0.13957018;

static const int W_bins_no = 16;

int how_many_bins = 0;
int how_many_zeros = 0;
int how_many_ones = 0;
int how_many_highers = 0;

float q2_low_values[11] = {1.0, 2.0, 2.40, 3.0, 3.5, 4.2, 5.0, 6.0, 7.0};       //,7.4, 8.6, 9.8};
float q2_up_values[11] = {2.0, 2.40, 3.0, 3.5, 4.2, 5.0, 6.0, 7.0, 8.0, 9.0};   // 7.4, 8.6, 9.8, 12.0};
float q2_binning_size[11] = {1.0, 0.4, 0.6, 0.5, 0.7, 0.8, 1.0, 1.0, 1.0, 1.0}; // 1.2, 1.2, 1.2, 2.2};
float int_cs_up_lim[11] = {11.0, 8.0, 7.0, 5.0, 2.5, 1.5, 1.5, 0.75, 0.6, 0.25, 0.2};
// float int_cs_up_lim[11] = {5.0, 3.50, 2.5, 1.9, 1.4, 0.9, 0.5, 0.4, 0.3, 0.15, 0.1};

float clas6_cs[5][15] = {{2.725756, 4.852575, 5.0990245, 4.6721295, 5.106538, 7.0651055, 8.429394, 6.525802, 6.223883, 6.3364275, 5.9183335,
                          5.7539805,
                          5.2653895,
                          4.683386,
                          2.135029},
                         {1.4476705, 2.590003, 3.077267, 2.769741, 3.176183, 4.5701105, 5.9731865, 4.688401, 4.4450535, 4.576323,
                          4.502663,
                          4.183355,
                          3.7979225,
                          3.44356,
                          1.4590885},
                         {1.1238195, 1.7796845, 2.0453735, 1.9403505, 2.3354175, 3.208187, 4.205703, 3.295571, 3.0479955, 3.2959955,
                          3.228516,
                          3.008253,
                          2.7967935,
                          2.386234,
                          1.0799665},
                         {0.761862, 1.2134075, 1.5208325, 1.38785, 1.6605295, 2.367107, 3.0871605, 2.4123735, 2.281772, 2.3162375, 2.158334,
                          2.047865,
                          1.852682,
                          1.6532595,
                          0.745882},
                         {0.493681, 0.779317, 0.8595405, 0.757254, 1.0147405, 1.400192, 1.851965, 1.4762505, 1.3603165, 1.431174, 1.435816,
                          1.4042675,
                          1.263922,
                          1.1651405,
                          0.5058135}};

float clas6_cs_err[5][15] = {{0.091695,
                              0.179970,
                              0.164874,
                              0.157349,
                              0.172448,
                              0.229728,
                              0.248475,
                              0.210523,
                              0.192848,
                              0.199844,
                              0.191500,
                              0.179232,
                              0.178550,
                              0.149039,
                              0.098633},
                             {0.064233,
                              0.110023,
                              0.115035,
                              0.106971,
                              0.118113,
                              0.147337,
                              0.176895,
                              0.159153,
                              0.137897,
                              0.147557,
                              0.143553,
                              0.131361,
                              0.126433,
                              0.113169,
                              0.061420},
                             {0.066089193624979,
                              0.110563133322098,
                              0.103631219948431,
                              0.10442156570843,
                              0.117685666064309,
                              0.167605262650073,
                              0.168652491959058,
                              0.14732291163631,
                              0.142434399275596,
                              0.158139247630055,
                              0.140297298224164,
                              0.128925042164042,
                              0.132381316072171,
                              0.12115672419639,
                              0.06553},
                             {0.067934,
                              0.100759,
                              0.093753,
                              0.079652,
                              0.094911,
                              0.119790,
                              0.133423,
                              0.109225,
                              0.112129,
                              0.119372,
                              0.116963,
                              0.104061,
                              0.085313,
                              0.079077,
                              0.050086},
                             {0.0282695, 0.050223, 0.048597, 0.047022, 0.04949, 0.0632065, 0.0749885, 0.059791, 0.0587005, 0.061277, 0.079192,
                              0.070863,
                              0.070452,
                              0.059122,
                              0.034278}};
// wide range simulations
// float rad_corr_factor[10] = {1.42702, 1.40908, 1.41135, 1.40509, 1.40151, 1.37086, 1.35081, 1.34144, 1.32594, 1.26831, 1.25362, 1.25586, 1.24384, 1.27349, 1.25435, 1.27085, 1.25168, 1.21468, 1.17431, 1.16223, 1.15737, 1.13599, 1.13964, 1.13751};

// from only one q2 bin simulation 25 mev
// float rad_corr_factor[10] = {1.39047, 1.37839, 1.35447, 1.35067, 1.31858, 1.27496, 1.25344, 1.25131, 1.24169, 1.2636, 1.25875, 1.27143, 1.25846, 1.21249, 1.18035, 1.16335};
// from all q2 bin simulation 50 mev ///x410^8 events

/// 8x10^8 events
///////////////////  The last bin needed to work as new q2 bin is 6.2 to 9.0 wider than the prvious binning
float rad_corr_factor[9][14] = {{1.228, 1.198, 1.156, 1.113, 1.109, 1.117, 1.103, 1.04, 1.017, 1.011, 0.999, 0.989, 0.9697, 0.9614},
                                {1.231, 1.205, 1.155, 1.121, 1.116, 1.123, 1.1045, 1.047, 1.029, 1.0205, 1.004, 0.9956, 0.9785, 0.9634},
                                {1.234, 1.214, 1.16, 1.12, 1.118, 1.132, 1.106, 1.049, 1.031, 1.019, 1.009, 0.9927, 0.9785, 0.9707},
                                {1.241, 1.211, 1.162, 1.12, 1.118, 1.134, 1.109, 1.051, 1.036, 1.023, 1.014, 1.001, 0.9824, 0.9746},
                                {1.241, 1.214, 1.166, 1.123, 1.125, 1.137, 1.115, 1.052, 1.039, 1.027, 1.017, 1.006, 0.9863, 0.9746},
                                {1.245, 1.216, 1.166, 1.126, 1.123, 1.141, 1.116, 1.056, 1.039, 1.029, 1.0205, 1.005, 0.9873, 0.9795},
                                {
                                    1.246,
                                    1.22,
                                    1.168,
                                    1.125,
                                    1.122,
                                    1.144,
                                    1.116,
                                    1.054,
                                    1.041,
                                    1.031,
                                    1.024,
                                    1.011,
                                    0.992,
                                    0.979,
                                },
                                {1.262, 1.222, 1.167, 1.124, 1.124, 1.142, 1.121, 1.052, 1.043, 1.031, 1.026, 1.013, 0.9873, 0.9756},
                                {
                                    1.363,
                                    1.226,
                                    1.171,
                                    1.128,
                                    1.119,
                                    1.144,
                                    1.119,
                                    1.05,
                                    1.039,
                                    1.034,
                                    1.025,
                                    1.009,
                                    0.984,
                                    0.973,
                                }};

//// For W hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_w[7][16] = {{0.982714, 0.987143, 1.00094, 0.992125, 0.990467, 0.99054, 1.01228, 0.993493, 0.999654, 1.00105, 0.999625, 0.999021, 0.999842, 1.00045, 1.00235, 0.998844},
                                     {0.981023, 0.986906, 1.00135, 0.993472, 0.989872, 0.989376, 1.01167, 0.993863, 0.999429, 1.00195, 0.999244, 0.998247, 0.999066, 1.00016, 1.00112, 0.998856},
                                     {0.979786, 0.985924, 1.00106, 0.992847, 0.989229, 0.989491, 1.01214, 0.993445, 1.00051, 1.00226, 0.998548, 0.998867, 0.999017, 0.998949, 1.00084, 0.998615},
                                     {0.980012, 0.986718, 1.00147, 0.992812, 0.989275, 0.989898, 1.0127, 0.993184, 0.999318, 1.00148, 0.999757, 0.999779, 0.99858, 0.999586, 1.00064, 1.00068},
                                     {0.979529, 0.986427, 1.00138, 0.993453, 0.987524, 0.989852, 1.01293, 0.993917, 0.9998, 1.00088, 0.999532, 0.99984, 0.998954, 0.999259, 1.00077, 1.00042},
                                     {0.979639, 0.986798, 1.00061, 0.993792, 0.985645, 0.989735, 1.01399, 0.993472, 0.998971, 1.00022, 1.00031, 0.999574, 0.998022, 0.999152, 1.00066, 0.999584},
                                     {0.981539, 0.987975, 1.00021, 0.994806, 0.983396, 0.989321, 1.01396, 0.993675, 0.998437, 0.999283, 1.00159, 0.999882, 0.999002, 0.999271, 1.00078, 1.00019}};

//// For Q2 hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_q2[7][16] = {{0.974946, 0.974848, 0.974157, 0.976999, 0.976488, 0.977138, 0.977828, 0.978622, 0.979324, 0.979380, 0.979493, 0.980405, 0.979954, 0.981692, 0.980635, 0.980829},
                                      {0.957131, 0.958902, 0.960504, 0.961224, 0.962847, 0.962530, 0.963868, 0.964148, 0.964738, 0.965974, 0.966348, 0.966346, 0.967800, 0.967987, 0.968873, 0.968718},
                                      {0.978359, 0.979463, 0.979155, 0.979556, 0.979680, 0.980556, 0.981541, 0.982238, 0.982634, 0.982142, 0.983014, 0.982489, 0.981940, 0.982987, 0.983330, 0.983570},
                                      {0.967750, 0.967844, 0.969391, 0.969340, 0.969472, 0.970410, 0.971589, 0.972088, 0.971552, 0.972408, 0.973259, 0.973728, 0.974159, 0.973615, 0.974521, 0.974009},
                                      {0.968526, 0.969075, 0.969872, 0.969935, 0.970178, 0.971229, 0.972349, 0.973014, 0.972315, 0.974097, 0.973934, 0.974604, 0.974651, 0.975013, 0.975275, 0.975584},
                                      {0.948711, 0.950965, 0.951408, 0.952030, 0.951910, 0.954474, 0.955512, 0.955267, 0.955928, 0.957258, 0.957915, 0.957669, 0.958665, 0.958890, 0.959190, 0.960317},
                                      {0.849843, 0.849452, 0.850676, 0.851694, 0.850893, 0.856553, 0.860586, 0.860401, 0.861822, 0.865837, 0.868462, 0.869297, 0.869627, 0.869802, 0.870937, 0.871561}};

//// For M_pPip hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
///// [7][16][7] --> inner [7] is for invariant mass, middle w and outer [7] is q2 ie; [q2][w][m_pPip]
float bin_centering_corr_m_pPip[7][16][7] = {
    {
        {0.965981, 0.979493, 0.995251, 1.01103, 1.01815, 1.00524, 0.882281},
        {0.984447, 0.965989, 0.994222, 1.03723, 1.00199, 0.977756, 0.864445},
        {0.971197, 0.94513, 1.01838, 1.02171, 0.990107, 0.954633, 0.927294},
        {0.931615, 0.913833, 1.04331, 0.996817, 0.997005, 1.02728, 0.94914},
        {0.959647, 0.919586, 1.04394, 0.984428, 0.983426, 1.0025, 0.933383},
        {0.972558, 0.977075, 1.03331, 0.969851, 0.993905, 1.029, 0.945575},
        {0.969706, 1.05423, 1.01408, 0.961004, 0.992823, 1.01567, 0.992113},
        {0.96347, 1.11745, 0.995161, 0.963137, 0.993766, 1.00745, 0.890218},
        {0.960262, 1.12099, 0.974407, 0.975743, 1.0081, 1.079, 0.830792},
        {0.947738, 1.08627, 0.96618, 0.980543, 1.01016, 1.03369, 0.839184},
        {0.95063, 1.08086, 0.970259, 1.00261, 1.00815, 1.03249, 0.815358},
        {0.952887, 1.03372, 0.96831, 0.993884, 1.00279, 1.03594, 0.809136},
        {0.943095, 1.01197, 0.985087, 1.00493, 1.00831, 1.04698, 0.792155},
        {0.950526, 0.999188, 0.983009, 0.99825, 0.993951, 1.0502, 0.809783},
        {0.963233, 0.983417, 0.983974, 1.00209, 0.997117, 1.02639, 0.992175},
        {0.96312, 0.97871, 0.981937, 1.00832, 1.00041, 1.01859, 0.849225},
    },
    {
        {0.967232, 0.979428, 0.995967, 1.01074, 1.01976, 1.00222, 0.882825},
        {0.986317, 0.965522, 0.994709, 1.03544, 1.00239, 0.978118, 0.859652},
        {0.971542, 0.943974, 1.01835, 1.02279, 0.990946, 0.956103, 0.927228},
        {0.934245, 0.912762, 1.04297, 0.995987, 0.995657, 1.03047, 0.952393},
        {0.959313, 0.917817, 1.04373, 0.982178, 0.983415, 1.00108, 0.932717},
        {0.972609, 0.976821, 1.0322, 0.971088, 0.991722, 1.03105, 0.943399},
        {0.961604, 1.05322, 1.01468, 0.959532, 0.991836, 1.01848, 0.996116},
        {0.960307, 1.11808, 0.99163, 0.964332, 0.996286, 1.00605, 0.887927},
        {0.958455, 1.12411, 0.975534, 0.976917, 1.00696, 1.08221, 0.834224},
        {0.948249, 1.08515, 0.966706, 0.978876, 1.0108, 1.03599, 0.841297},
        {0.95011, 1.07923, 0.970843, 1.00073, 1.00817, 1.03351, 0.816118},
        {0.947239, 1.03324, 0.968314, 0.990645, 1.00259, 1.03299, 0.806965},
        {0.942878, 1.01314, 0.986859, 1.00397, 1.00752, 1.04796, 0.793481},
        {0.949205, 0.997661, 0.983632, 0.998474, 0.995044, 1.05352, 0.810812},
        {0.964165, 0.984511, 0.982669, 1.00253, 0.999337, 1.02848, 0.995492},
        {0.962412, 0.978727, 0.98137, 1.00876, 1.00203, 1.01886, 0.852435},
    },
    {
        {0.965792, 0.977269, 0.99683, 1.00972, 1.02107, 1.00136, 0.88608},
        {0.980987, 0.963785, 0.995997, 1.03779, 1.00038, 0.977582, 0.863187},
        {0.965662, 0.9469, 1.01629, 1.0214, 0.988284, 0.954812, 0.924361},
        {0.93014, 0.915637, 1.04287, 0.992628, 0.99527, 1.02861, 0.948875},
        {0.958419, 0.918442, 1.04444, 0.982283, 0.982863, 1.00105, 0.928749},
        {0.972114, 0.980833, 1.03367, 0.972348, 0.991861, 1.02891, 0.947478},
        {0.961331, 1.05348, 1.01364, 0.958775, 0.991258, 1.02182, 0.994342},
        {0.961559, 1.11816, 0.993049, 0.963867, 0.994834, 1.00806, 0.890771},
        {0.956293, 1.12604, 0.972648, 0.975576, 1.00736, 1.08135, 0.834224},
        {0.946578, 1.08637, 0.965028, 0.98162, 1.00899, 1.03767, 0.839756},
        {0.949899, 1.08035, 0.970155, 0.999111, 1.00712, 1.03586, 0.817004},
        {0.947623, 1.03062, 0.96802, 0.992444, 1.00154, 1.03244, 0.804873},
        {0.943901, 1.01546, 0.984058, 1.00357, 1.00777, 1.04591, 0.794282},
        {0.947518, 1.00146, 0.982261, 0.999194, 0.995602, 1.05299, 0.806224},
        {0.964227, 0.982705, 0.984142, 1.003, 0.997162, 1.02616, 0.991295},
        {0.961235, 0.981899, 0.980861, 1.00808, 0.997632, 1.01782, 0.855021},
    },
    {
        {0.966609, 0.978687, 0.994947, 1.01184, 1.01875, 1.00223, 0.885341},
        {0.981303, 0.964038, 0.995057, 1.03713, 1.00225, 0.976701, 0.86522},
        {0.967457, 0.943365, 1.01817, 1.0243, 0.99022, 0.956312, 0.92976},
        {0.926169, 0.916497, 1.04098, 0.99458, 0.996439, 1.03071, 0.946121},
        {0.956363, 0.918216, 1.04398, 0.98123, 0.98331, 1.00098, 0.928631},
        {0.9694, 0.978086, 1.03384, 0.970113, 0.993712, 1.02971, 0.946158},
        {0.958308, 1.05517, 1.01616, 0.960277, 0.98992, 1.0165, 0.995729},
        {0.957535, 1.11986, 0.993426, 0.962675, 0.997079, 1.00635, 0.888285},
        {0.952003, 1.1258, 0.973499, 0.976256, 1.00585, 1.08053, 0.832147},
        {0.946041, 1.08579, 0.964481, 0.980796, 1.01006, 1.03584, 0.842748},
        {0.947897, 1.08407, 0.96935, 0.99783, 1.00714, 1.03239, 0.819451},
        {0.946828, 1.03279, 0.968087, 0.99366, 1.00434, 1.0346, 0.804977},
        {0.940544, 1.01328, 0.98425, 1.00276, 1.00567, 1.04836, 0.791531},
        {0.948941, 0.999207, 0.982004, 0.997897, 0.994546, 1.05295, 0.805382},
        {0.965082, 0.987705, 0.984772, 1.0057, 0.998205, 1.02606, 0.99145},
        {0.96216, 0.978099, 0.980143, 1.00893, 0.998171, 1.01731, 0.851624},
    },
    {
        {0.964646, 0.977095, 0.994898, 1.01056, 1.01851, 1.00442, 0.888106},
        {0.978524, 0.963597, 0.994857, 1.03654, 1.00101, 0.976125, 0.862918},
        {0.961924, 0.943599, 1.01826, 1.02288, 0.991494, 0.95611, 0.927011},
        {0.926466, 0.91584, 1.04161, 0.994266, 0.996381, 1.03108, 0.942313},
        {0.953008, 0.918932, 1.04299, 0.982072, 0.984724, 0.999402, 0.932882},
        {0.966385, 0.980279, 1.03293, 0.969226, 0.994045, 1.03199, 0.949653},
        {0.95661, 1.05781, 1.01478, 0.95857, 0.990594, 1.01686, 0.996917},
        {0.953486, 1.11905, 0.990533, 0.963039, 0.9965, 1.00773, 0.887798},
        {0.952221, 1.12817, 0.971443, 0.977138, 1.00653, 1.08123, 0.829071},
        {0.942153, 1.08886, 0.964895, 0.981728, 1.00879, 1.03596, 0.83743},
        {0.94616, 1.08266, 0.968915, 0.999259, 1.00773, 1.03153, 0.815639},
        {0.946148, 1.03389, 0.967687, 0.992622, 1.00413, 1.03424, 0.804743},
        {0.939878, 1.01477, 0.984168, 1.00467, 1.00585, 1.04898, 0.790459},
        {0.950518, 1.00145, 0.98202, 0.998568, 0.994334, 1.05305, 0.805934},
        {0.963716, 0.984354, 0.983919, 1.00266, 0.998787, 1.02477, 0.990741},
        {0.965152, 0.976402, 0.980026, 1.00881, 0.997494, 1.01962, 0.849144},
    },
    {
        {0.982133, 0.977242, 0.995193, 1.01069, 1.01829, 1.00119, 0.885211},
        {0.987398, 0.96194, 0.996041, 1.0382, 1.00222, 0.976997, 0.865158},
        {0.967475, 0.943748, 1.01933, 1.02337, 0.990333, 0.956305, 0.926697},
        {0.925076, 0.915506, 1.04146, 0.993521, 0.997026, 1.03213, 0.939477},
        {0.949209, 0.91989, 1.0431, 0.980862, 0.984138, 0.998124, 0.930862},
        {0.964099, 0.980884, 1.03295, 0.969011, 0.993005, 1.03385, 0.947715},
        {0.952128, 1.05801, 1.01543, 0.959185, 0.989424, 1.01774, 0.996766},
        {0.947294, 1.12298, 0.991748, 0.962289, 0.996077, 1.00802, 0.887501},
        {0.948781, 1.13001, 0.971505, 0.977382, 1.0067, 1.08031, 0.826824},
        {0.9403, 1.09034, 0.965408, 0.981369, 1.01128, 1.03543, 0.83948},
        {0.945897, 1.08457, 0.967112, 1.00148, 1.008, 1.0336, 0.813464},
        {0.948088, 1.03414, 0.968562, 0.994919, 1.00315, 1.03309, 0.804657},
        {0.94268, 1.01432, 0.985174, 1.00436, 1.00834, 1.04885, 0.788287},
        {0.94786, 0.998479, 0.981658, 0.999292, 0.995438, 1.05292, 0.80723},
        {0.965578, 0.985702, 0.981862, 1.00257, 0.997586, 1.02711, 0.99253},
        {0.960409, 0.977319, 0.98086, 1.00887, 0.998716, 1.01908, 0.850953},
    },
    {
        {0.819502, 0.965146, 0.99384, 1.0123, 1.02089, 1.00153, 0.871782},
        {0.917283, 0.962526, 0.996811, 1.03852, 1.00108, 0.974801, 0.854759},
        {0.916504, 0.943912, 1.01961, 1.02219, 0.990107, 0.958931, 0.924715},
        {0.872107, 0.918588, 1.04221, 0.99337, 0.998038, 1.03334, 0.92032},
        {0.94704, 0.919919, 1.04391, 0.979071, 0.984835, 1.00007, 0.928668},
        {0.956394, 0.983245, 1.03406, 0.968521, 0.99359, 1.03105, 0.951131},
        {0.946394, 1.06122, 1.01445, 0.958699, 0.987727, 1.01918, 1.00146},
        {0.941043, 1.12777, 0.991938, 0.962863, 0.994523, 1.00727, 0.883627},
        {0.939355, 1.13341, 0.97183, 0.97798, 1.00643, 1.08136, 0.824502},
        {0.93417, 1.09601, 0.965466, 0.982246, 1.00859, 1.03739, 0.836617},
        {0.942763, 1.08627, 0.968384, 1.00168, 1.01041, 1.03327, 0.812936},
        {0.947088, 1.03623, 0.966862, 0.995392, 1.00388, 1.03368, 0.801144},
        {0.942665, 1.01548, 0.98253, 1.00387, 1.00794, 1.0492, 0.787367},
        {0.949817, 0.999719, 0.979143, 0.998726, 0.995923, 1.05308, 0.801571},
        {0.96328, 0.985288, 0.9842, 1.00259, 0.998944, 1.02666, 0.988926},
        {0.960422, 0.976691, 0.980392, 1.00813, 0.998812, 1.01818, 0.847914},
    }};
//// For M_pPim hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_m_pPim[7][16][7] = {
    {
        {0.981068, 1.00702, 1.01604, 1.01211, 0.997267, 0.993276, 0.957228},
        {0.987271, 0.985922, 1.01313, 1.01954, 0.998567, 0.983311, 0.953312},
        {0.968218, 0.978207, 1.01023, 1.02456, 1.005, 0.982389, 0.919162},
        {0.973905, 0.969154, 1.0109, 1.01618, 1.01211, 1.0005, 0.89978},
        {0.984524, 0.979066, 1.00497, 1.00876, 1.0165, 1.01238, 0.973936},
        {0.940259, 1.00649, 1.00286, 0.993368, 1.01824, 1.02346, 1.0183},
        {0.914582, 1.02953, 0.987706, 0.986641, 1.01842, 1.02732, 1.01562},
        {0.886028, 1.04615, 0.980681, 0.978788, 1.01318, 1.02667, 1.03006},
        {0.85942, 1.06151, 0.985953, 0.980686, 0.996928, 1.03278, 1.00733},
        {0.952207, 1.04991, 0.988029, 0.979035, 0.981802, 1.04478, 1.01464},
        {0.988367, 1.05017, 0.990341, 0.975059, 0.978808, 1.05168, 0.989096},
        {1.0143, 1.04923, 0.992299, 0.976125, 0.969276, 1.0509, 0.991988},
        {1.00322, 1.04607, 0.991947, 0.964749, 0.986612, 1.03777, 1.01418},
        {0.990302, 1.04585, 0.990441, 0.952021, 1.00824, 1.01818, 1.03961},
        {1.01886, 1.02991, 0.993803, 0.975369, 0.997412, 1.01897, 1.00817},
        {0.99765, 1.02805, 0.983753, 0.977279, 1.00079, 1.01566, 1.05342},
    },
    {
        {0.978448, 1.00752, 1.01669, 1.01228, 0.99896, 0.994155, 0.953515},
        {0.983648, 0.981762, 1.01462, 1.02031, 1.00137, 0.982524, 0.95467},
        {0.967452, 0.979202, 1.01, 1.02529, 1.00534, 0.982189, 0.917388},
        {0.973147, 0.970002, 1.01081, 1.01429, 1.0118, 0.999854, 0.897576},
        {0.981279, 0.97981, 1.00787, 1.00744, 1.01595, 1.00978, 0.970161},
        {0.934687, 1.00392, 1.00274, 0.992411, 1.01687, 1.02209, 1.01495},
        {0.916052, 1.02796, 0.98576, 0.986805, 1.01944, 1.02698, 1.01449},
        {0.88665, 1.04646, 0.979163, 0.981244, 1.01312, 1.02379, 1.0251},
        {0.859266, 1.06383, 0.984967, 0.979289, 0.998629, 1.03277, 1.00515},
        {0.952078, 1.04953, 0.991499, 0.983316, 0.984011, 1.04414, 1.01331},
        {0.989661, 1.04867, 0.992384, 0.975743, 0.982841, 1.05128, 0.991322},
        {1.00968, 1.0503, 0.990237, 0.977286, 0.969324, 1.05241, 0.995934},
        {1.00313, 1.04756, 0.989539, 0.965711, 0.987798, 1.04197, 1.01381},
        {0.987793, 1.04698, 0.986295, 0.954704, 1.00603, 1.01876, 1.03649},
        {1.01822, 1.02972, 0.992469, 0.97499, 0.997479, 1.01916, 1.0081},
        {0.996744, 1.02733, 0.982714, 0.97988, 0.999411, 1.01392, 1.05184},
    },
    {
        {0.977886, 1.0069, 1.01445, 1.0117, 0.999106, 0.995296, 0.95289},
        {0.980389, 0.984422, 1.01395, 1.01849, 1.00258, 0.984471, 0.951452},
        {0.96824, 0.978744, 1.00862, 1.024, 1.00671, 0.984862, 0.917579},
        {0.968406, 0.969439, 1.01216, 1.01417, 1.01146, 1.00025, 0.8952},
        {0.975114, 0.980945, 1.00577, 1.00552, 1.01433, 1.00763, 0.972577},
        {0.937064, 1.00678, 1.00053, 0.99184, 1.01887, 1.02215, 1.01572},
        {0.917119, 1.02865, 0.987919, 0.98703, 1.01808, 1.02707, 1.01442},
        {0.885954, 1.0466, 0.979598, 0.983134, 1.01338, 1.02243, 1.02671},
        {0.859897, 1.0636, 0.986953, 0.97922, 0.999314, 1.03243, 1.0034},
        {0.949123, 1.05196, 0.991973, 0.982225, 0.983809, 1.04321, 1.01204},
        {0.988983, 1.05145, 0.98917, 0.975799, 0.979536, 1.05371, 0.990377},
        {1.01205, 1.05111, 0.992229, 0.977062, 0.970514, 1.05218, 0.994964},
        {1.00266, 1.04677, 0.993055, 0.966599, 0.987863, 1.03983, 1.01301},
        {0.989075, 1.04303, 0.987074, 0.950327, 1.00958, 1.02086, 1.03945},
        {1.02192, 1.02768, 0.992772, 0.972372, 0.997838, 1.01565, 1.00818},
        {0.998241, 1.03039, 0.983069, 0.98021, 1.00018, 1.01493, 1.05132},
    },
    {
        {0.977795, 1.00803, 1.01455, 1.01312, 1.00175, 0.991856, 0.951053},
        {0.981021, 0.985078, 1.01427, 1.02012, 1.00061, 0.985642, 0.951687},
        {0.966817, 0.978785, 1.00846, 1.02392, 1.00403, 0.983298, 0.914951},
        {0.965693, 0.97043, 1.01154, 1.01559, 1.01201, 0.997879, 0.89675},
        {0.974774, 0.983398, 1.00773, 1.00486, 1.01543, 1.01382, 0.969445},
        {0.935242, 1.00861, 1.00112, 0.991198, 1.01872, 1.02285, 1.01082},
        {0.916726, 1.03012, 0.987152, 0.985768, 1.02017, 1.02682, 1.00978},
        {0.883953, 1.04702, 0.980499, 0.981873, 1.01328, 1.02349, 1.02428},
        {0.859617, 1.05955, 0.983093, 0.980925, 0.998287, 1.03305, 1.0018},
        {0.944988, 1.05031, 0.993556, 0.979444, 0.982922, 1.04415, 1.01063},
        {0.990512, 1.04984, 0.990547, 0.97792, 0.980573, 1.0495, 0.991047},
        {1.01225, 1.04907, 0.990081, 0.976333, 0.971237, 1.0512, 0.993108},
        {1.00299, 1.04357, 0.992766, 0.967013, 0.98843, 1.04141, 1.01359},
        {0.984236, 1.04581, 0.987375, 0.953939, 1.00648, 1.02039, 1.03936},
        {1.01727, 1.02732, 0.990568, 0.97446, 0.996888, 1.01888, 1.00599},
        {0.997395, 1.03036, 0.985548, 0.978626, 1.00102, 1.01642, 1.05137},
    },
    {
        {0.978855, 1.00976, 1.01585, 1.01231, 1.00041, 0.992176, 0.952933},
        {0.982629, 0.984925, 1.01443, 1.01991, 1.00191, 0.984534, 0.951386},
        {0.969168, 0.978464, 1.00762, 1.02421, 1.00542, 0.983018, 0.912501},
        {0.963256, 0.972285, 1.01163, 1.01444, 1.01313, 0.998146, 0.893517},
        {0.976338, 0.982951, 1.00542, 1.0043, 1.01548, 1.0104, 0.966399},
        {0.934386, 1.00872, 1.00231, 0.993348, 1.01734, 1.02457, 1.00548},
        {0.916588, 1.03174, 0.985091, 0.985926, 1.01919, 1.02859, 1.01077},
        {0.885163, 1.04721, 0.976635, 0.980597, 1.0143, 1.02426, 1.02326},
        {0.864312, 1.06186, 0.986269, 0.979664, 0.999994, 1.03423, 1.0033},
        {0.95056, 1.04854, 0.991144, 0.98104, 0.984898, 1.04404, 1.0103},
        {0.985186, 1.05173, 0.990387, 0.978178, 0.981209, 1.05126, 0.991441},
        {1.014, 1.04891, 0.990565, 0.978148, 0.970212, 1.04987, 0.994378},
        {1.00382, 1.0474, 0.990298, 0.96624, 0.986605, 1.0399, 1.01215},
        {0.990058, 1.04626, 0.985639, 0.955624, 1.00455, 1.0179, 1.03839},
        {1.0152, 1.02826, 0.992692, 0.973437, 0.993955, 1.01869, 1.00513},
        {0.995175, 1.02948, 0.985312, 0.978479, 0.999221, 1.0149, 1.05341},
    },
    {
        {0.978229, 1.00596, 1.0157, 1.0122, 1.00097, 0.993828, 0.954264},
        {0.980689, 0.982667, 1.01495, 1.01964, 1.00096, 0.984015, 0.949595},
        {0.968353, 0.978947, 1.00894, 1.02619, 1.00477, 0.982966, 0.911924},
        {0.958501, 0.971959, 1.0125, 1.01244, 1.01236, 1.00224, 0.892606},
        {0.971322, 0.981061, 1.0068, 1.00394, 1.01562, 1.01186, 0.963432},
        {0.932234, 1.00762, 1.00004, 0.993469, 1.01802, 1.0235, 1.00543},
        {0.917833, 1.03004, 0.985562, 0.98656, 1.02019, 1.02792, 1.00155},
        {0.885146, 1.04996, 0.978139, 0.980838, 1.01469, 1.02398, 1.01798},
        {0.860861, 1.06144, 0.985567, 0.980978, 1.00088, 1.03431, 1.00041},
        {0.951552, 1.04837, 0.991937, 0.980464, 0.985953, 1.04226, 1.00892},
        {0.991171, 1.05077, 0.989398, 0.977702, 0.979943, 1.05231, 0.990399},
        {1.01195, 1.04787, 0.990821, 0.978355, 0.970841, 1.05093, 0.993651},
        {1.00324, 1.04726, 0.990576, 0.969698, 0.98561, 1.03922, 1.01099},
        {0.988224, 1.04621, 0.988036, 0.957113, 1.00575, 1.02264, 1.03583},
        {1.01563, 1.02902, 0.992512, 0.976339, 0.994752, 1.01575, 1.00653},
        {0.998289, 1.0304, 0.986863, 0.978151, 0.998561, 1.01714, 1.04953},
    },
    {
        {0.960083, 1.00662, 1.01511, 1.01229, 1.00074, 0.987078, 0.932636},
        {0.968718, 0.984429, 1.01308, 1.02061, 1.00217, 0.983401, 0.93916},
        {0.966574, 0.978236, 1.00872, 1.02415, 1.0055, 0.986434, 0.895705},
        {0.946414, 0.972524, 1.01388, 1.01322, 1.01312, 1.00061, 0.879419},
        {0.963163, 0.984509, 1.00834, 1.00339, 1.01672, 1.0148, 0.95233},
        {0.933121, 1.0095, 0.999678, 0.99156, 1.01834, 1.02515, 0.995743},
        {0.92135, 1.03145, 0.981736, 0.986193, 1.01955, 1.02801, 0.992728},
        {0.885962, 1.04855, 0.976853, 0.980669, 1.01567, 1.02544, 1.00991},
        {0.860762, 1.06254, 0.985436, 0.980363, 1.00285, 1.03343, 0.996205},
        {0.949756, 1.0508, 0.992413, 0.981728, 0.989772, 1.04193, 1.004},
        {0.987155, 1.0508, 0.991401, 0.977778, 0.984778, 1.052, 0.991194},
        {1.01309, 1.05018, 0.992, 0.978623, 0.973389, 1.05147, 0.995351},
        {1.00478, 1.0453, 0.992958, 0.971217, 0.985429, 1.03984, 1.01411},
        {0.987409, 1.04572, 0.988469, 0.960815, 1.00222, 1.02258, 1.03936},
        {1.00906, 1.02884, 0.993548, 0.978264, 0.993122, 1.02117, 1.00445},
        {0.998266, 1.02794, 0.987722, 0.981067, 0.993894, 1.01732, 1.0478},
    }};
//// For M_pipPim hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_m_pipPim[7][16][7] = {
    {
        {0.960199, 1.00931, 0.998878, 1.00221, 1.00117, 1.0006, 0.935175},
        {0.942917, 1.00436, 1.00056, 0.998506, 1.00292, 1.02032, 0.926803},
        {0.93211, 1.0042, 1.00149, 0.998709, 0.998653, 1.00723, 0.969351},
        {0.91987, 1.00523, 0.999823, 0.999451, 0.99818, 1.0073, 1.02298},
        {0.893762, 1.00391, 0.996614, 0.999693, 1.00013, 1.00654, 1.05023},
        {0.851914, 1.00126, 1.00053, 1.01024, 0.99725, 1.00654, 1.06973},
        {0.814913, 0.995203, 1.00207, 1.00415, 1.00218, 1.01027, 1.10696},
        {0.77347, 0.99293, 1.00625, 1.00456, 1.00045, 1.01547, 1.10407},
        {0.745686, 1.00497, 1.00053, 1.00575, 0.989812, 1.03535, 1.05456},
        {0.748175, 1.00985, 0.9995, 0.962363, 1.01766, 1.0576, 1.02405},
        {0.781771, 1.01272, 0.992578, 0.97275, 1.03317, 1.00119, 1.01417},
        {0.828811, 1.01026, 0.988637, 0.978768, 1.05056, 1.00002, 1.02203},
        {0.851807, 1.01918, 0.988643, 0.949517, 1.04052, 1.01675, 1.03584},
        {0.88651, 1.00017, 0.989223, 1.00645, 1.01486, 1.00136, 1.03963},
        {0.82722, 1.01366, 0.969636, 1.12519, 0.97472, 1.00482, 1.08764},
        {0.829048, 1.01918, 0.954634, 1.11068, 0.956475, 1.0174, 1.06803},
    },
    {
        {0.963101, 1.00624, 0.997852, 1.00352, 0.998953, 1.00175, 0.93825},
        {0.945711, 1.00338, 1.00009, 1.00073, 1.00074, 1.01708, 0.929557},
        {0.932512, 1.005, 1.00031, 1.00025, 1.00068, 1.00593, 0.96253},
        {0.920633, 1.00674, 0.998428, 1.00205, 0.997422, 1.0072, 1.02297},
        {0.892634, 1.00463, 0.997918, 0.998005, 0.999618, 1.00651, 1.05328},
        {0.854501, 1.00192, 0.997531, 1.01054, 1.00003, 1.00761, 1.06967},
        {0.813952, 0.995072, 1.00337, 1.00358, 1.00083, 1.00739, 1.11031},
        {0.771593, 0.996021, 1.00333, 1.00316, 1.00229, 1.01592, 1.10521},
        {0.746109, 1.00196, 1.00196, 1.00565, 0.990565, 1.03576, 1.05568},
        {0.752046, 1.01151, 0.998978, 0.963704, 1.01652, 1.05837, 1.02584},
        {0.783655, 1.00979, 0.995563, 0.972362, 1.0335, 0.999244, 1.01108},
        {0.828727, 1.01001, 0.986122, 0.978948, 1.04703, 0.996427, 1.0155},
        {0.858134, 1.02261, 0.986674, 0.948952, 1.04114, 1.0194, 1.03317},
        {0.889838, 0.998891, 0.986115, 1.00453, 1.01304, 1.00369, 1.03952},
        {0.826835, 1.01479, 0.966241, 1.12461, 0.975228, 1.00873, 1.08422},
        {0.829115, 1.01808, 0.953467, 1.11284, 0.95743, 1.02029, 1.06781},
    },
    {
        {0.963276, 1.00837, 0.998272, 0.998582, 0.997989, 1.00431, 0.936576},
        {0.94234, 1.00475, 0.999122, 1.00017, 1.00288, 1.01951, 0.93026},
        {0.930329, 1.00552, 0.999591, 0.999133, 1.00205, 1.00714, 0.966868},
        {0.9188, 1.00367, 0.995136, 0.99925, 0.998079, 1.00857, 1.02433},
        {0.89374, 1.0055, 1.00143, 0.999938, 1.00007, 1.00403, 1.05401},
        {0.856266, 1.00216, 1.00038, 1.01187, 1.00015, 1.0064, 1.06891},
        {0.81085, 0.999036, 1.00415, 1.00521, 1.00209, 1.00738, 1.11196},
        {0.770678, 0.996199, 1.00389, 1.00297, 1.00052, 1.01582, 1.10612},
        {0.743409, 1.00331, 1.00045, 1.00678, 0.992133, 1.0358, 1.05261},
        {0.74905, 1.01191, 0.998085, 0.965704, 1.01735, 1.05619, 1.02447},
        {0.779356, 1.00605, 0.994508, 0.974749, 1.0336, 1.00035, 1.0098},
        {0.829569, 1.01533, 0.985321, 0.977794, 1.0489, 0.998198, 1.01399},
        {0.852913, 1.01863, 0.988873, 0.949356, 1.04086, 1.01892, 1.03457},
        {0.886525, 1.00004, 0.989022, 1.00909, 1.01382, 1.00567, 1.03736},
        {0.828193, 1.01054, 0.96764, 1.12579, 0.975271, 1.00797, 1.08317},
        {0.832936, 1.01908, 0.951219, 1.11128, 0.959665, 1.01753, 1.06422},
    },
    {
        {0.963897, 1.00704, 0.997578, 1.00197, 0.998299, 1.00398, 0.941721},
        {0.943504, 1.00359, 0.998247, 1.00009, 1.00108, 1.01807, 0.932505},
        {0.933188, 1.0031, 0.998778, 0.999111, 0.997279, 1.00864, 0.964792},
        {0.922406, 1.00617, 0.997981, 0.997895, 0.997708, 1.00695, 1.02318},
        {0.895346, 1.00176, 0.998193, 1.00262, 0.997207, 1.00452, 1.05168},
        {0.85397, 1.00118, 0.999466, 1.01138, 0.999086, 1.00456, 1.07087},
        {0.813656, 0.997595, 1.00161, 1.00488, 1.00254, 1.00718, 1.10921},
        {0.769795, 0.995899, 1.00425, 1.00257, 0.9999, 1.01607, 1.10549},
        {0.744065, 1.004, 1.00201, 1.00784, 0.989552, 1.03413, 1.0541},
        {0.749179, 1.01208, 1.00116, 0.964482, 1.0177, 1.05991, 1.02102},
        {0.781032, 1.01188, 0.996031, 0.973389, 1.03323, 0.998972, 1.00867},
        {0.823999, 1.01277, 0.985119, 0.976515, 1.05112, 0.997988, 1.01785},
        {0.853368, 1.01674, 0.98858, 0.947609, 1.04018, 1.01872, 1.02964},
        {0.886866, 1.00188, 0.986511, 1.00407, 1.01363, 1.00368, 1.03707},
        {0.828153, 1.01105, 0.964612, 1.12481, 0.976503, 1.01047, 1.08438},
        {0.829029, 1.01943, 0.952831, 1.11053, 0.959432, 1.02299, 1.06728},
    },
    {
        {0.962807, 1.00749, 0.999549, 1.00212, 0.997564, 1.00351, 0.942668},
        {0.944617, 1.00399, 1.00038, 0.999395, 1.00234, 1.01734, 0.935656},
        {0.930869, 1.00464, 0.999471, 0.998797, 0.999668, 1.00634, 0.966669},
        {0.92042, 1.007, 0.998118, 0.998115, 0.997305, 1.00734, 1.02648},
        {0.89294, 1.00294, 0.999056, 0.999904, 0.999092, 1.00525, 1.05134},
        {0.855087, 1.00047, 1.00026, 1.01096, 1.00117, 1.00535, 1.07158},
        {0.816681, 0.99613, 1.0024, 1.00248, 1.00315, 1.00711, 1.11275},
        {0.771296, 0.995094, 1.00498, 1.00367, 1.00101, 1.01545, 1.10429},
        {0.745367, 1.00276, 1.00305, 1.00578, 0.992322, 1.03725, 1.05162},
        {0.753205, 1.01248, 0.999282, 0.962071, 1.01757, 1.05885, 1.02177},
        {0.778364, 1.01052, 0.995161, 0.974441, 1.03419, 1.00014, 1.00789},
        {0.82577, 1.01366, 0.984464, 0.977662, 1.05161, 0.996817, 1.01034},
        {0.853997, 1.01905, 0.986754, 0.94693, 1.04266, 1.01806, 1.03013},
        {0.882732, 0.998691, 0.988672, 1.00607, 1.01418, 1.00384, 1.03732},
        {0.825658, 1.00958, 0.966081, 1.12496, 0.974776, 1.00914, 1.08262},
        {0.831019, 1.02093, 0.952351, 1.11199, 0.959077, 1.01959, 1.06873},
    },
    {
        {0.962327, 1.00681, 1.00011, 1.00148, 0.999654, 1.0031, 0.944368},
        {0.946216, 1.00235, 1.00122, 1.00017, 1.0033, 1.0196, 0.936458},
        {0.931711, 1.00545, 0.999482, 1.00012, 0.999598, 1.00736, 0.96606},
        {0.920557, 1.005, 0.997974, 1.00018, 0.99716, 1.00622, 1.02565},
        {0.893174, 1.00263, 0.999706, 1.00005, 0.997735, 1.00322, 1.04943},
        {0.855594, 1.0019, 1.00028, 1.00928, 0.999689, 1.00458, 1.07207},
        {0.818379, 0.997766, 1.00229, 1.00344, 1.00249, 1.0081, 1.11095},
        {0.77057, 0.997096, 1.00379, 1.00411, 1.00145, 1.01556, 1.10601},
        {0.740437, 1.00345, 1.00117, 1.00349, 0.990544, 1.03595, 1.05247},
        {0.747616, 1.01304, 0.999219, 0.961642, 1.01859, 1.05966, 1.01969},
        {0.775711, 1.00945, 0.993423, 0.973143, 1.0334, 0.999183, 1.00518},
        {0.823676, 1.0099, 0.984455, 0.97695, 1.05063, 0.996738, 1.01148},
        {0.850588, 1.01827, 0.987129, 0.946844, 1.04042, 1.01725, 1.0284},
        {0.877418, 0.999297, 0.987785, 1.00639, 1.01592, 1.00153, 1.03445},
        {0.825039, 1.00638, 0.964518, 1.12418, 0.974346, 1.00594, 1.08362},
        {0.825517, 1.01748, 0.950675, 1.11155, 0.956359, 1.0191, 1.06549},
    },
    {
        {0.960266, 1.00644, 0.998899, 1.00147, 0.999237, 1.0034, 0.944901},
        {0.951199, 1.00171, 0.998132, 0.999744, 1.00242, 1.01838, 0.938011},
        {0.937939, 1.00299, 0.999629, 0.999761, 0.998381, 1.00909, 0.965734},
        {0.925701, 1.00471, 0.997485, 0.999926, 0.997312, 1.00692, 1.02379},
        {0.902651, 1.00236, 1.00004, 0.999501, 0.999796, 1.00368, 1.05183},
        {0.861827, 1.00156, 1.00027, 1.00839, 1.00014, 1.00443, 1.07292},
        {0.824556, 0.998366, 1.00311, 1.00306, 1.00183, 1.00798, 1.11356},
        {0.777979, 0.997575, 1.00528, 1.00332, 1.00112, 1.01553, 1.10914},
        {0.747736, 1.0044, 1.00233, 1.00562, 0.98873, 1.03726, 1.05174},
        {0.74414, 1.01433, 0.995821, 0.959201, 1.01852, 1.05901, 1.01684},
        {0.773847, 1.00871, 0.994576, 0.972069, 1.03486, 0.998707, 1.00361},
        {0.815528, 1.00981, 0.984898, 0.975303, 1.05164, 0.993245, 1.00805},
        {0.841794, 1.01832, 0.986922, 0.945536, 1.04268, 1.01317, 1.02801},
        {0.866106, 0.99732, 0.985119, 1.00619, 1.01664, 1.00099, 1.03531},
        {0.803513, 1.00778, 0.962863, 1.12612, 0.974336, 1.0041, 1.08065},
        {0.809402, 1.01553, 0.949284, 1.11481, 0.955364, 1.01731, 1.06563},
    }};

/////////////////////// Bin centring corr- theta ///////////////////
float bin_centering_corr_th_prot[7][16][10] = {
    {
        {0.991834, 1.00062, 1.00422, 1.00392, 0.999518, 0.997095, 0.999753, 1.00202, 1.0006, 0.999408},
        {0.996267, 1.00184, 1.00299, 1.00131, 0.997382, 0.996503, 0.999947, 1.00225, 1.00252, 1.00366},
        {1.00458, 0.999328, 1.00149, 0.999123, 0.997932, 0.99971, 0.997411, 1.00021, 0.999921, 0.997299},
        {0.999418, 1.00084, 1.00168, 1.00136, 0.999736, 0.996514, 0.998314, 1.00165, 1.00604, 1.00168},
        {0.997462, 0.995646, 0.996925, 0.999172, 0.994125, 0.998791, 0.997878, 1.00089, 1.00176, 0.999716},
        {1.00141, 1.00116, 1.00107, 0.99814, 0.998139, 0.998358, 0.999847, 0.998545, 1.00631, 1.00693},
        {0.997306, 0.99807, 0.996655, 0.999445, 0.998725, 0.996862, 0.999267, 0.999993, 1.00016, 1.00641},
        {0.993457, 0.997331, 1.00022, 1.00187, 1.00341, 0.999637, 1.00009, 0.999385, 1.00217, 1.00826},
        {1.00214, 0.996012, 0.998798, 0.99947, 1.0028, 0.999478, 0.996238, 1.00182, 0.997001, 0.997248},
        {1.01445, 0.998634, 0.990289, 1.00006, 0.996496, 0.999302, 0.9993, 1.00062, 1.00133, 1.00666},
        {1.00154, 0.9961, 0.995489, 1.00085, 0.998665, 0.994571, 0.999662, 0.997048, 0.998639, 1.00373},
        {1.01011, 0.998645, 0.993888, 0.998896, 0.9938, 0.995406, 0.998678, 0.997198, 0.997876, 1.0055},
        {1.00694, 1.00245, 0.994111, 0.996356, 0.996173, 0.994204, 0.995198, 0.996816, 0.998362, 1.00385},
        {1.00508, 0.999228, 0.992111, 0.995723, 0.995725, 0.996758, 0.996461, 0.997671, 0.996096, 1.00806},
        {1.00512, 1.00595, 1.0008, 1.00251, 0.994337, 0.992646, 0.996417, 0.996841, 0.999843, 1.01141},
        {0.999981, 1.00131, 0.995393, 1.0021, 0.996493, 0.994642, 1.00039, 0.996018, 0.994337, 1.0216},
    },
    {
        {0.993376, 0.99982, 1.00188, 1.00486, 0.999975, 0.99621, 1.00007, 0.998952, 1.00071, 0.998121},
        {0.993838, 0.998371, 1.00593, 1.00214, 0.997633, 0.998184, 0.997891, 1.00173, 1.00004, 1.00141},
        {0.996862, 0.999874, 1.00158, 0.997957, 0.996377, 0.997917, 0.999431, 1.00226, 1.00183, 0.999025},
        {0.998249, 0.998711, 1.00324, 1.0002, 0.997769, 0.997897, 0.997085, 1.00126, 1.00222, 1.00695},
        {0.994702, 0.998238, 1.00067, 0.998045, 0.99703, 0.996472, 0.996903, 1.00062, 1.00185, 1.00291},
        {1.00074, 1.00055, 1.00408, 0.999497, 0.997966, 0.997336, 0.998716, 0.995619, 1.00377, 0.992811},
        {1.00037, 0.998974, 1.00043, 0.997944, 0.997894, 0.996606, 0.999325, 0.999969, 1.00621, 1.00234},
        {1.00053, 1.00073, 0.998662, 1.00154, 1.002, 0.998367, 0.998253, 1.00035, 0.999355, 0.993641},
        {1.00591, 0.999473, 0.996152, 0.999852, 0.998971, 0.999708, 0.997501, 0.999742, 0.998429, 0.999786},
        {1.00395, 1.00192, 0.993649, 0.996876, 0.997705, 0.999847, 0.998381, 0.998244, 0.996898, 1.00608},
        {1.00453, 1.00089, 0.994096, 1.00094, 0.999912, 0.997282, 0.996575, 0.998872, 0.999701, 1.00212},
        {1.00231, 1.00208, 0.991105, 1.00145, 0.998087, 0.996993, 0.99757, 1.0027, 0.999391, 1.01269},
        {1.01102, 1.00269, 0.992317, 0.999135, 0.996951, 0.99463, 1.00072, 0.997963, 0.997366, 1.00876},
        {1.00753, 1.00117, 0.996377, 0.998496, 0.998615, 0.994219, 0.996211, 0.999291, 0.998287, 1.01073},
        {0.996056, 1.00053, 0.999617, 1.00007, 0.99437, 0.993192, 0.99547, 0.996919, 1.0022, 1.01025},
        {0.995807, 1.00055, 0.998261, 0.999842, 0.995425, 0.995127, 0.997173, 0.997005, 0.998131, 1.01134},
    },
    {
        {1.00009, 0.994614, 1.00318, 1.00045, 0.998301, 0.996356, 0.99738, 1.00058, 1.00197, 0.997695},
        {0.989931, 0.993685, 1.00404, 1.00348, 0.999657, 0.99567, 1.00075, 1.00063, 1.00085, 0.999323},
        {0.996911, 0.999569, 1.00189, 1.00025, 0.996465, 0.998613, 1.00135, 0.997435, 1.00299, 1.004},
        {0.996858, 0.999456, 0.999643, 0.998919, 0.995313, 0.997093, 1.00138, 0.999265, 1.00393, 1.00088},
        {0.998875, 0.995057, 0.999952, 0.996184, 0.998776, 0.999061, 0.997991, 1.00234, 1.00453, 0.998548},
        {1.00211, 0.998262, 1.00091, 1.00125, 0.997159, 0.99682, 0.99732, 1.00037, 0.999521, 1.00548},
        {1.00224, 1.00298, 0.999214, 0.999905, 0.999934, 0.995414, 0.998569, 1.00103, 1.00115, 1.00163},
        {0.994395, 1.00013, 1.00194, 1.00099, 1.00225, 0.996103, 0.997527, 1.00031, 1.00294, 1.00555},
        {1.00326, 0.999062, 0.996236, 0.99907, 1.00365, 1.00022, 1.00003, 1.00141, 0.998633, 1.00007},
        {0.998314, 1.0, 0.991944, 0.997254, 0.999315, 0.997416, 0.997986, 0.995008, 1.00077, 1.00929},
        {1.0054, 0.999665, 0.992805, 0.999981, 1.00017, 0.996649, 0.99681, 1.00308, 0.998092, 1.00108},
        {0.997486, 1.00139, 0.995466, 1.00034, 0.998123, 0.996437, 0.997216, 0.99828, 0.995594, 1.00399},
        {1.0048, 0.997921, 0.993937, 0.998978, 0.996615, 0.996415, 0.996581, 1.00073, 0.995613, 1.00452},
        {1.00338, 1.00838, 0.994992, 0.997067, 0.995927, 0.995958, 1.00137, 1.0018, 0.995248, 1.01698},
        {1.00178, 1.00151, 1.00053, 1.00149, 0.99629, 0.992661, 0.996956, 0.99846, 1.00081, 1.00644},
        {1.00061, 1.00158, 0.997839, 0.998391, 0.994311, 0.993389, 0.996635, 0.99758, 1.00032, 1.01384},
    },
    {
        {0.996614, 0.998794, 0.999288, 1.00044, 0.996971, 0.998485, 1.00005, 1.00178, 1.00016, 1.00048},
        {0.993361, 1.00119, 1.00427, 1.00153, 0.996211, 0.998099, 1.0005, 1.00183, 1.00219, 0.997793},
        {0.997485, 0.996492, 1.00316, 1.00151, 0.998427, 0.998295, 0.998549, 1.00122, 1.00113, 1.00181},
        {0.995745, 0.997747, 1.00413, 1.00088, 0.998739, 0.997057, 1.00021, 1.00089, 1.00525, 1.00502},
        {0.999958, 0.999253, 1.00139, 1.00073, 0.99653, 0.99876, 1.00047, 1.00042, 1.00354, 1.00036},
        {0.999734, 1.00007, 0.999591, 0.99984, 0.99791, 0.996069, 0.99712, 0.998999, 1.00013, 1.00444},
        {0.995257, 1.00115, 0.999389, 0.998226, 0.999284, 0.997442, 0.998276, 0.999451, 1.00028, 1.00432},
        {1.00096, 0.998093, 0.998376, 1.00147, 1.00089, 1.00025, 1.0006, 1.00056, 0.997859, 1.00351},
        {1.00426, 1.00139, 0.997022, 0.999909, 1.00216, 1.00123, 0.99642, 0.999353, 0.999839, 1.00248},
        {1.00414, 0.998057, 0.991551, 0.99934, 1.00002, 0.998406, 0.996237, 0.998996, 1.00008, 1.00524},
        {1.00383, 1.00259, 0.997307, 0.998965, 0.99634, 0.998985, 0.998258, 0.999886, 1.00245, 1.01058},
        {1.00316, 0.9992, 0.994563, 1.00104, 0.996361, 0.994983, 0.997905, 1.00031, 1.00016, 1.00817},
        {1.01033, 1.00051, 0.995001, 1.00052, 0.997133, 0.996593, 0.996805, 0.998215, 0.997428, 1.00254},
        {1.01006, 1.00493, 0.99515, 0.999354, 0.994506, 0.994533, 0.998739, 0.999393, 0.997791, 1.00791},
        {1.00829, 1.00028, 1.0001, 0.999853, 0.995364, 0.992446, 0.994727, 0.995168, 0.999624, 1.01239},
        {1.00064, 1.00235, 0.999837, 0.998971, 0.993613, 0.996114, 0.998026, 0.998195, 0.998867, 1.00989},
    },
    {
        {0.99443, 0.998163, 1.00363, 1.00442, 0.998357, 0.997251, 0.998548, 1.00195, 1.00235, 1.0006},
        {0.996483, 1.00109, 1.00307, 1.00198, 0.997734, 0.997478, 1.00202, 1.0029, 1.00014, 1.0008},
        {0.99863, 0.999516, 1.00162, 1.00088, 0.999084, 0.99797, 1.00041, 1.00301, 1.00307, 1.00742},
        {0.992898, 1.0008, 1.00232, 0.999037, 1.00002, 0.99778, 0.999623, 1.00075, 0.999956, 0.999017},
        {0.999631, 1.00083, 0.998602, 0.999349, 0.996511, 0.996299, 0.999784, 1.0003, 0.99913, 0.999669},
        {0.99887, 1.00035, 0.998906, 1.00147, 0.99618, 0.997097, 0.998206, 0.999829, 1.00367, 0.99989},
        {1.00034, 0.998429, 0.999181, 1.00016, 0.999691, 0.999099, 0.997825, 0.99925, 1.00405, 0.999137},
        {1.00261, 0.999917, 0.997933, 1.0009, 1.0043, 1.00028, 0.999325, 0.999934, 0.998456, 1.00273},
        {1.00176, 0.996025, 0.99547, 1.00016, 0.999678, 0.998059, 0.997839, 0.999436, 0.998795, 0.999725},
        {1.00423, 1.00339, 0.994898, 1.00008, 0.997975, 0.997397, 0.998949, 0.999938, 0.99932, 1.00339},
        {1.00428, 0.999701, 0.993827, 0.999256, 0.9979, 0.997936, 0.998742, 1.0005, 0.997867, 1.0052},
        {1.00421, 1.00095, 0.996898, 0.999027, 0.997655, 0.996919, 0.998962, 0.999919, 1.002, 1.00374},
        {1.00466, 0.998193, 0.997095, 1.00016, 0.997196, 0.99549, 0.999486, 0.997042, 0.997878, 1.00507},
        {1.00948, 1.00224, 0.995715, 0.998539, 0.994546, 0.994793, 0.997963, 0.997756, 0.99751, 1.00761},
        {1.00807, 0.998647, 0.998876, 1.00053, 0.997081, 0.991854, 0.996392, 0.996173, 0.999164, 1.01162},
        {1.00722, 1.00179, 0.999454, 0.999348, 0.994767, 0.993128, 0.99618, 0.995995, 1.0003, 1.00784},
    },
    {
        {0.994948, 0.99767, 1.00293, 1.00235, 0.999909, 0.997568, 0.999823, 1.00069, 1.00054, 0.998992},
        {0.995975, 1.00039, 1.00339, 1.00304, 0.996442, 0.997574, 1.00029, 1.00073, 1.00099, 1.00278},
        {0.999337, 0.996838, 1.00033, 0.99986, 0.997808, 0.997405, 1.00031, 1.00198, 1.00195, 1.0041},
        {0.998319, 1.00001, 0.999788, 1.00121, 0.999355, 0.998959, 1.00004, 1.00064, 1.00443, 1.0028},
        {0.99643, 0.998705, 0.999208, 0.997928, 0.999144, 0.995911, 0.998394, 1.00183, 1.00236, 1.00477},
        {1.00245, 0.998078, 1.00054, 0.999432, 0.99849, 0.996506, 0.997221, 1.00123, 1.00247, 1.00235},
        {1.00059, 0.999777, 1.00036, 1.00048, 0.999196, 0.997822, 0.99796, 1.00069, 1.0029, 1.00641},
        {0.997249, 0.998789, 0.998998, 1.00033, 1.00046, 0.999715, 0.997927, 0.998645, 1.00199, 1.00054},
        {1.00017, 1.00027, 0.996373, 1.00122, 1.00053, 0.999719, 0.998279, 1.00219, 1.00176, 1.00016},
        {1.00726, 1.00319, 0.995293, 0.999458, 1.00083, 0.998198, 0.997436, 0.998794, 0.999338, 1.00535},
        {1.0084, 0.997849, 0.996655, 0.999737, 0.997792, 0.997289, 1.00089, 1.00146, 0.999227, 1.00876},
        {1.00789, 1.00149, 0.99492, 0.999132, 0.996473, 0.994261, 0.998886, 0.999231, 0.996969, 1.0045},
        {1.00768, 1.0032, 0.993828, 0.997961, 0.997569, 0.997731, 0.998303, 0.997652, 0.997726, 1.00937},
        {1.00305, 1.00495, 0.993049, 0.998394, 0.99656, 0.99556, 0.99794, 0.997766, 0.998514, 1.00509},
        {1.0032, 1.00552, 0.999885, 1.00023, 0.997833, 0.991991, 0.995689, 0.996641, 1.00018, 1.00804},
        {1.00972, 0.998892, 0.998928, 0.999516, 0.995801, 0.994642, 0.998461, 0.996547, 0.996917, 1.01331},
    },
    {
        {0.995136, 0.997292, 1.00134, 1.00197, 0.998287, 0.997662, 1.00049, 1.00159, 1.00144, 1.0021},
        {0.9932, 0.999155, 1.00319, 1.00004, 0.997383, 0.996946, 0.999954, 1.00215, 1.00171, 1.00541},
        {0.997371, 1.00024, 1.00006, 0.999432, 0.997865, 0.998048, 0.999844, 1.00009, 1.00095, 1.0015},
        {0.993494, 1.00027, 1.00222, 0.999077, 0.997703, 0.997695, 0.998394, 1.00067, 1.00274, 1.00092},
        {0.998157, 0.99924, 1.00079, 0.999994, 0.998008, 0.996784, 0.998114, 1.00103, 1.00354, 1.00253},
        {0.998094, 0.998586, 1.00096, 1.00158, 0.997913, 0.997062, 0.99753, 0.999308, 1.00424, 1.00144},
        {1.00016, 0.997552, 1.00024, 1.00067, 0.999879, 0.997852, 0.998665, 0.998932, 1.00178, 1.00288},
        {0.998732, 0.998125, 1.00164, 1.00123, 1.00005, 0.998846, 0.998233, 0.998085, 1.00175, 1.00243},
        {1.00046, 0.997528, 0.997214, 0.999693, 1.00085, 0.999533, 0.999129, 0.998584, 1.00108, 1.00028},
        {1.00578, 1.00311, 0.994289, 0.999918, 0.999134, 0.99813, 0.998123, 0.998188, 0.999842, 1.00195},
        {1.00522, 1.00075, 0.997378, 1.00135, 0.997348, 0.997349, 0.99809, 1.00047, 0.999478, 1.00509},
        {1.0091, 1.00057, 0.996313, 1.0001, 0.997148, 0.995526, 0.998407, 0.999222, 0.996996, 1.00867},
        {1.00683, 1.00258, 0.996594, 0.999403, 0.995718, 0.995609, 0.999402, 0.999541, 0.998082, 1.00779},
        {1.0057, 1.00498, 0.996552, 0.99903, 0.996262, 0.994847, 0.998404, 0.998905, 0.996884, 1.0113},
        {1.00526, 1.00306, 1.00061, 1.00217, 0.996234, 0.993004, 0.99558, 0.998866, 1.00154, 1.00458},
        {1.00587, 0.9984, 0.999151, 1.00145, 0.99545, 0.993843, 0.997042, 0.997649, 0.997309, 1.00987},
    },
};
float bin_centering_corr_th_pip[7][16][10] = {
    {
        {0.999563, 1.00079, 1.00317, 1.00008, 0.999728, 0.999363, 0.99876, 0.999208, 0.997911, 1.00087},
        {1.00037, 1.00162, 1.00103, 1.00135, 0.998968, 0.999751, 0.997431, 0.999656, 1.00124, 0.997009},
        {0.996581, 0.99882, 1.00364, 1.00336, 1.00345, 0.999372, 0.998106, 0.997283, 0.997807, 1.00386},
        {0.995629, 0.99912, 0.998322, 1.00053, 1.00042, 0.999471, 0.993432, 0.998092, 0.999042, 1.00477},
        {0.995682, 1.00701, 1.00182, 1.00189, 1.00271, 0.994551, 0.997381, 0.995542, 1.00078, 0.997146},
        {0.999319, 1.00246, 0.997161, 1.00389, 1.00173, 0.998881, 1.00113, 1.00162, 0.998003, 1.00182},
        {1.00082, 0.998317, 0.998806, 1.00071, 0.999008, 0.996944, 0.998099, 0.998862, 0.998561, 0.997115},
        {1.00336, 1.00136, 0.998603, 1.00168, 1.00057, 1.00047, 1.00067, 1.00265, 1.0019, 1.00107},
        {1.0048, 1.00682, 0.999, 0.999989, 0.997938, 0.998782, 1.00244, 1.00062, 0.99906, 1.00129},
        {1.00479, 1.00052, 0.998992, 1.00027, 1.001, 0.999333, 1.00315, 1.00386, 1.00285, 0.994744},
        {1.01019, 1.00189, 0.99842, 1.0004, 0.998932, 1.00112, 0.999316, 1.00521, 1.00036, 0.998022},
        {0.994649, 0.999993, 0.999197, 0.999749, 1.0001, 0.996163, 1.00154, 1.0022, 0.999082, 1.00248},
        {1.00448, 1.00164, 0.998906, 0.999722, 0.998741, 0.999668, 0.998557, 1.0012, 0.999183, 1.00071},
        {1.00691, 0.998498, 0.999776, 0.995726, 0.996618, 0.997894, 1.00454, 0.998114, 1.00388, 0.992102},
        {0.999814, 1.00111, 1.00083, 0.997879, 0.998524, 0.999348, 1.00528, 1.00306, 1.00044, 1.01237},
        {1.00018, 1.00258, 0.998155, 0.998182, 0.998888, 1.00261, 0.997839, 0.997914, 1.00424, 0.998969},
    },
    {
        {0.99994, 1.00038, 1.00025, 1.0058, 1.00002, 1.00076, 0.998823, 0.997271, 0.998519, 1.00333},
        {0.997935, 1.00206, 1.00172, 1.00099, 1.00051, 0.999336, 0.997698, 0.997257, 0.999772, 0.997348},
        {1.00295, 0.996537, 1.00237, 1.0028, 1.00003, 0.996939, 0.995143, 0.996666, 1.00285, 1.00663},
        {0.998048, 0.999548, 1.00108, 1.00107, 1.00021, 0.998644, 0.994223, 1.00167, 0.997015, 1.00143},
        {0.994958, 1.00144, 1.00147, 1.00016, 1.00188, 0.999933, 0.99958, 0.998222, 1.0019, 1.00134},
        {0.999413, 0.998616, 0.998197, 1.00075, 1.00002, 1.00062, 1.00094, 1.00158, 0.999645, 0.998333},
        {1.00035, 0.998534, 0.998647, 0.999663, 0.998746, 0.999745, 0.998959, 1.00123, 1.00159, 1.00094},
        {1.00726, 1.00327, 1.001, 0.999411, 1.00025, 0.998416, 0.997187, 0.999298, 1.00118, 1.00109},
        {1.00298, 1.00012, 1.00099, 1.00077, 1.00296, 0.997968, 1.00053, 1.0001, 1.00134, 1.00386},
        {1.00054, 1.00339, 0.997923, 0.999912, 0.997763, 0.998917, 0.998759, 1.00057, 1.0003, 0.998337},
        {1.00529, 1.0027, 1.00116, 0.99732, 0.998845, 0.998171, 0.999283, 1.00133, 1.00075, 0.998118},
        {1.00263, 1.00483, 0.999368, 0.998878, 0.997314, 0.999703, 0.999297, 1.00163, 1.00353, 0.997511},
        {1.00214, 1.00249, 1.00209, 0.994729, 0.999477, 0.998071, 1.00325, 1.0022, 0.99947, 0.992339},
        {1.00182, 1.00028, 1.00108, 0.996384, 0.997796, 1.0019, 0.999185, 1.00084, 1.00301, 1.00745},
        {1.0058, 1.00147, 0.998179, 0.999954, 0.996673, 0.999493, 1.00488, 1.00495, 1.00434, 0.995601},
        {0.995535, 1.00155, 1.00033, 0.996788, 0.998698, 1.00015, 1.0011, 1.003, 0.998601, 0.999852},
    },
    {
        {0.998542, 1.00012, 0.999528, 1.00348, 1.00165, 0.998481, 1.0003, 1.00068, 1.00046, 1.00723},
        {1.00082, 1.00092, 0.999566, 0.999786, 1.00085, 1.00063, 0.997614, 0.995472, 0.999444, 0.99986},
        {0.995943, 0.99985, 1.00147, 1.00083, 0.999617, 0.996992, 0.997086, 0.994949, 0.998492, 1.00167},
        {0.996735, 0.99932, 1.00091, 0.998336, 1.00056, 0.999969, 0.995376, 0.997799, 0.999605, 0.999157},
        {1.00175, 1.00046, 1.00213, 0.999252, 0.999267, 0.999138, 0.99802, 0.999567, 1.00084, 1.0},
        {0.997855, 0.998374, 1.00101, 1.00086, 1.00266, 0.999903, 0.998757, 1.00139, 0.996512, 1.00193},
        {0.994954, 1.00272, 0.998686, 1.00159, 0.998593, 0.998587, 1.00068, 0.998192, 0.999062, 0.995352},
        {0.994451, 0.999949, 1.00141, 1.00112, 0.997561, 0.999337, 1.00227, 1.00222, 0.998735, 1.00115},
        {1.00204, 1.00019, 0.999129, 0.996872, 0.997001, 1.00146, 1.00007, 1.00193, 0.997394, 1.00218},
        {1.00464, 0.998662, 1.00234, 0.996381, 0.996881, 1.00094, 0.999272, 1.00321, 1.0004, 0.999012},
        {0.99953, 0.996598, 1.00011, 0.9986, 0.998379, 1.00195, 1.00203, 1.00561, 0.999987, 0.996315},
        {1.00343, 1.00134, 0.998057, 0.999865, 1.00077, 0.999027, 0.999447, 1.00007, 1.00181, 1.00161},
        {1.00589, 0.997323, 0.996702, 0.99933, 1.00044, 0.998853, 0.998575, 0.999679, 1.00484, 0.999393},
        {1.00466, 1.00043, 0.999672, 0.997829, 0.998415, 0.998359, 0.993541, 1.0053, 1.00433, 1.00292},
        {1.01049, 0.998693, 1.00274, 1.00154, 0.996748, 1.00225, 1.00189, 1.00734, 1.00265, 1.00222},
        {0.999103, 1.00061, 1.00061, 0.997578, 0.998897, 1.00069, 1.00004, 0.999352, 1.0016, 1.0003},
    },
    {
        {0.993778, 0.998761, 0.997764, 1.00046, 0.998565, 0.998254, 0.999201, 0.997755, 0.997468, 1.00146},
        {1.00248, 1.0008, 1.00095, 0.999756, 1.00149, 0.998154, 0.998934, 0.996474, 0.998875, 1.00632},
        {0.995666, 0.999118, 1.00061, 1.00147, 1.00017, 0.996743, 0.996457, 0.996535, 0.995859, 1.00322},
        {1.0001, 1.00165, 1.00153, 0.999853, 1.00152, 0.999646, 0.998459, 0.997074, 1.00137, 1.00557},
        {1.00256, 1.00094, 0.999886, 0.999324, 1.00053, 0.999088, 0.999973, 1.0002, 0.999117, 1.00146},
        {0.998178, 0.997435, 0.999201, 1.00131, 1.001, 0.999727, 0.999828, 1.00355, 1.00075, 0.999926},
        {0.996932, 1.00051, 0.997566, 1.00226, 0.998842, 0.999066, 1.00105, 0.999359, 0.998433, 0.996057},
        {1.00358, 0.999404, 0.99933, 0.999411, 0.999344, 1.00094, 1.0031, 1.00267, 1.00295, 0.995576},
        {0.997773, 1.00073, 0.999329, 0.999772, 0.999433, 0.997603, 1.00149, 1.00138, 1.00134, 0.99983},
        {1.00673, 0.998559, 0.997226, 0.999391, 0.997834, 1.00024, 1.00349, 1.00103, 1.00439, 0.993916},
        {0.998725, 1.00127, 0.999671, 0.999919, 0.99906, 0.999062, 0.9998, 1.00142, 1.00191, 1.00098},
        {1.00124, 1.0012, 0.999953, 0.999566, 0.998099, 0.998928, 1.00044, 1.00416, 1.00119, 1.00328},
        {1.00589, 1.0024, 1.00179, 0.997003, 0.997952, 0.998963, 1.00318, 0.999142, 0.999579, 1.00271},
        {1.0021, 0.999954, 0.999006, 0.996484, 0.996676, 0.9969, 0.999539, 1.00445, 1.00079, 1.00269},
        {1.00276, 1.00024, 0.998917, 0.997022, 0.998874, 0.998494, 1.0021, 1.00159, 0.999663, 1.00457},
        {0.99946, 0.999585, 0.998275, 0.996948, 0.997892, 1.00021, 0.999182, 1.00362, 1.00479, 1.00105},
    },
    {
        {1.00038, 1.00238, 0.998541, 0.999062, 0.999395, 0.999642, 1.00125, 0.999463, 0.998315, 0.999473},
        {0.997604, 1.0003, 1.00099, 1.00085, 1.00122, 0.999236, 1.0005, 0.997236, 0.999355, 1.00231},
        {0.999715, 0.997687, 1.00111, 1.00454, 1.00083, 0.998136, 0.995622, 0.998136, 0.997931, 0.996599},
        {1.00275, 1.00198, 1.00024, 1.00144, 1.00096, 0.998324, 0.995593, 0.998231, 0.998855, 1.00588},
        {0.995254, 1.00038, 0.999817, 1.00187, 1.00017, 0.998925, 0.999494, 0.999665, 0.999095, 0.997552},
        {0.998633, 1.00017, 0.999199, 1.00255, 0.99739, 1.00118, 1.001, 0.998439, 1.00007, 0.998293},
        {0.99813, 0.997644, 1.00063, 0.999098, 0.997522, 1.00118, 1.00022, 0.999615, 1.00228, 1.00003},
        {0.99688, 1.00289, 0.999841, 0.999858, 0.998054, 0.99952, 1.00037, 1.00061, 1.00143, 1.00142},
        {0.997923, 1.00153, 0.998789, 0.99674, 0.998593, 1.00029, 0.998856, 1.00228, 0.999186, 0.995313},
        {1.00799, 1.00031, 0.999806, 0.998268, 1.00009, 0.997876, 1.00115, 1.00372, 1.0006, 0.997358},
        {1.00149, 1.00226, 1.00076, 0.997283, 0.998307, 1.00012, 0.999971, 1.00255, 1.00295, 0.997588},
        {1.0044, 1.00086, 0.998305, 0.997763, 0.996742, 0.997397, 1.00097, 1.00211, 1.00216, 1.00063},
        {1.00687, 1.00224, 0.999856, 0.997724, 0.999616, 0.999653, 1.0014, 1.00456, 1.00122, 1.00205},
        {0.999493, 1.00379, 0.997999, 0.996485, 0.997638, 0.998822, 0.998361, 1.00355, 1.00372, 0.998931},
        {0.997315, 1.00212, 0.999249, 1.00046, 0.996398, 1.00267, 0.999485, 1.00414, 1.0045, 1.00266},
        {0.999923, 1.00337, 1.00211, 0.996993, 0.997558, 1.00118, 0.999035, 1.00146, 1.00233, 1.00068},
    },
    {
        {1.00015, 0.998443, 1.00156, 1.00211, 0.999766, 1.00105, 0.999209, 0.998785, 1.00072, 0.999167},
        {1.00036, 0.998945, 0.998757, 1.00017, 0.9996, 0.998296, 0.998025, 0.996136, 0.999237, 1.00282},
        {1.00106, 0.999441, 1.00166, 1.00052, 0.999197, 0.998054, 0.995638, 0.996923, 0.999184, 1.0017},
        {1.00388, 1.00086, 1.00104, 1.00104, 1.00114, 0.998994, 0.996607, 0.998368, 1.00089, 1.00112},
        {1.00247, 1.00023, 1.00119, 1.00113, 0.999847, 0.999611, 1.00037, 1.00126, 1.0002, 1.00034},
        {0.996006, 0.999134, 1.00163, 1.00209, 0.999314, 0.998725, 1.00214, 0.998729, 1.00034, 0.998348},
        {1.00097, 1.0013, 0.999619, 0.998715, 0.998093, 0.998721, 0.999723, 1.00291, 1.00039, 0.99864},
        {1.00213, 0.999426, 1.00176, 0.99904, 0.999224, 1.00059, 1.00094, 0.999969, 1.00199, 1.00091},
        {1.00108, 1.00244, 1.00015, 0.999495, 0.99857, 0.997907, 1.00032, 1.00282, 1.0013, 1.00177},
        {1.00507, 1.00191, 0.999327, 0.998219, 0.999092, 1.00076, 1.00195, 1.00089, 0.999863, 0.996624},
        {1.00242, 0.999379, 0.999845, 1.00151, 1.00021, 0.997979, 1.001, 1.00165, 0.999916, 0.998234},
        {1.00207, 0.999097, 0.997915, 0.999171, 0.99858, 0.998382, 1.00121, 1.00231, 1.00034, 1.00075},
        {1.00322, 0.998716, 1.00179, 0.997176, 0.997975, 1.00029, 1.00001, 1.0031, 1.00236, 1.00601},
        {0.9994, 1.00048, 1.00047, 0.99914, 0.997473, 0.99779, 1.00184, 1.00265, 1.00227, 1.00107},
        {1.00552, 1.00315, 1.00023, 0.999461, 0.999428, 0.999167, 1.00136, 1.00216, 1.00058, 0.997955},
        {0.998336, 1.00172, 0.999568, 0.997337, 0.997528, 1.00033, 1.0013, 1.00338, 1.00175, 1.00245},
    },
    {
        {0.999472, 1.00064, 1.00117, 1.00065, 1.00062, 0.99907, 0.999116, 0.997984, 0.999792, 0.999518},
        {0.998831, 0.999878, 1.00049, 1.00063, 0.999471, 0.999484, 0.998158, 0.997294, 0.997536, 1.00525},
        {1.00159, 0.999726, 1.00318, 1.00086, 0.999556, 0.999077, 0.997778, 0.997193, 0.997121, 1.00172},
        {0.997917, 1.00072, 1.00132, 1.00018, 0.999771, 0.998197, 0.998166, 0.996755, 0.998624, 1.00157},
        {0.998351, 0.999994, 0.998453, 0.999771, 0.999121, 1.0005, 0.999939, 0.999626, 0.999979, 0.998873},
        {0.999342, 0.999699, 0.99938, 1.00101, 1.00135, 1.00044, 1.00097, 0.999767, 0.999652, 0.999797},
        {1.00032, 1.00071, 0.999578, 1.00088, 1.00066, 0.998924, 1.00207, 1.00151, 0.999658, 0.999936},
        {0.997235, 1.00294, 1.0009, 1.00067, 0.998996, 1.00008, 1.00103, 1.00211, 0.998104, 0.998312},
        {1.0011, 1.0028, 0.999298, 0.999862, 0.999214, 0.999128, 1.00065, 1.00315, 1.00077, 0.996006},
        {1.00483, 1.00222, 0.999901, 0.998623, 0.998202, 1.00026, 1.00288, 1.0042, 1.00021, 0.995657},
        {1.00362, 1.00011, 0.998942, 0.998481, 0.997989, 0.9993, 1.00184, 1.00101, 1.00084, 1.00163},
        {1.00168, 1.00105, 1.00147, 0.997401, 0.999433, 0.999574, 0.999712, 1.00187, 1.00206, 1.00084},
        {1.00468, 1.00269, 1.00039, 0.997876, 0.997539, 0.999873, 0.999944, 1.00289, 1.00154, 0.999171},
        {1.00349, 1.00189, 0.999003, 0.99803, 0.997667, 0.998562, 0.999321, 1.00229, 1.00227, 0.999323},
        {0.999917, 1.00333, 1.0004, 0.996987, 0.998899, 0.998951, 1.00155, 1.00269, 1.00248, 1.00097},
        {0.997942, 1.00162, 1.00141, 0.999026, 0.997531, 0.999949, 1.00267, 1.00149, 1.00184, 1.00251},
    },
};
float bin_centering_corr_th_pim[7][16][10] = {
    {
        {0.994515, 1.00057, 0.999479, 0.99892, 1.00006, 0.998387, 1.00026, 0.999753, 1.00238, 1.00303},
        {1.00076, 0.997308, 0.997212, 0.997577, 1.00051, 1.00039, 0.999345, 1.00133, 1.00184, 0.998648},
        {1.00174, 1.00088, 1.00338, 1.00352, 1.00024, 1.00022, 1.00024, 0.999517, 1.00275, 1.00127},
        {0.997389, 0.99898, 0.998313, 1.00138, 0.998914, 0.998938, 1.00109, 1.00118, 0.999281, 0.996576},
        {1.00253, 1.00043, 0.999392, 1.00401, 1.00005, 0.996918, 1.0045, 1.00162, 0.994119, 1.00559},
        {1.00459, 0.997555, 1.00007, 0.999489, 0.999593, 0.999632, 1.00038, 1.00123, 1.00282, 1.00408},
        {1.00534, 0.995876, 0.998189, 0.998542, 0.998655, 1.00203, 1.00027, 1.00221, 0.999834, 0.99302},
        {1.00442, 0.997704, 0.997715, 0.998816, 1.00256, 1.00055, 1.00079, 1.00207, 1.00411, 1.00482},
        {0.99455, 1.00088, 0.99854, 1.00323, 0.999961, 0.99824, 0.998462, 1.00007, 0.999924, 1.00086},
        {1.00159, 1.00096, 1.00135, 1.00197, 0.999771, 1.00069, 1.00141, 1.00085, 1.00363, 1.00587},
        {0.99491, 0.999236, 0.998264, 1.00128, 1.00156, 1.00087, 1.00275, 0.999242, 0.998609, 0.998635},
        {1.00058, 0.998595, 1.00022, 0.999245, 0.999513, 0.999111, 0.996899, 0.997712, 0.99907, 0.993622},
        {0.999882, 0.99795, 0.997893, 0.999327, 1.00266, 1.00073, 0.999984, 1.00012, 1.00037, 1.0001},
        {0.999081, 0.998803, 1.00123, 0.999999, 1.00224, 1.00179, 0.999129, 1.00059, 0.998449, 1.0007},
        {0.994767, 0.997454, 1.00131, 1.00178, 0.999175, 1.00041, 0.998406, 0.996083, 0.999808, 1.01003},
        {0.9963, 0.997244, 0.99868, 1.00251, 1.0042, 1.00165, 1.00054, 1.00037, 1.00112, 1.00371},
    },
    {
        {0.998648, 1.00242, 1.00048, 0.999154, 1.00147, 1.00038, 1.00125, 1.00025, 1.00262, 0.993337},
        {1.00397, 1.00157, 1.00259, 1.00105, 1.00261, 1.00191, 1.00043, 0.997788, 0.9991, 1.00122},
        {1.00442, 1.00065, 1.00285, 0.999154, 0.99902, 1.00242, 0.998962, 0.998616, 1.00151, 1.00184},
        {0.999104, 0.999617, 0.998978, 1.00042, 0.999996, 0.999193, 1.00045, 0.998417, 0.997379, 0.999159},
        {1.00315, 1.00224, 1.00213, 1.00104, 0.99998, 1.00114, 0.999888, 0.999397, 0.997755, 0.997153},
        {1.00027, 0.999981, 0.999095, 0.999358, 0.999924, 1.00074, 1.00065, 1.00176, 1.00028, 1.00176},
        {0.998865, 1.00061, 1.00208, 1.0022, 0.998877, 1.00243, 1.00122, 1.00166, 1.00063, 1.00056},
        {0.998674, 1.00135, 0.998583, 1.00236, 0.999715, 1.00091, 1.00168, 1.00053, 0.998864, 1.00222},
        {0.994918, 0.997457, 1.00036, 1.00063, 1.00256, 0.998559, 0.998782, 1.00083, 1.00031, 1.00133},
        {1.00063, 0.997424, 0.998069, 1.00184, 1.00121, 0.999917, 1.00032, 0.998032, 1.00366, 1.00883},
        {1.00152, 0.999985, 1.00188, 1.00092, 0.999597, 1.00133, 1.00138, 1.00159, 0.998582, 1.0007},
        {0.998263, 1.00109, 0.999299, 1.00292, 1.0009, 0.999784, 0.999773, 0.996073, 0.998665, 1.00296},
        {1.007, 1.00061, 0.998502, 1.0012, 1.00079, 0.997562, 1.00024, 0.999282, 1.00323, 1.0036},
        {1.00991, 0.996649, 0.999069, 0.999971, 1.00143, 1.00066, 0.999459, 0.998153, 0.996615, 1.00907},
        {1.00518, 0.998975, 1.00081, 1.001, 1.0003, 0.999194, 1.0, 0.99708, 0.997862, 1.00217},
        {0.99713, 0.99585, 1.00213, 1.00054, 1.00031, 1.00097, 0.998859, 0.998065, 0.995511, 1.00599},
    },
    {
        {1.00223, 1.00135, 0.99906, 1.00162, 0.998216, 0.999305, 0.998416, 0.998472, 1.00016, 1.00164},
        {0.995476, 1.00129, 1.00406, 1.00183, 1.00301, 1.001, 1.00044, 0.997358, 1.00012, 0.999864},
        {0.999187, 0.999318, 1.00168, 0.998979, 1.00022, 1.00027, 1.00026, 0.998466, 1.00273, 0.997222},
        {1.00037, 0.998567, 1.00162, 1.00106, 1.00021, 0.999968, 0.999986, 0.998908, 1.00017, 1.00359},
        {1.00014, 0.99986, 1.00107, 0.999369, 0.998163, 0.999625, 0.998995, 1.00156, 1.0003, 0.997577},
        {0.999683, 0.997675, 1.00181, 0.998921, 0.998873, 1.00211, 1.00087, 0.998579, 0.999354, 0.999497},
        {0.999656, 0.999868, 1.00197, 0.997241, 1.00087, 0.99997, 1.00067, 1.00172, 0.997647, 1.0022},
        {0.999227, 1.00084, 1.00021, 0.998969, 0.99913, 0.999548, 0.998477, 1.0009, 1.00287, 0.999369},
        {1.00394, 0.999994, 0.999063, 1.00177, 0.999364, 1.00042, 0.999524, 1.00285, 0.9975, 0.99664},
        {1.00391, 1.00288, 1.00011, 0.998768, 1.0034, 1.00007, 0.999217, 0.998643, 1.00369, 0.996733},
        {0.998123, 0.99746, 1.00268, 1.00041, 0.999438, 1.0013, 1.00205, 0.998628, 1.00073, 0.993889},
        {0.995888, 0.998194, 0.997749, 0.999232, 1.00032, 1.0019, 1.00012, 1.00074, 1.00111, 0.997422},
        {0.998972, 0.999305, 0.999662, 1.00114, 1.00056, 1.0006, 0.999489, 1.00018, 1.00453, 1.00619},
        {1.00797, 0.999907, 1.00242, 1.00039, 1.0009, 1.00152, 0.999202, 0.997129, 0.998868, 1.00388},
        {1.00034, 1.00436, 0.997115, 0.99978, 1.00085, 1.00051, 1.00067, 0.995428, 0.999066, 1.00298},
        {1.00936, 0.993358, 0.998838, 1.00411, 1.00399, 1.00142, 0.996869, 0.99965, 0.998621, 1.00303},
    },
    {
        {1.00185, 1.0012, 0.999224, 1.00129, 0.999808, 0.999132, 1.00298, 1.00028, 0.998157, 1.00542},
        {0.999781, 1.00304, 0.99794, 1.00031, 1.0009, 0.999194, 0.999574, 1.00183, 1.00369, 1.00522},
        {0.997244, 0.999728, 1.00008, 1.00029, 0.999905, 0.998213, 1.00004, 1.00035, 0.997683, 1.00186},
        {1.00367, 1.00317, 0.9984, 1.0, 0.999563, 0.999104, 0.999691, 1.00131, 0.999803, 0.998751},
        {1.0009, 1.002, 1.00004, 1.00114, 1.00407, 0.999405, 1.0017, 0.997888, 1.00022, 1.00096},
        {1.00128, 0.999217, 0.998206, 1.00217, 1.0009, 0.999858, 1.00261, 0.997973, 1.00035, 1.00563},
        {1.00067, 1.00375, 1.00012, 1.00049, 1.00146, 1.00053, 0.999664, 1.00026, 0.999007, 1.00192},
        {0.997559, 0.998274, 0.997465, 1.00182, 1.00075, 1.00009, 1.0011, 1.00084, 0.998798, 1.00281},
        {1.00476, 0.998102, 0.999868, 1.00143, 1.00124, 1.00056, 1.00171, 1.00005, 1.00351, 0.993588},
        {0.999317, 0.997086, 1.00039, 1.00051, 1.00344, 1.0017, 1.0005, 1.00125, 1.00034, 0.995248},
        {1.00369, 0.998131, 0.99644, 0.999445, 1.00137, 1.0024, 0.99982, 0.99931, 1.00306, 0.99536},
        {0.997784, 0.997776, 1.00068, 1.00094, 0.99929, 1.00119, 1.00117, 1.00006, 0.997048, 0.998186},
        {1.00259, 1.00022, 1.00095, 0.999756, 1.00124, 1.00087, 1.00027, 0.999221, 1.00363, 0.992244},
        {1.00702, 0.997877, 1.00106, 1.00219, 1.00194, 0.998854, 0.999848, 0.999273, 1.00225, 1.00034},
        {1.0032, 1.00088, 1.00038, 1.00255, 0.998147, 1.00145, 0.996522, 1.00186, 0.998872, 1.00273},
        {0.997422, 0.999061, 0.99645, 1.00043, 0.999094, 1.00189, 0.99792, 0.99521, 1.00148, 0.994722},
    },
    {
        {1.0021, 1.00012, 0.999484, 0.999663, 0.9987, 0.999025, 0.999359, 1.00097, 1.00045, 0.991842},
        {1.00078, 0.998093, 0.999631, 0.998989, 0.998432, 1.00032, 0.99941, 1.00031, 0.996824, 0.99758},
        {1.00455, 1.00242, 0.998793, 0.999634, 0.999577, 1.00026, 0.999437, 1.00074, 0.999974, 1.00209},
        {1.00347, 1.00015, 1.00054, 0.999731, 1.00089, 0.999728, 0.999276, 1.00094, 0.997194, 0.997322},
        {1.00343, 0.997982, 0.997591, 0.998023, 1.00133, 1.00035, 0.999057, 0.998611, 0.999735, 0.999957},
        {1.00467, 1.00171, 1.00049, 1.00299, 0.999973, 0.999933, 1.00128, 1.00149, 1.00021, 0.99666},
        {1.00249, 0.997663, 1.00239, 1.00148, 1.00087, 0.998891, 1.002, 1.00168, 0.998664, 1.00376},
        {1.00324, 1.00028, 0.998584, 1.00086, 1.00086, 0.998157, 1.00168, 0.999752, 1.00148, 1.00017},
        {0.998729, 0.998898, 0.996484, 1.0017, 1.00031, 1.0001, 0.998205, 1.00043, 0.999252, 0.992388},
        {0.998847, 1.00082, 0.999868, 0.999051, 1.00002, 1.00151, 1.00249, 1.00127, 0.999687, 1.00208},
        {1.00215, 1.00033, 0.999073, 1.00265, 0.998327, 1.00032, 1.00054, 0.998932, 1.00252, 0.998935},
        {1.0016, 1.00025, 1.00174, 1.00044, 1.00024, 0.999604, 1.00021, 0.999362, 0.999635, 0.998062},
        {0.999537, 0.996613, 1.00206, 1.00144, 1.00124, 0.998493, 1.00164, 0.999273, 0.999236, 1.0005},
        {0.999887, 0.999901, 0.999539, 1.00034, 1.00021, 1.0015, 0.998704, 0.997227, 1.00151, 0.999893},
        {0.999312, 1.00167, 1.00103, 1.00112, 1.0018, 0.998296, 1.00088, 0.998198, 0.999796, 1.00371},
        {0.996905, 0.995579, 1.00038, 1.0002, 1.00213, 0.998388, 0.99973, 0.998845, 0.998144, 1.00031},
    },
    {
        {0.998198, 1.00034, 1.00173, 1.00057, 0.997873, 1.00275, 0.999616, 1.00052, 0.998901, 0.999467},
        {1.00234, 0.997688, 1.00344, 0.998835, 1.00041, 1.00109, 0.998139, 0.998201, 1.0004, 0.999146},
        {1.00051, 1.00029, 1.00038, 0.998581, 1.00053, 1.00113, 0.998837, 0.999359, 0.997755, 1.00072},
        {0.999444, 1.00122, 1.00126, 0.999569, 1.00056, 1.00043, 0.999956, 1.00062, 0.99862, 0.999013},
        {1.00135, 0.999918, 1.00062, 1.00021, 0.999608, 0.999061, 0.99902, 1.00069, 0.999373, 0.998908},
        {1.00079, 0.999966, 0.999954, 0.999655, 0.999605, 1.00035, 1.00075, 1.0011, 0.999871, 1.00028},
        {1.00225, 1.00086, 0.999828, 1.0008, 1.00023, 0.998973, 0.999543, 1.0004, 1.00062, 0.999561},
        {0.997216, 0.996965, 0.998443, 0.998965, 1.00125, 0.999893, 0.998872, 1.00118, 0.999819, 0.999791},
        {1.00113, 0.997805, 0.999045, 1.00092, 1.00127, 1.00001, 1.00142, 0.999425, 1.00095, 0.997136},
        {0.995193, 1.00057, 1.00038, 1.00004, 1.00022, 1.00031, 1.00027, 1.00143, 0.997938, 1.00008},
        {0.996137, 1.0012, 0.998689, 0.998874, 0.997915, 1.00169, 1.00091, 1.00052, 0.998372, 1.00353},
        {1.00216, 1.00056, 0.999716, 1.00139, 0.998038, 1.00069, 1.00015, 0.998413, 1.00003, 1.00026},
        {1.00115, 0.999804, 0.999466, 1.00098, 1.00046, 0.99957, 1.00087, 1.00156, 0.999829, 0.996485},
        {1.00919, 0.998799, 0.999906, 1.00057, 0.9996, 0.999754, 1.00021, 0.999594, 1.00022, 0.99554},
        {0.999718, 1.00026, 1.00057, 1.00012, 1.00277, 1.00146, 0.999978, 0.999505, 0.998246, 1.01001},
        {0.994772, 1.00164, 0.999496, 1.00011, 1.0001, 0.999842, 1.00042, 0.998484, 0.99854, 0.998364},
    },
    {
        {0.999693, 1.00252, 1.00094, 1.00041, 1.00002, 1.00038, 1.00052, 0.99891, 0.99887, 1.00232},
        {1.00142, 1.00042, 1.00037, 1.00003, 0.999124, 1.00142, 1.00072, 1.00082, 0.997896, 1.00394},
        {0.998834, 0.999369, 0.999559, 0.999816, 0.998994, 1.00039, 0.999124, 0.999302, 0.999049, 1.00277},
        {1.00347, 0.999114, 0.999788, 1.00076, 0.997798, 1.00001, 0.999409, 0.998984, 0.99917, 1.0003},
        {1.00097, 0.998409, 1.00071, 1.00066, 0.999587, 0.999511, 1.00023, 1.00115, 0.999705, 0.997667},
        {0.999896, 0.998768, 1.00093, 1.00088, 0.999722, 1.00061, 1.00072, 1.00019, 0.999265, 1.00031},
        {1.00203, 1.00042, 0.999665, 0.999921, 0.999487, 0.999856, 0.999816, 1.00019, 0.999378, 0.999297},
        {1.00094, 1.00142, 1.00047, 1.00012, 0.999933, 0.999997, 1.00017, 0.999255, 0.999411, 0.998938},
        {0.999827, 0.999101, 0.999802, 1.00075, 0.998754, 0.999894, 1.00102, 0.999579, 0.999274, 1.0003},
        {1.00302, 0.999628, 0.998547, 1.00083, 0.999645, 1.0011, 0.999289, 0.999788, 0.999326, 0.997441},
        {1.00312, 0.998433, 0.999832, 1.00155, 1.00074, 1.00048, 1.0002, 1.00002, 0.998809, 0.998929},
        {0.999343, 0.999244, 0.999345, 1.00178, 0.999788, 1.00026, 0.99873, 0.999193, 1.00155, 1.00372},
        {1.00034, 1.00066, 0.998855, 0.999749, 1.00064, 1.00005, 1.00038, 0.999858, 0.999267, 0.995221},
        {1.00148, 1.0015, 0.998838, 1.00106, 1.0013, 1.00055, 1.00019, 0.999364, 1.001, 0.99828},
        {1.00391, 1.00015, 1.00104, 0.999835, 1.00072, 0.999926, 1.00035, 0.999276, 0.998603, 1.00071},
        {1.00166, 1.00188, 0.999415, 1.00214, 1.00014, 0.999389, 0.99901, 0.999394, 1.00066, 0.999574},
    },
};
float bin_centering_corr_alpha_prot[7][16][10] = {
    {
        {1.0038, 0.998953, 0.994315, 0.994611, 1.00234, 1.00103, 0.994479, 0.996552, 0.999991, 1.0043},
        {1.00213, 0.99971, 0.993131, 0.996435, 1.00566, 1.0068, 0.997414, 0.992981, 0.999576, 1.00493},
        {1.00411, 0.996911, 0.993448, 0.995184, 1.00617, 1.00383, 0.995773, 0.996324, 0.992684, 1.00196},
        {1.00059, 0.995902, 0.99537, 0.998403, 0.998919, 1.00232, 0.996928, 0.995828, 0.99719, 1.00299},
        {1.00869, 0.997896, 0.998256, 0.999902, 0.999076, 1.00037, 1.00041, 1.00012, 0.994688, 1.00274},
        {1.00348, 0.998129, 0.999813, 0.998746, 0.999388, 1.00139, 0.999653, 1.00037, 0.999886, 1.00581},
        {0.998096, 1.0001, 0.996773, 0.997872, 0.998051, 0.998212, 1.00224, 0.99751, 0.998362, 1.00328},
        {1.00462, 1.00079, 1.00212, 1.00042, 1.00567, 1.0017, 0.997538, 0.999688, 0.99947, 0.999679},
        {0.999751, 1.00484, 0.998134, 1.00049, 1.00207, 1.00225, 0.997575, 1.00101, 1.00164, 0.998217},
        {1.00891, 1.00248, 1.00396, 0.997423, 1.00099, 1.00229, 0.998414, 1.00206, 1.00318, 1.00592},
        {1.00343, 1.00006, 1.00564, 1.00077, 1.00184, 1.0014, 0.998983, 1.00378, 1.00162, 1.00273},
        {1.00392, 1.00163, 1.00397, 0.996221, 0.999878, 1.001, 1.00007, 1.00196, 1.00346, 1.00755},
        {1.0053, 0.99765, 1.00312, 1.0017, 1.00099, 1.00022, 1.00369, 1.00638, 0.995792, 1.01179},
        {1.00877, 1.00333, 0.99898, 1.00148, 1.00228, 1.00383, 0.997374, 1.0062, 1.00038, 1.00923},
        {1.00621, 1.00335, 1.00544, 0.999362, 1.00105, 0.997031, 1.00173, 1.00308, 1.00142, 1.01632},
        {1.00881, 1.00125, 1.00356, 1.00111, 1.00026, 1.00385, 1.0014, 1.00609, 0.998724, 1.00812},
    },
    {
        {1.00468, 1.00186, 0.995184, 0.996518, 1.00429, 1.00629, 0.995128, 0.994264, 0.998501, 1.00356},
        {1.00232, 1.00179, 0.992282, 0.994574, 1.00504, 1.00306, 0.997354, 0.993883, 1.00016, 1.00345},
        {1.00376, 1.00147, 0.996035, 0.995561, 1.00501, 1.00539, 0.995888, 0.996586, 0.997481, 1.00424},
        {1.00524, 0.995691, 0.996228, 0.996892, 1.00234, 0.998134, 0.998632, 0.995599, 0.996621, 1.00195},
        {1.00356, 0.995799, 0.998031, 0.99852, 1.00213, 1.00132, 0.998405, 0.998408, 0.994152, 1.00443},
        {1.00224, 0.998831, 1.00205, 1.00042, 1.0002, 1.00007, 1.00058, 1.00081, 0.997552, 1.00394},
        {1.00234, 1.00101, 0.998699, 0.998485, 1.00097, 1.00049, 1.00226, 1.00042, 0.997195, 1.00276},
        {1.00178, 0.997408, 0.997047, 0.997482, 1.00314, 1.00795, 0.999687, 1.00112, 0.997475, 0.999986},
        {1.00256, 1.00075, 1.00066, 0.996429, 1.00406, 1.00488, 0.998728, 1.00077, 1.00421, 1.00104},
        {1.00524, 1.00154, 0.998676, 0.99871, 1.00567, 1.00445, 0.996949, 1.00172, 1.0038, 1.0065},
        {1.00069, 0.99898, 1.00438, 0.998649, 1.00383, 1.00361, 0.998574, 1.00209, 0.99973, 1.00204},
        {1.00565, 1.00217, 1.00027, 0.998146, 0.999424, 1.00344, 1.00308, 1.00279, 1.00076, 1.00385},
        {1.00715, 1.00128, 1.00471, 1.00103, 1.00343, 0.999921, 1.00038, 1.00187, 1.00149, 1.00703},
        {1.00957, 1.00363, 1.00176, 1.00192, 1.00157, 1.00161, 0.998671, 1.00112, 1.00325, 1.00947},
        {1.0093, 1.00376, 1.00373, 1.00001, 1.0024, 1.00036, 0.999363, 1.00527, 1.00216, 1.01341},
        {1.00924, 1.00473, 1.00284, 1.00234, 0.996949, 0.998591, 0.99868, 0.999529, 1.00238, 1.00474},
    },
    {
        {1.00324, 0.999681, 0.994839, 0.995873, 1.00524, 1.00291, 0.995289, 0.992737, 0.999618, 1.00395},
        {1.00264, 1.00225, 0.993043, 0.99648, 1.00567, 1.00804, 0.993468, 0.989523, 0.999097, 1.00288},
        {1.00458, 0.999907, 0.993653, 0.995873, 1.00158, 1.00474, 0.996921, 0.996109, 0.998632, 1.00455},
        {1.00111, 0.995532, 0.994112, 0.999877, 0.999865, 1.0035, 1.00011, 0.99407, 0.998419, 1.00565},
        {1.00478, 0.99624, 1.00067, 1.00011, 1.00186, 1.00054, 0.99912, 0.99793, 1.00138, 1.00878},
        {1.00507, 0.998222, 0.998511, 0.996088, 0.999279, 1.00137, 0.998765, 0.998261, 0.99732, 1.00549},
        {1.00071, 0.997841, 0.999137, 0.999498, 1.00172, 1.0021, 1.00114, 1.00403, 0.997514, 1.00209},
        {1.00094, 0.99975, 0.997347, 0.996811, 1.0039, 1.00293, 0.999049, 1.00043, 0.999986, 1.0028},
        {0.998648, 1.00153, 1.00082, 0.994008, 1.00673, 1.00519, 0.998516, 0.999517, 0.999612, 1.00419},
        {1.00319, 1.00348, 1.00063, 0.998086, 1.002, 1.00181, 0.997391, 1.00216, 1.00036, 1.0001},
        {1.00306, 1.00274, 1.00161, 0.997845, 1.00461, 1.00468, 0.999657, 1.00323, 1.00325, 1.00256},
        {1.00537, 0.999677, 1.00574, 0.996487, 1.00165, 1.00258, 1.00104, 1.00193, 1.00287, 1.00649},
        {1.00945, 1.00326, 1.00418, 1.00017, 0.998658, 1.00036, 1.0014, 1.00121, 1.00408, 1.0073},
        {1.01029, 1.00347, 1.00011, 0.997592, 1.00224, 1.0014, 0.994144, 1.0019, 1.0045, 1.00888},
        {1.01074, 0.999852, 1.00142, 1.00016, 0.999993, 1.00167, 1.00094, 1.00484, 1.00094, 1.01401},
        {1.0085, 1.00351, 1.0036, 0.998485, 0.997878, 0.999756, 0.997677, 1.00661, 1.00113, 1.00734},
    },
    {
        {1.00373, 0.999709, 0.994512, 0.994661, 1.00385, 1.00375, 0.992454, 0.99424, 0.99579, 1.00418},
        {1.00429, 0.99825, 0.994802, 0.99528, 1.00422, 1.00167, 0.994523, 0.993584, 1.0018, 1.00199},
        {1.00419, 0.999357, 0.996665, 0.995634, 1.00452, 1.00705, 0.996085, 0.995682, 0.99878, 1.00239},
        {1.00511, 0.998731, 0.99507, 1.00042, 1.00079, 1.00079, 0.999319, 0.995943, 0.997833, 1.00553},
        {1.00344, 0.997325, 0.997387, 0.996365, 1.00251, 1.00309, 0.998255, 0.99796, 0.996373, 1.00334},
        {1.00652, 0.997609, 0.997894, 0.997426, 0.999245, 0.997783, 1.00017, 1.00038, 0.996139, 1.00406},
        {1.00351, 0.997982, 1.00043, 1.00072, 0.999226, 1.00388, 1.00033, 1.00103, 1.00096, 1.00448},
        {1.00013, 0.999112, 1.00198, 0.999742, 1.00253, 1.00171, 0.999451, 0.999413, 0.999852, 1.00164},
        {1.00044, 0.998014, 1.004, 0.9983, 1.00243, 1.00078, 0.997945, 1.00108, 1.00298, 1.00123},
        {1.0015, 1.00455, 1.00239, 0.997391, 1.00439, 1.00041, 0.998699, 1.00042, 1.00321, 1.0031},
        {1.00217, 1.00107, 1.00195, 0.999833, 1.00674, 1.00105, 0.998608, 1.00503, 1.00247, 1.00305},
        {1.00284, 1.00253, 1.00165, 0.99998, 1.00269, 0.998657, 0.999266, 1.00508, 1.00165, 1.00683},
        {1.00823, 0.998915, 1.00431, 0.996411, 1.00291, 1.00069, 1.0035, 1.00203, 1.00148, 1.00591},
        {1.00858, 1.00299, 1.0007, 0.999697, 1.00178, 1.00563, 0.999757, 1.0009, 1.00266, 1.0073},
        {1.0134, 1.00399, 1.00373, 0.999143, 1.00026, 1.00141, 1.00101, 1.00541, 1.00055, 1.01378},
        {1.01163, 1.00063, 1.00499, 0.998836, 0.999326, 1.00072, 0.999806, 1.00418, 0.999675, 1.00815},
    },
    {
        {1.00389, 1.00021, 0.995222, 0.995941, 1.00472, 1.00504, 0.99376, 0.995408, 1.00016, 1.00508},
        {1.00603, 0.998556, 0.992771, 0.995693, 1.00469, 1.00392, 0.99729, 0.992861, 0.999892, 1.00303},
        {1.00386, 1.00005, 0.995937, 0.998073, 1.00705, 1.00301, 0.995911, 0.992709, 0.998602, 1.0045},
        {1.00367, 0.995518, 0.996528, 0.998452, 1.00076, 1.00057, 0.998208, 0.99566, 0.997384, 1.00556},
        {1.00619, 0.996178, 0.998461, 0.99954, 1.00147, 0.999311, 0.998088, 0.997422, 0.994919, 1.00432},
        {1.00392, 0.999968, 1.00052, 0.998251, 0.999786, 1.00071, 0.999596, 1.00025, 0.997769, 1.00498},
        {1.0005, 1.00146, 0.998663, 1.00046, 1.00251, 1.00006, 1.00052, 1.00106, 0.997136, 1.00388},
        {1.002, 1.00026, 0.997928, 0.999336, 1.00616, 1.00224, 0.998956, 1.00026, 1.00184, 0.998489},
        {0.999807, 1.00223, 1.00062, 0.999408, 1.00466, 1.00106, 0.999472, 1.00269, 1.00309, 1.00189},
        {1.00384, 1.00295, 1.00316, 0.996498, 1.00238, 1.00167, 0.997349, 0.998942, 1.00528, 1.00435},
        {1.00367, 1.00301, 1.003, 0.999767, 1.00334, 1.00051, 1.00158, 1.00379, 1.00096, 1.00014},
        {1.00442, 1.00007, 1.00481, 0.997601, 1.00034, 1.00233, 0.997279, 1.00277, 1.00159, 1.00496},
        {1.01067, 0.998629, 1.0045, 1.00019, 1.0002, 0.999044, 0.998687, 1.00227, 1.00328, 1.00599},
        {1.00752, 1.00115, 1.00128, 0.998934, 1.00127, 1.00213, 0.999627, 1.00338, 1.00238, 1.00689},
        {1.01249, 0.999284, 1.0059, 1.00071, 1.00132, 0.997032, 0.999685, 1.00446, 1.00035, 1.01248},
        {1.00821, 1.00022, 1.00151, 1.00033, 0.999009, 0.999698, 0.99655, 1.00277, 1.00468, 1.00909},
    },
    {
        {1.00439, 0.999105, 0.994489, 0.993506, 1.00438, 1.00398, 0.99449, 0.993349, 0.99789, 1.00493},
        {1.0049, 0.999602, 0.992909, 0.994201, 1.0024, 1.00457, 0.995302, 0.992643, 0.997838, 1.00333},
        {1.00475, 0.997719, 0.995436, 0.995921, 1.00318, 1.00235, 0.99374, 0.996148, 0.99837, 1.00462},
        {1.0063, 0.996028, 0.995485, 0.99888, 1.00135, 0.999431, 1.00041, 0.998088, 0.996192, 1.00532},
        {1.00589, 0.997439, 0.998205, 0.999453, 1.0015, 1.00161, 1.00012, 0.999637, 0.997154, 1.00429},
        {1.00521, 0.997127, 1.00231, 0.998688, 1.00001, 0.998593, 0.998496, 0.999021, 0.995739, 1.00452},
        {1.00277, 0.998918, 1.00061, 0.999864, 1.00144, 1.00034, 0.996624, 0.999568, 0.99847, 1.0029},
        {1.00091, 1.00069, 1.00074, 0.998451, 1.00266, 1.00335, 0.997813, 0.998995, 1.00193, 0.998744},
        {1.00189, 1.00349, 0.999918, 0.998332, 1.00168, 1.00191, 0.996433, 1.00119, 1.00228, 1.00083},
        {1.00677, 1.0014, 1.00233, 0.997064, 1.00241, 1.00483, 0.996123, 1.00259, 1.00014, 1.00363},
        {1.00465, 1.00263, 1.00483, 0.999278, 0.999894, 1.00337, 1.00047, 1.00365, 0.999731, 1.00151},
        {1.00903, 1.00121, 1.00215, 0.999181, 0.99977, 1.00211, 0.999632, 1.00134, 0.999933, 1.00343},
        {1.00883, 1.00044, 1.00238, 0.999948, 1.00082, 1.00036, 1.00017, 1.00159, 1.00389, 1.00889},
        {1.00882, 1.00221, 1.00245, 0.999523, 1.00388, 1.00282, 0.999322, 1.00292, 1.00119, 1.00984},
        {1.01486, 1.00286, 1.0018, 0.998957, 1.00284, 1.00039, 1.00083, 1.00316, 1.00353, 1.01256},
        {1.00797, 1.00361, 1.00132, 1.00083, 1.00021, 0.998723, 1.00019, 1.0029, 1.0032, 1.01253},
    },
    {
        {1.00584, 0.998791, 0.992387, 0.995992, 1.00534, 1.00403, 0.994087, 0.992512, 0.998677, 1.00573},
        {1.00479, 1.00068, 0.992961, 0.996464, 1.00375, 1.00406, 0.996103, 0.993842, 0.999823, 1.00457},
        {1.00599, 0.998839, 0.996339, 0.997901, 1.0033, 1.00364, 0.996426, 0.997226, 0.998022, 1.00376},
        {1.00466, 0.9976, 0.996682, 0.99934, 0.999651, 0.999944, 0.998464, 0.996296, 0.995714, 1.00494},
        {1.00381, 0.995638, 0.997448, 0.998512, 1.00075, 1.0009, 0.998608, 0.99863, 0.997384, 1.00493},
        {1.00488, 0.998411, 0.998115, 0.99976, 0.999353, 1.00041, 0.99826, 0.998804, 0.999354, 1.00447},
        {1.00345, 0.99951, 1.00036, 0.99767, 1.00128, 1.00306, 0.998386, 1.00024, 1.00016, 1.0035},
        {1.00124, 0.999724, 0.998761, 0.99854, 1.00388, 1.00542, 0.99761, 0.999877, 0.999769, 1.00037},
        {1.00212, 1.00153, 1.00121, 0.999044, 1.00384, 1.00343, 0.996944, 1.00149, 1.00194, 1.00007},
        {1.00444, 1.00242, 1.00338, 0.998782, 1.00275, 1.00477, 0.998179, 1.00106, 1.00208, 1.00559},
        {1.00355, 1.00183, 1.00404, 0.999799, 1.00145, 1.00032, 0.999279, 1.00078, 1.00108, 1.003},
        {1.00641, 1.00011, 1.00276, 1.00087, 1.00139, 1.00249, 1.00209, 1.00167, 1.00085, 1.00681},
        {1.00807, 1.00089, 1.00299, 1.00007, 1.00073, 1.00168, 1.00095, 1.00236, 0.999442, 1.00893},
        {1.0077, 1.00385, 1.00294, 1.00024, 0.999699, 1.00156, 1.00132, 1.00262, 1.00244, 1.00927},
        {1.01223, 1.00196, 1.00364, 1.00009, 1.00001, 1.00235, 1.00062, 1.00441, 1.00169, 1.01146},
        {1.00814, 1.00399, 1.00259, 1.00151, 0.99773, 0.999553, 1.00046, 1.00377, 1.00343, 1.00929},
    },
};
float bin_centering_corr_alpha_pip[7][16][10] = {
    {
        {1.00335, 0.995091, 0.993862, 0.996181, 1.0001, 1.00697, 0.999721, 0.996707, 0.992897, 1.0031},
        {1.00111, 0.99587, 0.999141, 1.00387, 1.00126, 1.00682, 1.00277, 0.99436, 0.991095, 1.00345},
        {1.00597, 0.993027, 0.996895, 1.002, 1.00351, 1.00668, 1.00286, 0.994707, 0.994138, 1.00455},
        {0.999312, 0.998503, 0.99418, 0.999498, 1.0057, 1.00651, 1.00119, 0.993611, 0.998393, 0.998954},
        {1.00177, 0.997788, 0.990813, 1.00223, 1.00466, 1.00543, 0.998689, 0.990232, 0.996225, 1.00342},
        {1.00001, 0.997633, 0.993114, 0.999647, 1.00493, 1.00787, 0.998229, 0.99153, 0.998947, 0.999425},
        {0.999364, 1.00014, 0.99586, 0.998802, 1.00386, 1.00731, 1.00084, 0.994403, 0.997688, 1.00415},
        {1.0018, 1.00309, 0.998149, 0.999937, 1.00408, 0.99842, 0.995329, 0.999611, 1.00428, 0.996994},
        {0.998714, 0.999916, 0.999445, 1.00022, 1.00022, 1.00065, 1.00131, 1.00165, 0.997874, 1.00361},
        {1.00498, 0.996683, 0.999124, 0.999815, 1.00744, 1.00597, 0.999264, 0.997767, 0.99365, 1.0031},
        {1.00359, 0.996063, 1.00007, 1.0034, 1.00166, 1.00658, 1.00666, 1.00263, 0.997294, 0.998011},
        {1.00232, 0.998737, 0.996867, 1.0027, 1.0032, 1.0068, 1.0031, 0.998745, 0.995032, 0.997788},
        {1.00343, 0.997595, 0.998592, 1.00071, 1.00492, 1.00436, 1.00009, 0.99823, 0.995452, 1.00422},
        {1.00722, 1.00053, 0.996359, 1.00548, 1.0099, 1.00946, 1.00114, 0.997857, 0.996563, 1.00318},
        {1.00459, 0.997363, 0.995389, 1.00069, 1.01472, 1.01493, 1.00199, 0.996306, 0.999749, 1.00326},
        {1.00882, 0.992954, 0.993391, 1.00258, 1.01404, 1.01317, 1.00396, 0.997312, 0.994617, 1.00152},
    },
    {
        {1.00433, 0.996159, 0.996742, 0.998147, 1.0051, 1.00774, 1.0012, 0.99934, 0.994168, 1.00337},
        {1.00245, 0.989515, 0.997686, 1.00304, 1.00614, 1.00568, 0.999804, 0.996298, 0.991548, 1.00327},
        {1.00439, 0.99482, 0.99501, 1.0063, 1.0034, 1.00705, 1.00243, 0.996611, 0.988369, 1.00282},
        {0.999799, 0.996437, 0.994239, 1.00124, 1.00578, 1.00411, 0.999503, 0.996468, 0.997126, 0.998426},
        {1.00032, 0.998399, 0.991509, 0.999151, 1.00816, 1.00732, 0.998457, 0.994567, 0.997502, 1.0003},
        {0.999281, 0.996643, 0.991896, 0.998417, 1.00813, 1.00854, 0.997145, 0.99442, 0.998562, 0.998881},
        {1.00063, 1.00027, 0.994467, 0.997496, 1.00376, 1.00483, 0.996218, 0.99449, 1.00006, 1.00017},
        {1.00231, 0.999597, 0.998503, 0.999003, 1.00272, 1.00001, 0.99948, 0.996998, 0.99989, 0.999586},
        {1.00152, 0.997087, 0.998393, 1.00145, 1.00336, 1.00164, 0.999048, 1.00165, 0.9961, 1.00356},
        {1.00265, 0.995315, 1.00104, 0.999101, 1.00789, 1.00555, 1.00224, 1.00039, 0.995336, 1.0012},
        {0.998278, 0.996193, 1.00111, 1.00138, 1.00186, 1.00112, 1.00319, 0.999529, 0.998942, 1.00184},
        {1.00224, 0.999699, 0.996967, 0.999912, 1.00631, 1.0059, 0.999459, 0.999637, 0.998578, 0.998979},
        {1.0006, 0.997785, 1.00091, 1.00539, 1.00745, 1.00379, 1.0044, 0.998855, 0.996104, 0.999901},
        {1.00444, 0.998106, 1.001, 1.00317, 1.00971, 1.00997, 1.00351, 0.998946, 0.995319, 1.00667},
        {1.00603, 0.995701, 0.995689, 1.00256, 1.01466, 1.01587, 1.00388, 0.994906, 0.997666, 1.00418},
        {1.00423, 0.996754, 0.99741, 1.00301, 1.01149, 1.01056, 1.00076, 0.992227, 0.996718, 1.00283},
    },
    {
        {1.00409, 0.993469, 0.995331, 0.998421, 1.00669, 1.00411, 0.997742, 0.99747, 0.994826, 1.00764},
        {1.0028, 0.992769, 0.996098, 0.998157, 1.00433, 1.0065, 1.00081, 0.998877, 0.991773, 1.0033},
        {1.00401, 0.994036, 0.996477, 1.00119, 1.0042, 1.00569, 1.00129, 0.995835, 0.995286, 1.00754},
        {0.998813, 0.999835, 0.992684, 0.997328, 1.00703, 1.00689, 1.00053, 0.995042, 0.998584, 1.00136},
        {1.00038, 0.998627, 0.992058, 0.995448, 1.01031, 1.00677, 1.00109, 0.993493, 0.995863, 1.00301},
        {0.998713, 0.997428, 0.990557, 0.999061, 1.00653, 1.01073, 0.999754, 0.992873, 1.00071, 0.998677},
        {0.999546, 0.995099, 0.996799, 1.00144, 1.00283, 1.00399, 0.999304, 0.995098, 1.00076, 1.00225},
        {0.996685, 0.999775, 1.00007, 0.998473, 0.999926, 1.00229, 0.99869, 0.997398, 1.00135, 0.998945},
        {1.0029, 0.996224, 0.998123, 1.00103, 0.999727, 1.00129, 1.00098, 0.998908, 0.995858, 0.998126},
        {1.00255, 0.995732, 0.998849, 1.00337, 1.00835, 1.00932, 0.999132, 0.999441, 0.992079, 1.00368},
        {0.999307, 0.996279, 0.997484, 0.999445, 1.00682, 0.998226, 1.00621, 1.00231, 0.997948, 0.998591},
        {1.00289, 0.9997, 0.997881, 1.00209, 1.00714, 1.00684, 1.00067, 0.99858, 0.99759, 0.999224},
        {1.00136, 0.995396, 1.00192, 1.00041, 1.00534, 1.0085, 1.00249, 0.999157, 0.995576, 0.99968},
        {1.00511, 0.999633, 0.999108, 1.00116, 1.00825, 1.00832, 1.00394, 0.998279, 0.995729, 1.00783},
        {1.00568, 0.997694, 0.992465, 1.00276, 1.01277, 1.01762, 0.999655, 0.995434, 0.997911, 1.0081},
        {0.999711, 0.996699, 0.994725, 1.00539, 1.01229, 1.00853, 1.00144, 0.994878, 0.994185, 1.00404},
    },
    {
        {1.00608, 0.99485, 0.999449, 0.997058, 1.00409, 1.00618, 0.998104, 0.997446, 0.995485, 1.00281},
        {1.00406, 0.990033, 1.00081, 1.00315, 1.00596, 1.0069, 1.00035, 0.999198, 0.9929, 1.00449},
        {1.00212, 0.993661, 0.994764, 0.999429, 1.0061, 1.00269, 1.00052, 0.996303, 0.992207, 1.00488},
        {0.999427, 0.998774, 0.994702, 0.997983, 1.00405, 1.00488, 0.998748, 0.995117, 0.998879, 1.0004},
        {1.00123, 1.0, 0.990702, 0.998196, 1.00743, 1.00624, 0.9976, 0.990354, 0.996106, 1.00086},
        {1.00158, 1.00097, 0.992705, 0.996427, 1.00889, 1.00649, 1.00048, 0.993723, 1.00043, 0.998196},
        {1.00024, 0.998733, 0.994991, 0.997959, 1.0057, 1.00696, 0.995052, 0.994733, 1.00127, 0.999898},
        {1.00086, 1.00096, 0.997795, 1.00042, 1.00027, 1.00092, 0.997907, 0.998255, 1.00309, 0.999065},
        {1.00295, 0.999294, 0.997752, 1.00176, 1.00077, 1.00051, 1.00317, 0.997899, 0.999922, 1.00497},
        {1.00469, 0.995951, 0.997988, 0.999536, 1.00811, 1.00557, 1.00109, 0.999058, 0.996559, 1.00339},
        {1.00158, 0.997836, 1.00115, 1.00082, 1.00512, 1.0031, 1.00036, 1.00157, 0.996765, 1.00315},
        {1.00069, 1.00021, 0.999996, 1.00318, 1.00829, 1.0062, 1.00414, 0.999799, 0.998021, 1.00348},
        {0.999483, 0.998052, 0.997615, 1.00229, 1.00779, 1.00398, 1.00132, 0.999021, 0.9989, 1.00311},
        {1.00616, 0.995793, 0.99881, 0.998537, 1.00644, 1.00529, 0.999347, 0.998663, 0.997244, 1.00214},
        {1.00529, 0.998274, 0.994913, 1.00243, 1.01506, 1.01838, 1.00085, 0.994971, 0.998531, 1.00513},
        {1.00362, 0.99438, 0.995189, 1.00138, 1.01104, 1.00903, 1.00142, 0.994382, 0.998063, 1.0006},
    },
    {
        {1.00454, 0.993537, 0.9965, 0.998682, 1.00385, 1.00481, 0.997337, 0.993367, 0.993781, 1.00283},
        {1.00392, 0.992595, 0.996454, 1.00164, 1.0027, 1.00562, 1.00102, 0.995472, 0.994124, 1.00409},
        {1.00365, 0.993339, 0.99387, 1.0016, 1.00452, 1.0069, 1.00066, 0.996037, 0.992722, 1.00317},
        {0.999105, 0.99819, 0.996603, 0.998656, 1.00384, 1.0074, 0.998682, 0.995033, 0.999991, 0.997985},
        {1.00142, 0.996829, 0.992403, 0.998702, 1.00951, 1.0097, 0.997393, 0.992735, 0.997954, 1.00002},
        {0.997367, 1.00088, 0.994801, 0.996449, 1.0087, 1.00801, 0.997282, 0.993193, 0.99792, 1.00154},
        {0.9996, 1.00006, 0.99525, 0.997818, 1.00345, 1.00576, 0.998222, 0.995463, 0.998818, 1.00011},
        {0.99999, 0.998814, 0.998187, 0.999973, 1.00007, 1.00143, 0.998551, 0.998399, 0.998492, 1.00014},
        {1.00429, 0.999009, 1.00292, 0.999123, 1.00319, 1.00138, 1.00038, 1.00164, 1.00028, 1.00205},
        {1.00118, 0.995716, 0.998995, 1.00253, 1.00508, 1.00632, 1.00042, 0.998617, 0.997541, 1.00188},
        {1.00185, 1.00028, 0.998283, 1.00187, 0.999101, 1.00235, 1.00343, 0.999848, 0.99949, 1.0007},
        {1.00038, 0.997658, 0.999728, 1.00291, 1.0049, 1.00423, 1.004, 0.999588, 0.994483, 1.00186},
        {1.00318, 0.997101, 0.997955, 1.00044, 1.00364, 1.00671, 1.00263, 0.998621, 0.996787, 1.0054},
        {1.00536, 0.996331, 0.995993, 1.00084, 1.00677, 1.01004, 1.00302, 0.997786, 0.999252, 1.00282},
        {1.00682, 1.00062, 0.995821, 1.00072, 1.01557, 1.01376, 1.00026, 0.996141, 0.999586, 1.00498},
        {1.00524, 0.99935, 0.994207, 1.00327, 1.01199, 1.01224, 1.00235, 0.995252, 0.999461, 1.00178},
    },
    {
        {1.005, 0.995082, 0.993348, 1.00061, 1.00445, 1.00735, 0.999497, 0.994256, 0.994607, 1.00485},
        {1.00297, 0.992597, 0.997688, 1.00252, 1.00784, 1.00516, 1.00059, 0.996622, 0.991888, 1.00397},
        {1.00321, 0.99442, 0.996075, 1.00157, 1.00706, 1.00413, 1.00273, 0.998284, 0.994875, 1.00243},
        {0.996988, 0.996723, 0.994353, 0.998472, 1.00729, 1.00696, 0.99784, 0.9941, 0.997896, 0.999778},
        {1.0021, 0.997025, 0.992506, 0.999213, 1.00852, 1.00965, 0.998253, 0.992778, 0.996533, 1.00081},
        {0.999976, 0.99898, 0.992863, 0.997616, 1.00732, 1.0068, 0.997148, 0.992658, 0.998221, 1.00003},
        {1.00023, 0.999918, 0.995211, 0.999388, 1.00436, 1.00446, 0.997407, 0.998274, 0.999238, 1.00164},
        {1.00226, 0.99976, 0.996979, 0.999324, 1.00265, 1.0039, 1.00103, 0.998584, 1.00216, 1.00002},
        {1.00243, 0.995847, 1.00033, 1.00168, 1.00182, 1.00267, 1.00288, 1.00018, 0.999202, 1.0012},
        {1.00184, 0.996192, 0.998038, 1.00197, 1.00604, 1.0037, 1.00289, 0.99958, 0.995755, 1.00103},
        {1.00107, 0.997816, 1.00196, 1.00094, 1.00416, 1.00292, 1.00142, 1.00263, 1.00215, 0.999711},
        {1.0005, 1.00009, 0.999776, 1.0009, 1.00717, 1.00419, 1.00293, 0.998513, 0.997586, 1.00013},
        {1.00024, 0.999479, 0.999594, 1.00254, 1.00649, 1.00671, 1.00361, 1.00067, 0.99635, 1.00345},
        {1.00524, 0.995126, 0.999161, 1.00333, 1.00845, 1.00927, 1.00169, 0.997963, 0.995514, 1.00267},
        {1.00613, 0.998801, 0.995127, 1.00137, 1.01502, 1.01539, 1.00009, 0.99338, 0.999465, 1.00695},
        {1.0053, 0.998695, 0.994484, 1.00008, 1.01018, 1.01443, 1.00243, 0.99563, 0.997175, 1.00202},
    },
    {
        {1.00473, 0.993068, 0.995583, 0.999558, 1.00695, 1.00533, 0.997746, 0.994117, 0.995638, 1.00361},
        {1.00479, 0.992748, 0.997841, 1.00005, 1.00618, 1.0065, 1.00031, 0.998912, 0.994002, 1.00395},
        {1.00081, 0.993613, 0.99807, 1.00199, 1.0063, 1.00576, 0.999849, 0.996502, 0.995385, 1.00296},
        {0.99867, 0.999373, 0.995367, 0.998719, 1.00642, 1.00735, 0.999354, 0.994886, 0.997446, 0.999477},
        {1.0006, 0.997975, 0.991802, 0.998444, 1.00923, 1.00928, 0.995891, 0.991604, 0.998391, 1.00138},
        {0.999377, 0.998452, 0.993083, 0.996982, 1.00855, 1.00886, 0.997427, 0.992539, 0.997358, 0.999209},
        {1.0012, 0.999995, 0.995175, 0.996734, 1.00597, 1.0056, 0.996124, 0.995707, 0.999302, 1.00176},
        {0.999235, 1.00076, 0.998353, 0.998526, 1.00191, 1.0018, 0.999147, 0.997858, 1.00151, 1.00187},
        {1.00268, 1.00137, 1.00016, 1.00087, 1.00237, 1.00073, 1.00212, 0.999825, 1.00097, 1.0025},
        {1.00204, 0.995671, 0.997183, 1.00033, 1.00409, 1.00584, 1.00144, 0.997009, 0.996523, 1.00358},
        {1.0025, 0.999522, 0.999589, 1.00242, 1.00368, 1.00329, 1.00283, 1.00056, 0.999018, 0.999964},
        {1.00309, 0.99969, 0.998206, 1.00263, 1.00467, 1.00364, 1.00083, 0.998434, 0.999862, 1.00086},
        {1.0032, 0.999315, 0.998449, 1.00282, 1.00818, 1.00807, 1.00145, 0.997571, 0.998363, 1.00162},
        {1.0041, 0.998797, 0.99767, 1.00199, 1.00786, 1.00859, 0.999504, 0.997781, 0.997968, 1.00312},
        {1.00499, 1.00186, 0.995071, 1.0016, 1.01561, 1.01494, 1.00192, 0.993577, 1.00158, 1.00504},
        {1.00287, 0.997607, 0.993761, 1.00238, 1.01063, 1.01079, 1.00359, 0.994888, 0.997654, 1.00178},
    },
};
float bin_centering_corr_alpha_pim[7][16][10] = {
    {
        {0.999925, 1.00366, 0.999561, 1.00246, 1.00224, 1.00145, 1.00434, 0.998895, 1.00436, 0.998269},
        {1.00392, 0.998353, 0.998293, 0.999489, 0.997101, 1.00404, 1.00097, 0.999467, 1.00022, 1.00071},
        {0.997641, 0.998625, 0.999461, 1.00049, 1.00245, 0.999581, 1.00143, 0.998639, 0.99869, 1.00111},
        {1.00295, 1.00038, 1.00051, 1.00152, 0.999001, 0.99984, 0.998898, 0.999644, 1.00035, 1.00176},
        {0.999138, 0.999691, 0.999107, 0.998024, 0.999978, 0.998483, 1.00038, 0.999206, 0.996665, 1.00128},
        {0.996687, 1.00086, 1.00131, 0.998142, 0.996592, 1.00067, 0.999251, 1.00121, 0.999932, 1.00271},
        {1.00175, 0.998935, 0.997325, 1.00031, 0.998296, 1.00087, 0.999167, 0.998445, 0.999227, 1.00144},
        {0.998116, 1.00286, 0.999526, 0.999705, 1.00207, 0.998171, 0.999557, 1.00123, 0.998509, 0.99812},
        {0.998008, 1.00111, 1.00028, 1.00038, 0.998046, 1.00303, 1.00045, 0.998788, 0.995627, 1.00301},
        {0.996436, 1.00029, 0.999026, 1.00033, 1.00036, 1.00242, 1.00096, 1.00292, 0.995819, 1.00057},
        {1.00011, 1.00125, 1.00223, 0.999041, 1.00082, 0.999723, 0.998665, 1.00534, 1.00496, 0.997835},
        {1.00124, 0.996778, 0.997397, 0.998985, 1.00115, 1.00096, 0.999515, 0.998287, 0.999094, 1.00103},
        {0.994126, 1.0004, 0.9993, 0.996128, 1.00057, 1.00004, 0.997815, 1.00257, 0.998444, 0.997245},
        {0.99888, 0.999397, 1.00126, 0.999813, 1.00161, 1.00531, 0.996979, 1.00085, 0.999039, 1.0013},
        {1.00064, 1.00131, 0.999724, 0.99984, 0.999153, 1.0014, 1.0007, 0.998006, 1.00101, 0.999989},
        {1.0005, 1.00094, 1.00433, 1.0029, 1.00294, 1.00176, 1.00344, 1.00407, 0.996881, 0.99784},
    },
    {
        {0.998024, 1.00386, 1.00044, 0.998379, 0.997018, 1.00087, 1.00125, 0.999827, 1.00419, 1.00096},
        {1.00161, 1.00266, 0.99984, 1.00013, 1.0004, 1.00232, 1.00187, 1.00243, 1.00009, 0.999569},
        {1.00171, 0.999676, 1.00086, 0.999682, 1.00018, 1.00177, 0.996936, 0.998395, 0.999992, 0.998681},
        {1.00135, 0.999504, 0.999781, 1.00159, 0.999484, 0.999902, 1.00229, 1.00117, 0.998764, 1.00083},
        {0.999571, 0.998756, 0.998788, 0.998712, 1.00007, 0.998546, 0.998964, 0.999581, 0.999156, 1.00223},
        {0.999074, 0.999567, 1.00016, 0.998458, 1.00039, 1.00083, 1.00053, 1.00025, 1.00128, 1.00094},
        {1.00101, 0.997988, 1.00179, 1.0022, 1.00159, 1.00122, 0.997924, 0.997237, 1.00303, 1.003},
        {1.00305, 1.00026, 0.999759, 1.00116, 0.999368, 0.999528, 1.00035, 1.00081, 0.999081, 1.00023},
        {1.0011, 0.999267, 1.00014, 1.00045, 0.998921, 1.00008, 0.998827, 0.999687, 1.0001, 0.999803},
        {0.998928, 0.999916, 0.999287, 1.00082, 1.00204, 0.99899, 0.998143, 1.00099, 0.999176, 0.9986},
        {1.00117, 1.00225, 0.997744, 1.00065, 1.00066, 0.999089, 0.999805, 1.00174, 1.00269, 0.99647},
        {1.00083, 0.999675, 1.00274, 1.00135, 1.00221, 1.00214, 0.998494, 0.996653, 0.999138, 0.995948},
        {1.00012, 1.00163, 0.99734, 1.00262, 1.00217, 0.998543, 1.00172, 0.997337, 1.0024, 1.00056},
        {0.999639, 0.999774, 1.00298, 1.00139, 1.00396, 0.998492, 1.00016, 1.00197, 0.998554, 1.0008},
        {1.00112, 0.998509, 0.998912, 1.00318, 1.00001, 0.999479, 0.999717, 0.998964, 0.998397, 0.99988},
        {0.997635, 0.998997, 1.00012, 1.00028, 1.00125, 1.00248, 1.00027, 0.996719, 1.00272, 1.00159},
    },
    {
        {1.00178, 1.00067, 1.0011, 0.996864, 0.998571, 0.997088, 1.00161, 0.997668, 1.00678, 0.999765},
        {0.998372, 1.00258, 1.00129, 1.00155, 1.00346, 0.99783, 0.999512, 0.999011, 1.00056, 0.999401},
        {1.0032, 0.997839, 1.00013, 1.00284, 0.999806, 0.999065, 0.996919, 1.00125, 1.00136, 1.00057},
        {1.00028, 0.999333, 1.00003, 0.9959, 1.00161, 0.997109, 1.00148, 0.998812, 1.00203, 0.998253},
        {1.00075, 0.999586, 0.998628, 1.00226, 0.999694, 0.999911, 0.997901, 0.998587, 1.00081, 1.00135},
        {1.00103, 0.998766, 0.997834, 0.999305, 1.00204, 1.00087, 0.998866, 1.00043, 1.00125, 1.00146},
        {1.00148, 1.00011, 1.00079, 1.00154, 1.00248, 0.998697, 0.998811, 1.00065, 1.00046, 1.00231},
        {0.998488, 0.999785, 0.998045, 0.999462, 1.00058, 0.999328, 0.998485, 1.00039, 1.00014, 1.00068},
        {1.0025, 0.998781, 0.998894, 1.00053, 1.0015, 0.999729, 0.99769, 0.998189, 1.00183, 0.999952},
        {0.999309, 1.00011, 0.99949, 1.00009, 0.999256, 1.00123, 1.00314, 0.998029, 0.999408, 1.00246},
        {1.00349, 0.998391, 0.999362, 0.998046, 1.00165, 1.00107, 1.00052, 0.999529, 0.997791, 0.997844},
        {0.999318, 1.0022, 0.996497, 1.00106, 1.00073, 0.998281, 0.998692, 0.996289, 0.999692, 1.00063},
        {0.999036, 0.995984, 0.997506, 1.0003, 1.00006, 0.999245, 1.00146, 1.00101, 0.997813, 0.999789},
        {0.995991, 1.00197, 0.999356, 0.998949, 0.998995, 0.99635, 0.998982, 0.998233, 1.00163, 1.00093},
        {0.999924, 0.999013, 0.999458, 1.00325, 1.00211, 1.00137, 0.997585, 1.00108, 1.00086, 1.00067},
        {1.00235, 0.997573, 0.998252, 1.00167, 0.997552, 1.00008, 0.999101, 0.999379, 1.00244, 0.997515},
    },
    {
        {0.999552, 1.00204, 0.999663, 0.99909, 0.999031, 1.00041, 1.00054, 0.999765, 1.00422, 0.999296},
        {1.001, 1.00041, 0.99631, 0.999798, 1.0035, 0.998059, 1.00049, 0.99932, 1.00041, 1.00006},
        {1.0007, 0.998589, 0.999975, 0.999309, 0.997363, 0.999567, 0.999834, 1.00064, 1.00137, 1.00116},
        {1.00079, 0.997773, 0.999705, 0.997872, 0.999878, 1.00465, 0.998571, 0.998958, 0.999876, 1.00069},
        {0.99877, 1.00119, 0.9992, 0.998643, 0.998112, 1.00336, 1.00071, 0.999185, 0.99988, 0.999689},
        {1.00239, 1.0005, 0.998779, 0.998026, 1.00218, 0.997991, 0.999726, 0.998989, 0.999552, 0.997438},
        {0.997957, 1.00047, 1.00268, 1.00034, 1.00102, 0.999265, 1.00162, 0.999451, 0.998536, 0.99824},
        {0.998666, 1.00017, 0.998703, 0.996089, 1.00082, 1.00003, 1.00445, 0.998856, 0.996649, 1.00154},
        {1.0024, 1.00083, 0.997835, 1.00127, 0.998399, 0.999917, 0.996562, 1.00056, 1.00018, 1.00059},
        {1.00242, 1.00015, 1.00039, 1.00083, 1.0017, 1.00081, 0.999272, 0.998919, 0.997685, 0.997358},
        {0.999298, 0.99656, 0.999932, 1.00052, 1.00004, 0.998154, 1.00093, 0.998495, 0.997223, 0.998931},
        {0.998846, 1.00023, 0.998822, 1.0013, 1.00062, 1.00025, 0.998093, 0.996005, 1.00133, 0.998887},
        {0.999421, 0.999425, 0.998894, 0.999514, 0.998491, 1.00165, 0.99703, 0.999379, 0.999983, 1.00011},
        {1.00129, 0.999599, 0.999533, 1.00043, 1.00051, 1.00185, 1.002, 1.00046, 0.997216, 0.997621},
        {0.996938, 1.00014, 1.00307, 0.997778, 0.99846, 1.00076, 1.00144, 0.999095, 0.998888, 0.998884},
        {0.994183, 0.999113, 1.0027, 1.00041, 0.99963, 0.998193, 1.00081, 1.00356, 1.00188, 0.999025},
    },
    {
        {1.00127, 1.0027, 1.00055, 0.999625, 0.998345, 1.00027, 0.999655, 0.997813, 1.00147, 0.99977},
        {1.00221, 0.999749, 0.999884, 1.00121, 1.00004, 0.999009, 0.998554, 0.998603, 1.00036, 0.998391},
        {1.00019, 1.00047, 1.00125, 1.00361, 0.997737, 0.99964, 1.00016, 0.998433, 0.99994, 1.00062},
        {1.00212, 0.999485, 0.997495, 1.00033, 1.00036, 1.0005, 1.00557, 0.99863, 0.998978, 1.00123},
        {1.00166, 0.998735, 0.998767, 1.00098, 1.00246, 1.0, 1.00024, 0.99946, 0.998124, 1.00195},
        {1.00031, 1.00096, 1.00014, 1.0004, 0.999396, 0.998589, 0.999504, 1.00037, 1.00081, 1.00233},
        {1.00239, 1.00051, 0.998892, 1.001, 0.998815, 1.00323, 0.998947, 1.00062, 0.998875, 1.00056},
        {1.00044, 1.00381, 0.998732, 1.00161, 0.999351, 1.00052, 1.00084, 1.0005, 0.99865, 0.998728},
        {1.00169, 0.998739, 1.00002, 0.998319, 0.999441, 0.999602, 1.00075, 1.00071, 0.999564, 0.999395},
        {0.997449, 1.00121, 0.996804, 1.00033, 1.00017, 0.998923, 1.00194, 0.99935, 1.00298, 0.999707},
        {0.999634, 1.00063, 1.00075, 0.998927, 0.998989, 1.00122, 1.00028, 0.999925, 1.00365, 0.999278},
        {0.998274, 0.999426, 1.00083, 0.99944, 0.998495, 1.00048, 0.99842, 0.998362, 0.996494, 0.999926},
        {0.999441, 1.00082, 0.997589, 0.998272, 1.00132, 0.999223, 1.00111, 1.0009, 1.00165, 1.00035},
        {1.00015, 0.998333, 0.997697, 1.00101, 1.00263, 1.00069, 0.998887, 0.999382, 0.999071, 1.00071},
        {0.999825, 0.9969, 1.00147, 0.998312, 1.00037, 1.00163, 1.00032, 1.00132, 1.00182, 0.997551},
        {1.00026, 1.00051, 1.00137, 1.00101, 1.00279, 1.00264, 1.00073, 1.00076, 1.00145, 0.999107},
    },
    {
        {1.00059, 1.00303, 0.999661, 0.997595, 1.00085, 0.9969, 0.999991, 0.998473, 1.00361, 0.999782},
        {0.998641, 0.999226, 0.998798, 0.998495, 1.00172, 1.00033, 1.00255, 0.999932, 1.00004, 0.997934},
        {1.0001, 0.999656, 0.999908, 0.999621, 1.0005, 0.999046, 0.999784, 0.99957, 0.997633, 0.998314},
        {0.99943, 0.999082, 1.00085, 1.00121, 1.00024, 1.0013, 0.999791, 0.999924, 0.999497, 0.999698},
        {1.00249, 0.999155, 0.998498, 0.998524, 1.00116, 0.999252, 1.00065, 0.998787, 1.00161, 1.00068},
        {0.999057, 0.998467, 1.00119, 0.999399, 1.0006, 0.998532, 1.00172, 0.998233, 1.00133, 1.00044},
        {0.999066, 1.00045, 0.999153, 0.999969, 1.00115, 1.00115, 0.99838, 1.00063, 1.00053, 0.999348},
        {1.0021, 0.999599, 1.00171, 0.999016, 0.999962, 0.997415, 1.00132, 0.999048, 0.998863, 1.00022},
        {1.00091, 0.999676, 1.00118, 0.999833, 0.999176, 1.00178, 1.00235, 1.00078, 0.998966, 1.00044},
        {1.00076, 0.999295, 0.998655, 1.00119, 1.00017, 0.999846, 0.998811, 0.998674, 0.999529, 0.996357},
        {0.998232, 1.00139, 0.999662, 1.00083, 0.99987, 1.00102, 0.99901, 0.997121, 1.0016, 1.00112},
        {0.999421, 0.997849, 1.0001, 1.00096, 1.00024, 1.00091, 1.00113, 0.999017, 1.00004, 0.998389},
        {0.997985, 0.999201, 0.998745, 0.999362, 1.00011, 1.00101, 0.998893, 1.00039, 1.00075, 0.99976},
        {0.999662, 1.00007, 0.998374, 0.999751, 1.00009, 1.00297, 0.999748, 1.0003, 0.997352, 1.00045},
        {0.997157, 1.00131, 0.998838, 0.99854, 0.999195, 0.998726, 1.00189, 1.00018, 1.00035, 1.0009},
        {0.998335, 0.998654, 1.0012, 0.997989, 1.00051, 1.00221, 0.998867, 0.999824, 0.99928, 1.00017},
    },
    {
        {1.00131, 1.00316, 1.00066, 1.00049, 0.999912, 0.998384, 1.00104, 1.00069, 1.00126, 0.998248},
        {0.999093, 0.999887, 1.00046, 1.00142, 1.00092, 0.999827, 0.999287, 0.999396, 1.00104, 1.00106},
        {1.00012, 1.00179, 1.00027, 1.00106, 1.00052, 1.00023, 1.00059, 0.999621, 1.00074, 1.00083},
        {1.00104, 0.999947, 0.998852, 0.999929, 0.999101, 1.00021, 0.999415, 1.00072, 0.999889, 0.999716},
        {0.999515, 0.999303, 0.999603, 1.00164, 1.00114, 1.00056, 1.00039, 0.998646, 1.00081, 1.00024},
        {0.999835, 0.99964, 1.00102, 0.998604, 1.0008, 0.999822, 0.998107, 1.00019, 1.00062, 0.998744},
        {1.00079, 1.0001, 1.00103, 1.0007, 1.0023, 1.00019, 0.998341, 1.00066, 1.00019, 0.998482},
        {1.00076, 1.00024, 1.00026, 0.999603, 1.00028, 0.999612, 1.00076, 0.999938, 1.00168, 0.999772},
        {0.999713, 1.00079, 0.999714, 1.00021, 1.00119, 0.998701, 0.999438, 0.999683, 0.999899, 0.999672},
        {1.0004, 1.00008, 0.998977, 1.00042, 0.999831, 0.999878, 1.00049, 0.999544, 1.00027, 0.999638},
        {0.999862, 1.00044, 1.00051, 0.999398, 0.998514, 0.998965, 1.00064, 1.00074, 0.99791, 1.00055},
        {0.998592, 0.999162, 0.998911, 0.999999, 1.00072, 1.00178, 0.998929, 0.999902, 0.999962, 0.998452},
        {0.999166, 1.00107, 1.00055, 0.99977, 0.999371, 1.00011, 1.00094, 1.00072, 1.00078, 1.00094},
        {0.998634, 1.00021, 1.00017, 0.999928, 0.998447, 0.999642, 0.999983, 1.00034, 0.999521, 0.999102},
        {1.00034, 0.999033, 0.99859, 0.999498, 1.00027, 1.00062, 1.00129, 1.00086, 1.00188, 0.998448},
        {0.998485, 1.00071, 0.999344, 0.999276, 1.00155, 1.00003, 1.00051, 0.998847, 0.999884, 0.999523},
    },
};

THnSparseD *h_exp_prot[W_bins_no];
THnSparseD *h_exp_prot_background[W_bins_no];
THnSparseD *h_simu_prot_background[W_bins_no];
THnSparseD *h_empty_prot[W_bins_no];
THnSparseD *h_th_prot[W_bins_no];
THnSparseD *h_simu_prot[W_bins_no];
THnSparseD *acceptance_7D_hist_prot[W_bins_no];
THnSparseD *acceptance_corrected_7D_prot[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_prot[W_bins_no];
THnSparseD *hole_yield_simulation_prot[W_bins_no];
THnSparseD *hole_yield_exp_prot[W_bins_no];
THnSparseD *total_yield_exp_prot[W_bins_no];
THnSparseD *h_th_prot_sig2[W_bins_no];
THnSparseD *h_rec_prot_sig2[W_bins_no];
THnSparseD *h_th_prot_evt[W_bins_no]; // same as the h_rec_prot_sig2 just weight is 1 here
THnSparseD *h_rec_prot_evt[W_bins_no];

THnSparseD *h_exp_pip[W_bins_no];
THnSparseD *h_exp_pip_background[W_bins_no];
THnSparseD *h_simu_pip_background[W_bins_no];
THnSparseD *h_empty_pip[W_bins_no];
THnSparseD *h_th_pip[W_bins_no];
THnSparseD *h_simu_pip[W_bins_no];
THnSparseD *acceptance_7D_hist_pip[W_bins_no];
THnSparseD *acceptance_corrected_7D_pip[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_pip[W_bins_no];
THnSparseD *hole_yield_simulation_pip[W_bins_no];
THnSparseD *hole_yield_exp_pip[W_bins_no];
THnSparseD *total_yield_exp_pip[W_bins_no];
THnSparseD *h_th_pip_sig2[W_bins_no];
THnSparseD *h_rec_pip_sig2[W_bins_no];
THnSparseD *h_th_pip_evt[W_bins_no]; // same as the h_rec_pip_sig2 just weight is 1 here
THnSparseD *h_rec_pip_evt[W_bins_no];

THnSparseD *h_exp_pim[W_bins_no];
THnSparseD *h_exp_pim_background[W_bins_no];
THnSparseD *h_simu_pim_background[W_bins_no];
THnSparseD *h_empty_pim[W_bins_no];
THnSparseD *h_th_pim[W_bins_no];
THnSparseD *h_simu_pim[W_bins_no];
THnSparseD *acceptance_7D_hist_pim[W_bins_no];
THnSparseD *acceptance_corrected_7D_pim[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_pim[W_bins_no];
THnSparseD *hole_yield_simulation_pim[W_bins_no];
THnSparseD *hole_yield_exp_pim[W_bins_no];
THnSparseD *total_yield_exp_pim[W_bins_no];
THnSparseD *h_th_pim_sig2[W_bins_no];
THnSparseD *h_rec_pim_sig2[W_bins_no];
THnSparseD *h_th_pim_evt[W_bins_no]; // same as the h_rec_pim_sig2 just weight is 1 here
THnSparseD *h_rec_pim_evt[W_bins_no];

// Int_t pipP_max = 6;
// Int_t pimP_max = 6;
// Int_t pip_pim_max = 6;
// Int_t theta_max = 10;
// Int_t phi_max = 6;
// Int_t alpha_max = 8;

Int_t pipP_max = 11;
Int_t pimP_max = 11;
Int_t pip_pim_max = 11;
Int_t theta_max = 10;
Int_t phi_max = 6;
Int_t alpha_max = 10;

float bin_content_sum_acc_corrected_simu[3];
float bin_content_sum_acc_corrected_exp[3];
float scale_factor[3];
const float E_beam = 10.6041;
float w_bin_size = 0.05;

Float_t eff_threshold = 0;
Float_t rec_threshold = 0.;
Float_t eff_err_threshold = 0.5;

float Acc_fact[15];

float Int[15];

float Int_1[15];
float Int_2[15];
float Int_3[15];

float Int_bc_corr[15];
float Int_1_bc_corr[15];
float Int_2_bc_corr[15];
float Int_3_bc_corr[15];

Double_t Int_err[15];
Double_t Int_err_1[15];
Double_t Int_err_2[15];
Double_t Int_err_3[15];

Double_t Int_err_bc_corr[15];
Double_t Int_err_1_bc_corr[15];
Double_t Int_err_2_bc_corr[15];
Double_t Int_err_3_bc_corr[15];

float Int_acc_corr[15];
float Int_1_acc_corr[15];
float Int_2_acc_corr[15];
float Int_3_acc_corr[15];

Double_t Int_err_acc_corr[15];
Double_t Int_err_1_acc_corr[15];
Double_t Int_err_2_acc_corr[15];
Double_t Int_err_3_acc_corr[15];

float Int_theta[15];
float Int_1_theta[15];
float Int_2_theta[15];
float Int_3_theta[15];

Double_t Int_err_theta[15];
Double_t Int_err_1_theta[15];
Double_t Int_err_2_theta[15];
Double_t Int_err_3_theta[15];

float Int_alpha[15];
float Int_1_alpha[15];
float Int_2_alpha[15];
float Int_3_alpha[15];

Double_t Int_err_alpha[15];
Double_t Int_err_1_alpha[15];
Double_t Int_err_2_alpha[15];
Double_t Int_err_3_alpha[15];

float w_for_int[15];
float estimate1[15];

void suppressWarnings()
{
#ifdef __linux__ // Check if running on a Linux system
    // Redirect stderr to /dev/null
    std::ofstream devnull("/dev/null");
    std::cerr.rdbuf(devnull.rdbuf());
#else
    // On non-Linux systems, you can redirect stderr to a file
    // Change "error.log" to the desired filename
    freopen("error.log", "w", stderr);
#endif
}

TH1F *h_w_int = new TH1F("h_w_int", "h_w_int", 15, 1.4, 2.15);
TH1F *h_w_int_bc_corr = new TH1F("h_w_int_bc_corr", "h_w_int_bc_corr", 15, 1.4, 2.15);

// TH1F *h_w_int_low_th = new TH1F("h_w_int_low_th", "h_w_int_low_th", 10, 1.4, 1.9);
TH1F *h_empty_cell_contribution = new TH1F("h_empty_cell_contribution", "h_empty_cell_contribution", 15, 1.4, 2.15);

TH1F *h_w_int_clas6 = new TH1F("h_w_int_clas6", "h_w_int_clas6", 15, 1.4, 2.15);
TH1F *h_w_int_diff = new TH1F("h_w_int_diff", "h_w_int_diff", 15, 1.4, 2.1);

TH1F *h_w_int_acc_corr = new TH1F("h_w_int_acc_corr", "h_w_int_acc_corr", 15, 1.4, 2.15);
TH1F *h_w_int_theta = new TH1F("h_w_int_theta", "h_w_int_theta", 15, 1.4, 2.15);
TH1F *h_w_int_alpha = new TH1F("h_w_int_alpha", "h_w_int_alpha", 15, 1.4, 2.15);

TH1D *d_eff = new TH1D("d_eff", "d_eff", 200, 0.00001, 0.012);
TH1D *eff = new TH1D("eff", "eff", 200, 0.001, 0.5);
TH2D *deff_vs_eff = new TH2D("deff_vs_eff", "deff_vs_eff", 200, -0.00, 0.25, 200, -0.0, 1);
TH1D *eff_threshold_cut = new TH1D("eff_threshold_cut", "eff_threshold_cut", 200, 0, 1.1);

int n = 10;
TCanvas *can1 =
    new TCanvas("Nine_differential_Yields", "Nine_diff_Yields", 1950, 1200);
auto name_int = Form("int_cross-section");
auto mg = new TMultiGraph("int_cr_sec", "int_cr_sec");

// The subroutine calculates the virtual photon flux
float flux(float w, float q2_value)
{
    // float w = 1.0 + w_bin * 0.05;
    // float q2 = 1.0 + q2_bin * 1.0;
    // float q2_value = q2_low_values[q2_bin];
    // std::cout << "q2 low in flux function : " << q2_value << std::endl;
    // std::cout << "w low in flux function : " << w << std::endl;

    float omega = (w * w + q2_value - MASS_P * MASS_P) / (2. * MASS_P);
    // std::cout << "omega =  " << omega << std::endl;

    float en_elp = E_beam - omega;
    float th_elp = 2 * asin(sqrt(q2_value / 4. / E_beam / en_elp));
    // std::cout << "theta =  " << th_elp << std::endl;

    float epsilon = 1 / (1. + 2. * (1. + omega * omega / q2_value) * (tan(th_elp / 2.)) * (tan(th_elp / 2.)));

    // std::cout << "epsilon = : " << epsilon << std::endl;

    float flux_calc = (omega - q2_value / 2. / MASS_P) / 137.;

    flux_calc = flux_calc / 2. / (PI) / E_beam / q2_value / (1 - epsilon);
    flux_calc = flux_calc * w / E_beam / MASS_P;
    // std::cout << "flux  =  " << flux_calc << std::endl;
    // std::cout << "pi  =  " << PI << std::endl;

    return flux_calc;
}
// questions
/// corrections like bin centering? ....
/// all topology may sum little differently?
// binning 25 MeV
// mom corrections and background substractions?

void set_all_errors(int no_w_bins); // prototype
void set_eff_errors(int no_w_bins);
void eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins);

int main(int argc, char **argv)
{
    suppressWarnings();

    // // // /// 117 files from 8000 to 8009
    // std::string mcFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_800_809_117_files_with_good_wt.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_800_809_117_files_wt_1.root";
    // std::string em_inFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/resIncl_EXP_pass2_empty_target_runs_for_cs_nov_2024.root";
    // std::string inFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/resIncl_EXP_pass2_126_golden_runs_for_cs.root";

    // /// 140 file 15 inv mass bins
    // std::string mcFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_8000_8096_with_good_wt_for_140_files_for_cs.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_8000_8096_140_files_wt_1.root";

    // // // // // /// Alll 741 files from pass2, 15 inv mass bins
    std::string em_inFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/resIncl_EXP_pass2_3_empty_target_runs_for_cs_15_INV_mass_bins.root";
    std::string inFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/resIncl_EXP_pass2_126_golden_runs_for_cs_15_INV_mass_bins.root";
    std::string mcFileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_741_files_good_wt_for_cs_Nov_24_2024.root";
    std::string mcWt1FileName = "/Users/krishnaneupane/Desktop/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_741_files_with_wt_1_for_cs.root";

    gStyle->SetHistMinimumZero();
    TFile *root_data = new TFile(inFileName.c_str());
    // TFile *root_data_background = new TFile(background_inFileName.c_str());
    TFile *root_data_empty_target = new TFile(em_inFileName.c_str());
    TFile *root_mcWt1 = new TFile(mcWt1FileName.c_str());
    TFile *root_mc = new TFile(mcFileName.c_str());
    // TFile *root_mc_background = new TFile(background_mcFileName.c_str());

    // define and set style
    gStyle->SetTitleSize(0.06, "t");
    gStyle->SetOptStat(0);
    gStyle->SetStatColor(0);
    // gStyle->SetPaperSize(18, 24);
    gStyle->SetLabelSize(0.05, "XY");
    gStyle->SetLabelSize(0.045, "X");
    gStyle->SetTitleOffset(0.80, "X");
    gStyle->SetTitleOffset(0.8, "Y");
    gStyle->SetTitleSize(0.06, "XY");
    gStyle->SetStatFontSize(0.06);
    gStyle->SetTitleFont(62, "XY");
    gStyle->SetTitleFontSize(0.09);
    gStyle->SetLabelFont(22, "XY");
    gStyle->SetTextFont(72);
    gStyle->SetLegendFont(72);
    gStyle->SetMarkerStyle(20);
    gStyle->SetMarkerSize(1.6);
    // gStyle->SetMarkerColor(4);
    gStyle->SetErrorX(0);

    for (short q2 = 1; q2 < 2; q2++)
    {
        float q2_lower_lim = q2_low_values[q2];
        float q2_upper_lim = q2_up_values[q2];
        float q2_bin_size = q2_binning_size[q2];
        float q2_mid_value = (q2_low_values[q2] + q2_up_values[q2]) / 2;
        float ff_scale = 1; //(1 / (pow((1 + (q2_mid_value / 0.7)), (0.31660)))) / 0.46044672679; // form factor scale

        TCanvas *can1 =
            new TCanvas("Nine_differential_Yields", "Nine_diff_Yields", 1900, 1400);
        can1->Divide(3, 3);

        for (short w = 8; w < 9; w++)
        {

            // //adding extra bins in each end of invariant mass hist
            Double_t Bin_size_pPip = ((1.0 + 0.05 * w + 0.025 - MASS_PIM) - (0.938272 + 0.13957)) / 7.0;
            Double_t Bin_size_pipPim = ((1.0 + 0.05 * w + 0.025 - MASS_P) - (0.13957 + 0.13957)) / 7.0;

            Double_t xmin_5D_BC[5] = {(0.938272 + 0.13957), (0.13957 + 0.13957), 0., 0., 0.};
            Double_t xmax_5D_BC[5] = {(1.0 + 0.05 * w + 0.025 - MASS_PIM), (1.0 + 0.05 * w + 0.025 - MASS_P), 180, 360, 360};

            float xmin_pPip = xmin_5D_BC[0] + Bin_size_pPip * 1;
            float xmax_pPip = xmin_5D_BC[0] + Bin_size_pPip * (1 + 1);

            auto name_pPip = Form("h_pPip_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV_%.3f<=M_pPip<=%.3f GeV",
                                  (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05), xmin_pPip, xmax_pPip);

            std::cout << "   name  :  " << name_pPip << std::endl;

            TH1D *hist_thrown_inv_Ppip = (TH1D *)root_mc->Get(Form(
                "TH1D_thrown_protPip_folder/%s", name_pPip));

            for (Int_t j = 1; j <= hist_thrown_inv_Ppip->GetXaxis()->GetNbins(); j++)
            {
                // if (j >= 1 && j <= 1)
                {
                    std::cout << " for  bin no = " << j << " bin content inv_Ppip  " << hist_thrown_inv_Ppip->GetBinContent(j) << std::endl;
                    std::cout << " for  bin no = " << j << " bin err inv_Ppip  " << hist_thrown_inv_Ppip->GetBinError(j) << std::endl;
                }
            }

            // std::cout << "initial value of Int cs : " << w - 8 << " is " << Int[w - 8] << std::endl;

            // if (w == 19 || w == 20)
            // continue;
            float const w_bin_for_flux = 1.0 + w * 0.05 + 0.05 / 2;
            // std::cout << " w low " << (1.0 + 0.05 * w) << "\n";
            // std::cout << " w bin " << w << "\n";
            // std::cout << " w_bin for flux " << w_bin_for_flux << "\n";

            // //done for testing twoQ2 merged case

            auto name = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            auto name_Empty = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            auto name_simu = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            auto name_evt = Form("h_5dim_evt_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            auto output_name = Form("nine_1D_cs_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            // auto output_name = Form("nine-1D_cs_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            int no_w_bins = w - 8; ////be careful here ............................

            // From THnsparse Prot
            h_exp_prot[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_prot/%s", name));
            // h_exp_prot_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_prot/%s", name));

            TH1D *test_hist1 = h_exp_prot[no_w_bins]->Projection(0);
            // std::cout << " 1. Int exp proj(0) hist .......... " << test_hist1->Integral()
            //           << "\n";

            h_empty_prot[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_prot/%s", name_Empty));
            h_th_prot[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_prot/%s", name_simu));
            h_simu_prot[no_w_bins] =
                (THnSparseD *)root_mc->Get(Form("THnSparse_7D_prot/%s", name_simu));
            // h_simu_prot_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_prot/%s", name_simu));

            // Acceptance correction factors are printed at this point

            // 2. Acceptance THnSparse: simu_rec/simu_thrown
            acceptance_7D_hist_prot[no_w_bins] =
                (THnSparseD *)h_simu_prot[no_w_bins]->Clone("Accepatnce_7D_prot");

            acceptance_7D_hist_prot[no_w_bins]->Divide(h_th_prot[no_w_bins]);

            h_rec_prot_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_prot_evt/%s", name_evt));

            h_th_prot_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_prot_evt/%s", name_evt));

            h_rec_prot_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_prot_evt/%s", name_evt));

            h_th_prot_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_thrown_prot_evt/%s", name_evt));

            // From THnsparse pim

            h_exp_pim[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_pim/%s", name));
            // h_exp_pim_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_pim/%s", name));

            h_empty_pim[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_pim/%s", name_Empty));

            h_th_pim[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pim/%s", name_simu));

            h_simu_pim[no_w_bins] =
                (THnSparseD *)root_mc->Get(Form("THnSparse_7D_pim/%s", name_simu));

            acceptance_7D_hist_pim[no_w_bins] =
                (THnSparseD *)h_simu_pim[no_w_bins]->Clone("Accepatnce_7D_pim");
            acceptance_7D_hist_pim[no_w_bins]->Divide(h_th_pim[no_w_bins]);

            h_rec_pim_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_pim_evt/%s", name_evt));

            h_th_pim_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pim_evt/%s", name_evt));

            h_rec_pim_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_pim_evt/%s", name_evt));
            h_th_pim_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_thrown_pim_evt/%s", name_evt));

            // From THnsparse pip

            h_exp_pip[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_pip/%s", name));
            // h_exp_pip_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_pip/%s", name));

            h_empty_pip[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_pip/%s", name_Empty));
            h_th_pip[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pip/%s", name_simu));
            h_simu_pip[no_w_bins] =
                (THnSparseD *)root_mc->Get(Form("THnSparse_7D_pip/%s", name_simu));

            acceptance_7D_hist_pip[no_w_bins] =
                (THnSparseD *)h_simu_pip[no_w_bins]->Clone("Accepatnce_7D_pip");

            acceptance_7D_hist_pip[no_w_bins]->Divide(h_th_pip[no_w_bins]);

            h_rec_pip_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_pip_evt/%s", name_evt));

            h_th_pip_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pip_evt/%s", name_evt));

            h_rec_pip_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_pip_evt/%s", name_evt));

            h_th_pip_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_thrown_pip_evt/%s", name_evt));

            // set_all_errors(no_w_bins);
            // set_eff_errors(no_w_bins);

            // // // ////eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins);
            // eff_err_cut(0.3, 0., 0., no_w_bins);
            // std::cout << " name is ...............  :  " << name << std::endl;

            // continue;
            {

                // //1. faraday cup charge = 0.03790 ..C
                // h_exp_prot[no_w_bins]->Add(h_exp_prot_background[no_w_bins], -1.);
                h_exp_prot[no_w_bins]->Scale(1. / 0.029113878); // from valerii
                // h_exp_prot[no_w_bins]->Scale(1. / 0.0290267); // this is my analysis output and correcting beam blocker issues
                // h_exp_prot[no_w_bins]->Scale(1. / 0.02788674); // this is using clas12 root and correcting beam blocker issues

                TH1D *test_hist = h_exp_prot[no_w_bins]->Projection(0);
                // std::cout << " Int exp proj(0) hist .......... " << test_hist->Integral()
                //           << "\n";

                // // // faraday cup charge = 0.00240...C
                // h_empty_prot[no_w_bins]->Scale(1. / 0.0024075358);

                // // //Empty Target Substraction
                // h_exp_prot[no_w_bins]->Add(h_empty_prot[no_w_bins], -1.);

                // radiative effects correction factors
                h_exp_prot[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);
                // std::cout << " rad_corr_fac " << rad_corr_factor[q2 - 1][w - 8] << "\n";

                // Acceptance corrected THnSparse
                acceptance_corrected_7D_prot[no_w_bins] =
                    (THnSparseD *)h_exp_prot[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_prot");
                acceptance_corrected_7D_prot[no_w_bins]->Divide(acceptance_7D_hist_prot[no_w_bins]);
                // acceptance_corrected_7D_prot[no_w_bins]->Write();

                // Hole Fillin Process
                acceptance_corrected_7D_simulation_prot[no_w_bins] =
                    (THnSparseD *)h_simu_prot[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_prot_simulation_prot");
                acceptance_corrected_7D_simulation_prot[no_w_bins]->Divide(acceptance_7D_hist_prot[no_w_bins]);

                // 3, 4 Normalization for luminosity, flux
                acceptance_corrected_7D_prot[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_prot[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                // 5 Projection and Normalization : 3 factors
                TH1D *acceptance_corrected_inv_Ppip = acceptance_corrected_7D_prot[no_w_bins]->Projection(0);
                TH1D *acceptance_corrected_inv_pip_pim = acceptance_corrected_7D_prot[no_w_bins]->Projection(1);
                TH1D *acceptance_corrected_theta_prot = acceptance_corrected_7D_prot[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_prot = acceptance_corrected_7D_prot[no_w_bins]->Projection(4);

                Float_t factor_inv_mass = acceptance_corrected_inv_Ppip->GetBinWidth(5);
                Float_t factor_inv_mass_pip_pim = acceptance_corrected_inv_pip_pim->GetBinWidth(5);
                // std::cout << "scale factor inv mass Ppip: " << factor_inv_mass << std::endl;
                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_prot->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle prot: " << factor_alpha_angle << std::endl;

                acceptance_corrected_inv_Ppip->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_inv_pip_pim->Scale(1. / (w_bin_size * q2_bin_size));

                Int_1_acc_corr[w - 8] = acceptance_corrected_inv_Ppip->Integral();
                acceptance_corrected_inv_Ppip->IntegralAndError(1, acceptance_corrected_inv_Ppip->GetNbinsX(), Int_err_1_acc_corr[w - 8]);
                Int_2_acc_corr[w - 8] = acceptance_corrected_inv_pip_pim->Integral();
                acceptance_corrected_inv_pip_pim->IntegralAndError(1, acceptance_corrected_inv_pip_pim->GetNbinsX(), Int_err_2_acc_corr[w - 8]);

                // std::cout << " Int_1_acc_corr .......... " << Int_1_acc_corr[w - 8] << "\n";
                // std::cout << " Int_2_acc_corr .......... " << Int_2_acc_corr[w - 8] << "\n";

                acceptance_corrected_inv_Ppip->Scale(1. / factor_inv_mass);
                acceptance_corrected_inv_pip_pim->Scale(1. / factor_inv_mass_pip_pim);
                acceptance_corrected_alpha_prot->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                // std::cout << " Int_1_acc_corr/factor_inv_mass .......... " << Int_1_acc_corr[w - 8] / factor_inv_mass << "\n";
                // std::cout << " Int_2_acc_corr/factor_inv_mass_pip_pim .......... " << Int_2_acc_corr[w - 8] / factor_inv_mass_pip_pim << "\n";

                TH1D *hnew = new TH1D("hnew", "#Theta_{p'}", 10, 0, 180.);
                float cosine_value;
                for (int i = 1; i <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); i++)
                {
                    cosine_value = -1 / cos(acceptance_corrected_theta_prot->GetBinContent(i));
                    hnew->SetBinContent(i, abs(cosine_value * acceptance_corrected_theta_prot->GetBinContent(i)));
                }
                TH1D *h_cos_th_prot;
                Double_t temp_prot;
                // Int_t n_theta_bins;
                h_cos_th_prot = new TH1D("h_cos_th_prot", "h_cos_th_prot", acceptance_corrected_theta_prot->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); j++)
                {
                    temp_prot = cos((acceptance_corrected_theta_prot->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (acceptance_corrected_theta_prot->GetBinLowEdge(j) + acceptance_corrected_theta_prot->GetBinWidth(j)));
                    h_cos_th_prot->SetBinContent(j, temp_prot);
                    h_cos_th_prot->SetBinError(j, 0.);
                    // std::cout << "   low edge   " << acceptance_corrected_theta_prot->GetBinLowEdge(j) << "   dcos theta  " << temp_prot << std::endl;
                }

                acceptance_corrected_theta_prot->Divide(h_cos_th_prot);
                acceptance_corrected_theta_prot->Scale(1. / (w_bin_size * q2_bin_size));

                can1->cd(1);

                acceptance_corrected_inv_Ppip->SetXTitle("M#pi^{+}p'(GeV)");
                acceptance_corrected_inv_Ppip->SetYTitle("Normalized-Yields");
                // histogram.GetXaxis()->SetRangeUser(1., 5.);
                // h->GetXaxis()->SetRange(0, h->GetNbinsX() + 1);

                // //acceptance_corrected_inv_Ppip->Sumw2();
                acceptance_corrected_inv_Ppip->SetMarkerStyle(20);
                acceptance_corrected_inv_Ppip->SetMarkerColor(7);
                acceptance_corrected_inv_Ppip->SetLineColor(7);
                acceptance_corrected_inv_Ppip->GetXaxis()->SetRange(3, 9);
                acceptance_corrected_inv_Ppip->Draw("Z ");

                auto legend = new TLegend(0.6, 0.6, 0.9, 0.9);
                legend->AddEntry(acceptance_corrected_inv_Ppip, "Acc Corr", "ep");
                // legend->AddEntry(total_yield_with_hole_filled_inv_Ppip_modified, "Holes Filled BC corrected", "ep");
                // legend->AddEntry(acceptance_corrected_inv_Ppip_modified, "With Holes BC corrected", "ep");
                legend->Draw();
                ////////////////////////////////////////////////////////////
                can1->cd(3);

                acceptance_corrected_inv_pip_pim->SetMarkerColor(7);
                acceptance_corrected_inv_pip_pim->SetLineColor(7);
                acceptance_corrected_inv_pip_pim->SetMarkerStyle(20);

                acceptance_corrected_inv_pip_pim->SetTitle(
                    "M(#pi^{+}#pi^{-})");
                acceptance_corrected_inv_pip_pim->SetXTitle(
                    "M#pi^{+}#pi^{-} (GeV)");
                acceptance_corrected_inv_pip_pim->GetXaxis()->SetRange(3, 9);
                acceptance_corrected_inv_pip_pim->Draw("Z ");
                acceptance_corrected_inv_pip_pim->SetYTitle("Normalized-Yields");

                // // // float estimate = 0;
                // // // estimate = total_yield_with_hole_filled_inv_pip_pim->Integral(0, -1);
                // // // std::cout << " total inv_pim_pim " << estimate << "\n";
                can1->cd(6);

                acceptance_corrected_theta_prot->SetMarkerColor(7);
                acceptance_corrected_theta_prot->SetLineColor(7);

                acceptance_corrected_theta_prot->Draw("Z ");
                acceptance_corrected_theta_prot->SetYTitle("Normalized-Yields/d(-cos#theta)"); //("Yield/d(-cos#theta)");

                can1->cd(9);

                acceptance_corrected_alpha_prot->SetMarkerColor(7);
                acceptance_corrected_alpha_prot->SetLineColor(7);
                acceptance_corrected_alpha_prot->SetTitle(
                    "#alpha_{p'}");
                // total_yield_with_hole_filled_alpha_prot->SetStats(0);
                acceptance_corrected_alpha_prot->SetXTitle("#alpha_{p'}(deg)");
                // acceptance_corrected_alpha_prot->Fit("pol4");
                acceptance_corrected_alpha_prot->Draw("Z");
                acceptance_corrected_alpha_prot->SetYTitle("Normalized-Yields");
            }
            {
                // h_exp_pip[no_w_bins]->Add(h_exp_pip_background[no_w_bins], -1.);

                // faraday cup charge
                h_exp_pip[no_w_bins]->Scale(1. / 0.029113878); // from valerii
                // h_exp_pip[no_w_bins]->Scale(1. / 0.0290267);   // this is my analysis output and correcting beam blocker issues
                // h_exp_pip[no_w_bins]->Scale(1. / 0.02788674);  // this is using clas12 root and correcting beam blocker issues

                // // faraday cup charge = 0.00240...C
                // h_empty_pip[no_w_bins]->Scale(1. / 0.0024075358);

                // // SUBTRUCT EMPTY TARGET
                // h_exp_pip[no_w_bins]->Add(h_empty_pip[no_w_bins], -1.);

                // radiative effects correction factors
                h_exp_pip[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);

                /// for bin centering w-q2
                h_exp_pip[no_w_bins]->Scale(1 / ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])));

                acceptance_corrected_7D_pip[no_w_bins] =
                    (THnSparseD *)h_exp_pip[no_w_bins]->Clone(
                        "Accepatnce_corrected_inv_7D_pip");
                acceptance_corrected_7D_pip[no_w_bins]->Divide(acceptance_7D_hist_pip[no_w_bins]);

                acceptance_corrected_7D_simulation_pip[no_w_bins] =
                    (THnSparseD *)h_simu_pip[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_pip_simulation_pip");
                acceptance_corrected_7D_simulation_pip[no_w_bins]->Divide(acceptance_7D_hist_pip[no_w_bins]);

                // here i am trying to scale for luminosity
                acceptance_corrected_7D_pip[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_pip[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));
                TH1D *acceptance_corrected_inv_Ppim = acceptance_corrected_7D_pip[no_w_bins]->Projection(0);
                TH1D *acceptance_corrected_theta_pip = acceptance_corrected_7D_pip[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_pip = acceptance_corrected_7D_pip[no_w_bins]->Projection(4);

                Float_t factor_inv_mass = acceptance_corrected_inv_Ppim->GetBinWidth(5);
                // std::cout << "scale factor inv mass: " << factor_inv_mass << std::endl;

                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_pip->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle pip : " << factor_alpha_angle << std::endl;

                acceptance_corrected_inv_Ppim->Scale(1. / factor_inv_mass);

                acceptance_corrected_theta_pip->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_alpha_pip->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                can1->cd(2);

                acceptance_corrected_inv_Ppim->SetMarkerColor(7);
                acceptance_corrected_inv_Ppim->SetLineColor(7);

                acceptance_corrected_inv_Ppim->SetTitle("M(#pi^{-}p')");
                acceptance_corrected_inv_Ppim->SetStats(0);
                acceptance_corrected_inv_Ppim->SetMinimum(0.);
                acceptance_corrected_inv_Ppim->SetXTitle("M#pi^{-}p'(GeV)");
                // acceptance_corrected_inv_Ppim->Fit("pol4");
                acceptance_corrected_inv_Ppim->GetXaxis()->SetRange(3, 9);

                acceptance_corrected_inv_Ppim->Draw("Z same");

                can1->cd(5);

                acceptance_corrected_theta_pip->SetMarkerColor(7);
                acceptance_corrected_theta_pip->SetLineColor(7);

                acceptance_corrected_theta_pip->SetTitle(
                    "#Theta_{#pi^{+}}");
                acceptance_corrected_theta_pip->SetStats(0);
                acceptance_corrected_theta_pip->SetXTitle("#Theta_{#pi^{+}}(deg)");
                // acceptance_corrected_theta_pip->Fit("pol4");
                acceptance_corrected_theta_pip->Draw("Z");
                acceptance_corrected_theta_pip->SetYTitle("Normalized-Yields/d(-cos#theta)");

                can1->cd(8);

                acceptance_corrected_alpha_pip->SetMarkerColor(7);
                acceptance_corrected_alpha_pip->SetLineColor(7);
                acceptance_corrected_alpha_pip->SetTitle(
                    "#alpha_{#pi^{+}}");
                acceptance_corrected_alpha_pip->SetStats(0);
                acceptance_corrected_alpha_pip->SetXTitle(" #alpha_{#pi^{+}}(deg)");
                // acceptance_corrected_alpha_pip->Fit("pol4");
                acceptance_corrected_alpha_pip->Draw("Z");
                acceptance_corrected_alpha_pip->SetYTitle("Normalized-Yields");

                // // float estimate_alpha_pip = 0;
                // // estimate_alpha_pip = total_yield_with_hole_filled_alpha_pip->Integral(0, -1);
                // // std::cout << " total from alpha-pip: " << estimate_alpha_pip << "\n";
            }
            {
                // h_exp_pim[no_w_bins]->Add(h_exp_pim_background[no_w_bins], -1.);

                // faraday cup charge
                h_exp_pim[no_w_bins]->Scale(1. / 0.029113878); // from valerii
                // h_exp_pim[no_w_bins]->Scale(1. / 0.0290267); // this is my analysis output and correcting beam blocker issues
                // h_exp_pim[no_w_bins]->Scale(1. / 0.02788674); // this is using clas12 root and correcting beam blocker issues

                // // faraday cup charge = 0.00240...C
                // h_empty_pim[no_w_bins]->Scale(1. / 0.0024075358);

                // // SUBTRUCT EMPTY TARGET
                // h_exp_pim[no_w_bins]->Add(h_empty_pim[no_w_bins], -1.);

                // radiative effects correction factors
                h_exp_pim[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);
                /// for bin centering w-q2
                h_exp_pim[no_w_bins]->Scale(1 / ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])));

                acceptance_corrected_7D_pim[no_w_bins] =
                    (THnSparseD *)h_exp_pim[no_w_bins]->Clone(
                        "Accepatnce_corrected_inv_7D_pim");
                acceptance_corrected_7D_pim[no_w_bins]->Divide(acceptance_7D_hist_pim[no_w_bins]);
                acceptance_corrected_7D_simulation_pim[no_w_bins] =
                    (THnSparseD *)h_simu_pim[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_pim_simulation_pim");
                acceptance_corrected_7D_simulation_pim[no_w_bins]->Divide(acceptance_7D_hist_pim[no_w_bins]);

                // here i am trying to scale for luminosity
                acceptance_corrected_7D_pim[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_pim[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                TH1D *acceptance_corrected_theta_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(4);

                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_pim->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle : " << factor_alpha_angle << std::endl;

                acceptance_corrected_theta_pim->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_alpha_pim->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                can1->cd(4);

                acceptance_corrected_theta_pim->SetMarkerColor(7);
                acceptance_corrected_theta_pim->SetLineColor(7);

                acceptance_corrected_theta_pim->SetTitle(
                    "#Theta_{#pi^{-}}");
                acceptance_corrected_theta_pim->SetStats(0);
                acceptance_corrected_theta_pim->SetXTitle("#Theta_{#pi^{-}}(deg)");
                acceptance_corrected_theta_pim->SetYTitle(" Yield");
                // acceptance_corrected_theta_pim->Fit("pol4");
                acceptance_corrected_theta_pim->Draw("Z ");
                acceptance_corrected_theta_pim->SetYTitle("Normalized-Yields/d(-cos#theta)");

                // // // // float estimate_theta_pim = 0;
                // // // // estimate_theta_pim = total_yield_with_hole_filled_theta_pim->Integral(0, -1);
                // // // // std::cout << " total from theta-pim: " << estimate_theta_pim << "\n";
                can1->cd(7);

                acceptance_corrected_alpha_pim->SetMarkerColor(7);
                acceptance_corrected_alpha_pim->SetLineColor(7);

                acceptance_corrected_alpha_pim->SetTitle(
                    "#alpha_{#pi^{-}}");
                acceptance_corrected_alpha_pim->SetStats(0);
                acceptance_corrected_alpha_pim->SetXTitle(" #alpha_{#pi^{-}}(deg)");
                // acceptance_corrected_alpha_pim->Fit("pol4");
                acceptance_corrected_alpha_pim->Draw("Z");
                acceptance_corrected_alpha_pim->SetYTitle("Normalized-Yields");

                // // // ///////////////////////////////  Bin centering corrections  alpha_pim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  alpha_pim ////////////////////////

                // // float estimate_alpha_pim = 0;
                // // estimate_alpha_pim = total_yield_with_hole_filled_alpha_pim->Integral(0, -1);
                // // std::cout << " total from alpha-pim: " << estimate_alpha_pim << "\n";
            }

            Int_acc_corr[w - 8] = (Int_1_acc_corr[w - 8] + Int_2_acc_corr[w - 8] + Int_3_acc_corr[w - 8]) * ff_scale / 3.;
            // Int_err_acc_corr[w - 8] = (Int_err_1_acc_corr[w - 8] + Int_err_2_acc_corr[w - 8] + Int_err_3_acc_corr[w - 8]) / 3;
            Int_err_acc_corr[w - 8] = sqrt(pow(Int_err_1_acc_corr[w - 8], 2) + pow(Int_err_2_acc_corr[w - 8], 2) + pow(Int_err_3_acc_corr[w - 8], 2));

            // // std::cout << Int[w - 8] << "\n";
            // // std::cout << " inside int cs " << Int[w - 8] << " acc-corr " << Int_acc_corr[w - 8] << "\n";
            // // // // can1->Show();
            // // // //  can1->SaveAs(Form("mPim_50_MeV_w_bins_FD_ONLY_%s.png", output_name));
            // // // // // Construct the full path where you want to save the files
            // can1->SaveAs(Form("/Users/krishnaneupane/Desktop/2024/CS_measurement/no_id_two_or_more_prot_pip_1D_cs_mPim_50_MeV_modify_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV.png",
            //                   q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));

            // // can1->SaveAs(outputFileName);
        }

        for (short w = 8; w < 22; w++)
        {
            float const w_bin_for_flux = 1.0 + w * 0.05 + 0.05 / 2;

            h_w_int_acc_corr->Fill(w_bin_for_flux, Int_acc_corr[w - 8]);
            h_w_int_acc_corr->SetBinError(h_w_int_acc_corr->FindBin(w_bin_for_flux), Int_err_acc_corr[w - 8]);

            // // std::cout << Int[w - 8] << ", " << std::flush;

            h_w_int_clas6->Fill(w_bin_for_flux, clas6_cs[q2 - 1][w - 8]);
            h_w_int_clas6->SetBinError(h_w_int_clas6->FindBin(w_bin_for_flux), clas6_cs_err[q2 - 1][w - 8]);

            // // h_w_int_theta->Fill(w_bin_for_flux, Int_theta[w - 8]);
            // // h_w_int_theta->SetBinError(h_w_int_theta->FindBin(w_bin_for_flux), Int_err_theta[w - 8]);

            // h_w_int_alpha->Fill(w_bin_for_flux, Int_alpha[w - 8]);
            // h_w_int_alpha->SetBinError(h_w_int_alpha->FindBin(w_bin_for_flux), Int_err_alpha[w - 8]);

            //         // // TDirectory *output_png = RootOutputFile->mkdir("output_png");
            //         // // output_png->cd();
            // std::cout << " w: " << w * 0.05 + 1.025 << " cs in " << Int[w - 8] << "\n"; //<<" acc_corr " << Int_acc_corr[w -8] << " inv_mass: " << " theta " << Int_theta[w -8] << " alpha " << Int_alpha[w -8] << " clas6:  " << clas6_cs[q2-1][w -8] << "\n";
        }
        // }
        TCanvas *can2 = new TCanvas("int_cs", "int_cs", 1400, 1000);
        can2->SetGrid(); // Add grid to the canvas

        for (short w = 8; w < 22; w++)
        {
            // float w_value = 1.0 + w * 0.05 + 0.05 / 2;
            // std::cout << "w value  " << w_value << "\n";
            // std::cout << Int_err[w - 8] << ", " << std::flush;

            h_w_int_acc_corr->SetMarkerStyle(20);
            h_w_int_acc_corr->SetMarkerColor(7);
            // h_w_int_acc_corr->GetXaxis()->SetNdivisions(24);
            // h_w_int_acc_corr->SetAxisRange(1.4, 1.9, "X");
            h_w_int->SetMarkerStyle(20);
            h_w_int->SetMarkerColor(1);
            h_w_int_acc_corr->GetXaxis()->SetTitle("W, GeV");
            h_w_int_acc_corr->GetXaxis()->SetLabelSize(0.04);
            h_w_int_acc_corr->GetYaxis()->SetLabelSize(0.04);
            h_w_int_acc_corr->SetAxisRange(0.0, int_cs_up_lim[q2 - 1], "Y");
            // h_w_int->SetAxisRange(-0.0, 10, "Y");

            h_w_int_acc_corr->SetAxisRange(1.35, 2.15, "X");
            // h_w_int->SetTitle("Integrated Cross-Sections #sigma RGA Fall 2018");
            h_w_int_acc_corr->SetTitle(Form("Acc Corrected Cross-Sections #sigma %.1f<=Q2<=%.1fGeV^{2}", q2_lower_lim, q2_upper_lim));
            h_w_int_acc_corr->GetYaxis()->SetTitle("#sigma, #mub");
            h_w_int_acc_corr->Draw("e1pX0");

            h_w_int_clas6->SetMarkerStyle(20);
            h_w_int_clas6->SetMarkerColor(3);
            h_w_int_clas6->Draw("e1pX0 same");
            // h_w_int_clas6->Draw("hist same");

            // // TLine *l =
            // //     new TLine(w_value, 0, w_value, h_w_int->GetMaximum() );
            // // l->Draw("SAME");

            // h_w_int_theta->SetMarkerStyle(3);
            // h_w_int_theta->SetMarkerColor(2);
            // h_w_int_theta->GetXaxis()->SetNdivisions(24);
            // h_w_int_theta->SetAxisRange(1.4, 1.9, "X");
            // h_w_int_theta->Draw("e1pX0 same");

            // h_w_int_alpha->SetMarkerStyle(20);
            // h_w_int_alpha->SetMarkerColor(3);
            // h_w_int_alpha->GetXaxis()->SetNdivisions(24);
            // h_w_int_alpha->SetAxisRange(1.4, 1.9, "X");
            // h_w_int_alpha->Draw("e1pX0 same");

            auto legend = new TLegend(0.1, 0.65, 0.3, 0.9);
            legend->AddEntry(h_w_int_clas6, "CLAS6 CS", "ep");
            // legend->AddEntry(h_w_int, "CLAS12 ", "ep");
            // legend->AddEntry(h_w_int_bc_corr, "bc corr ", "ep");
            legend->AddEntry(h_w_int_acc_corr, "CLAS12 Acc Corr CS ", "ep");

            legend->Draw();

            // std::cout << " cs_out  " << Int[w - 8] << "  clas6_cs  " << clas6_cs[q2 - 1][w - 8] << "  diff " << clas6_cs[q2 - 1][w - 8] - Int[w - 8] << " acc_corr  " << Int_acc_corr[w - 8] << " hole_contribution  " << Int[w - 8] - Int_acc_corr[w - 8] << " ff scale is = " << ff_scale << "\n";
            // std::cout << Int_err[w - 8] << "," << std::flush;

            // // std::cout << "w: " << w * 0.05 + 1.0125 << " acc_corr " << Int_acc_corr[w -8] << " inv_mass: " << Int[w -8] << " theta " << Int_theta[w -8] << " alpha " << Int_alpha[w -8] << " clas6:  " << clas6_cs[w -8] << "\n";
            // std::cout << "w: " << w * 0.05 + 1.0125 << " " << Int_acc_corr[w -8] << " " << Int_err_acc_corr[w -8] << " " << Int[w -8] << " " << Int_err[w -8]
            //           // << " theta " << Int_err_theta[w -8] << " alpha " << Int_err_alpha[w -8] << " clas6:  " << clas6_cs_err[q2-1][w -8]
            //           << "\n";
        }
        can2->SaveAs(Form("/Users/krishnaneupane/Desktop/2024/CS_measurement/acc_corr_all_741_sim_files_one_or_more_prot_pip_CS_126_runs_50_MeV_W_bin_%.1f<=Q2<=%.1f_GeV2.png",
                          q2_lower_lim, q2_upper_lim));
        // can2->SaveAs("/Users/krishnaneupane/Desktop/2024/CS_measurement/new_117_Integrated_CS_all.png");

        // delete h_w_int;
    }
    return 0;
}
// The subroutine sets errors to data, empt.targ., fermicorr and model histograms
void set_all_errors(int no_w_bins)
{
    Int_t *bins = new Int_t[5];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 3))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;

                        // Setting errors to data hists
                        if (h_exp_prot[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_prot[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot[no_w_bins]->GetBinContent(bins))));
                            // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins)) << "  Bin err is: " << (h_exp_prot[no_w_bins]->GetBinError(bins)) << std::endl;
                            // how_many_bins = how_many_bins + 1;
                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) == 0.)
                            //     how_many_zeros = how_many_zeros + 1;
                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) == 1.)
                            //     how_many_ones = how_many_ones + 1;
                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) > 1.)
                            //     how_many_highers = how_many_highers + 1;
                        }
                        else
                        {
                            h_exp_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_exp_pip[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pip[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pip[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_pip[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_exp_pim[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pim[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pim[no_w_bins]->GetBinContent(bins))));
                            // eff_threshold_cut->Fill(h_exp_pim[no_w_bins]->GetBinContent(bins)); /// this is only checking for
                            // the yield filling this is not for the threshold cut histogram beware of that.
                        }
                        else
                        {
                            h_exp_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        /*
                        // Setting errors to empty target hists
                        if (h_empty_prot[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_prot[no_w_bins]->SetBinError(bins, (sqrt(h_empty_prot[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_empty_pip[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_pip[no_w_bins]->SetBinError(bins, (sqrt(h_empty_pip[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_pip[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_empty_pim[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_pim[no_w_bins]->SetBinError(bins, (sqrt(h_empty_pim[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        // //Setting errors to model hists
                        // h_model_1[i]->SetBinError(bins, 0.);
                        // h_model_2[i]->SetBinError(bins, 0.);
                        // h_model_3[i]->SetBinError(bins, 0.);
                        */
                    };
                };
            };
        };
    };

    // std::cout << "no of Bin: " << how_many_bins << std::endl;
    // std::cout << "no of Zero: " << how_many_zeros << std::endl;
    // std::cout << "no of One: " << how_many_ones << std::endl;
    // std::cout << "no of Higher: " << how_many_highers << std::endl;
};

// The subroutine sets correct errors to the efficiency histograms
void set_eff_errors(int no_w_bins)
{
    Int_t *bins = new Int_t[5];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 1))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;

                        /*Long64_t tmp_rec1_bin = h_simu_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec2_bin = h_simu_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec3_bin = h_simu_pim[no_w_bins]->GetBin(bins);

                    Long64_t tmp_gen1_bin = h_th_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_gen2_bin = h_th_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_gen3_bin = h_th_pim[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff1_bin = acceptance_7D_hist_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_eff2_bin = acceptance_7D_hist_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_eff3_bin = acceptance_7D_hist_pim[no_w_bins]->GetBin(bins);*/

                        Double_t err1, err2, err3;
                        Double_t a1, a2, a3, b1, b2, b3;

                        a1 = (h_simu_prot[no_w_bins]->GetBinContent(bins));
                        a2 = (h_simu_pim[no_w_bins]->GetBinContent(bins));
                        a3 = (h_simu_pip[no_w_bins]->GetBinContent(bins));
                        // std::cout << "Bin content sim is : " << a1 << " ," << a2 << " , " << a3 << std::endl;

                        b1 = (h_th_prot[no_w_bins]->GetBinContent(bins));
                        b2 = (h_th_pim[no_w_bins]->GetBinContent(bins));
                        b3 = (h_th_pip[no_w_bins]->GetBinContent(bins));
                        // std::cout << "Bin content th is : " << b1 << " ," << b2 << " , " << b3 << std::endl;

                        //------------------------------------------------
                        // err1 = (a1 * (b1 - a1)) / b1 / b1 / b1; // for weight = 1 histograms
                        err1 = (b1 - 2 * a1) / b1 / b1 / b1 * h_rec_prot_sig2[no_w_bins]->GetBinContent(bins) + a1 * a1 / b1 / b1 / b1 / b1 * h_th_prot_sig2[no_w_bins]->GetBinContent(bins);

                        if ((acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) > 0.) && (err1 > 0.))
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, sqrt(err1));
                            // std::cout << " err1 is : " << err1 << std::endl;
                        }

                        if (err1 < 0.)
                        {
                            // std::cout << " err1 less than zero is : " << err1 << std::endl;

                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        deff_vs_eff->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins),
                                          acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins) / acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins));

                        eff->Fill(h_simu_prot[no_w_bins]->GetBinContent(bins) / h_th_prot[no_w_bins]->GetBinContent(bins));
                        d_eff->Fill(err1);
                        // if (a1 / b1 > 0.01)
                        //     eff_threshold_cut->Fill(a1 / b1);

                        // //---------------------------------------------------------

                        err2 = (b2 - 2 * a2) / b2 / b2 / b2 * (h_rec_pim_sig2[no_w_bins]->GetBinContent(bins)) + a2 * a2 / b2 / b2 / b2 / b2 * (h_th_pim_sig2[no_w_bins]->GetBinContent(bins));
                        if ((acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) > 0.) && (err2 > 0.))
                        {
                            // std::cout << " err2 is : " << err2 << std::endl;
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, sqrt(err2));
                        }
                        if (err2 < 0.)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        //-------------------------------------

                        err3 = (b3 - 2 * a3) / b3 / b3 / b3 * (h_rec_pip_sig2[no_w_bins]->GetBinContent(bins)) + a3 * a3 / b3 / b3 / b3 / b3 * (h_th_pip_sig2[no_w_bins]->GetBinContent(bins));

                        if ((acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) > 0.) && (err3 > 0.))
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, sqrt(err3));

                        if (err3 < 0.)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                    };
                };
            };
        };
    };
};

// The subroutine performs the efficiency error cut
void eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins)
{

    Int_t *bins = new Int_t[5];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 3))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;

                        /*
                    Long64_t tmp_eff1_bin = acceptance_7D_hist_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec1_bin = h_simu_prot[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff2_bin = acceptance_7D_hist_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec2_bin = h_simu_pip[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff3_bin = acceptance_7D_hist_pim[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec3_bin = h_simu_pim[no_w_bins]->GetBin(bins);
                    */
                        Double_t err1_evt, err2_evt, err3_evt;
                        Double_t n_rec1, n_rec2, n_rec3, n_gen1, n_gen2, n_gen3;

                        n_rec1 = (h_rec_prot_evt[no_w_bins]->GetBinContent(bins));
                        n_rec2 = (h_rec_pim_evt[no_w_bins]->GetBinContent(bins));
                        n_rec3 = (h_rec_pip_evt[no_w_bins]->GetBinContent(bins));

                        n_gen1 = (h_th_prot_evt[no_w_bins]->GetBinContent(bins));
                        n_gen2 = (h_th_pim_evt[no_w_bins]->GetBinContent(bins));
                        n_gen3 = (h_th_pip_evt[no_w_bins]->GetBinContent(bins));
                        // std::cout << "   n gen3 : " << (h_th_pim_evt[no_w_bins]->GetBinContent(bins)) << std::endl;

                        err1_evt = (n_gen1 - n_rec1) * n_rec1 / n_gen1 / n_gen1 / n_gen1;
                        err2_evt = (n_gen2 - n_rec2) * n_rec2 / n_gen2 / n_gen2 / n_gen2;
                        err3_evt = (n_gen3 - n_rec3) * n_rec3 / n_gen3 / n_gen3 / n_gen3;

                        eff_threshold_cut->Fill(sqrt((h_th_prot_evt[no_w_bins]->GetBinContent(bins) - h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) *
                                                     (h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins))) /
                                                (h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) * (h_th_prot_evt[no_w_bins]->GetBinContent(bins)));

                        // if (err1_evt > 0)
                        //     std::cout << " (n_gen1 - n_rec1) * n_rec1  is:  " << ((n_gen1 - n_rec1) * n_rec1) << " err1 is: " << (err1_evt) << std::endl;
                        // std::cout << " sqrt(err1_evt) / n_rec1 * n_gen1  ~ threshold  " << (sqrt(err1_evt) / n_rec1 * n_gen1) << std::endl;
                        if (sqrt(err1_evt) / n_rec1 * n_gen1 > eff_err_threshold)
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) < eff_threshold)
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (h_simu_prot[no_w_bins]->GetBinContent(bins) < rec_threshold)
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (sqrt(err2_evt) / n_rec2 * n_gen2 > eff_err_threshold)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) < eff_threshold)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (h_simu_pim[no_w_bins]->GetBinContent(bins) < rec_threshold)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (sqrt(err3_evt) / n_rec3 * n_gen3 > eff_err_threshold)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) < eff_threshold)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (h_simu_pip[no_w_bins]->GetBinContent(bins) < rec_threshold)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                    };
                };
            };
        };
    };
};