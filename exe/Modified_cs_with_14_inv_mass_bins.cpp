#include <fstream>
#include <string>
#include <sstream>
#include <iostream>
#include <vector>
#include "TCanvas.h"
#include "TF1.h"
#include "TFile.h"
#include "TGraph.h"
#include "TMultiGraph.h"
#include "TH1.h"
#include "TH2.h"
#include "THnSparse.h"
#include "TLegend.h"
#include "TLorentzVector.h"
#include "TPaveStats.h"
#include "TROOT.h"
#include "TStyle.h"
#include "TThread.h"
// #include "colors.hpp"
// #include "constants.hpp"
// #include "cuts.hpp"
// #include "deltat.hpp"
// #include "reaction.hpp"
#include <mutex>
#include "TMath.h"
#include <TLine.h>
#include <TGraphErrors.h>

static const double PI = TMath::Pi();
static const float INV_SQRT_2PI = TMath::Sqrt(2 * TMath::Pi());
static const double DEG2RAD = PI / 180.0;
static const double RAD2DEG = 180.0 / PI;
static const double MASS_P = 0.93827203;
static const double MASS_E = 0.000511;
static const double MASS_PIP = 0.13957018;
static const double MASS_PIM = 0.13957018;

static const int W_bins_no = 16;

int how_many_bins = 0;
int how_many_zeros = 0;
int how_many_ones = 0;
int how_many_highers = 0;

float q2_low_values[11] = {1.0, 2.0, 2.40, 3.0, 3.5, 4.2, 5.0, 6.0, 7.0, 8.0};  //,7.4, 8.6, 9.8};
float q2_up_values[11] = {2.0, 2.40, 3.0, 3.5, 4.2, 5.0, 6.0, 7.0, 8.0, 9.0};   // 7.4, 8.6, 9.8, 12.0};
float q2_binning_size[11] = {1.0, 0.4, 0.6, 0.5, 0.7, 0.8, 1.0, 1.0, 1.0, 1.0}; // 1.2, 1.2, 1.2, 2.2};
float int_cs_up_lim[11] = {10.0, 7.5, 5.5, 4.0, 2.5, 1.5, 1., 0.9, 0.75, 0.25, 0.2};
// float int_cs_up_lim[11] = {5.0, 3.50, 2.5, 1.9, 1.4, 0.9, 0.5, 0.4, 0.3, 0.15, 0.1};
float clas6_cs[5][15] = {{2.725756, 4.852575, 5.0990245, 4.6721295, 5.106538, 7.0651055, 8.429394, 6.525802, 6.223883, 6.3364275, 5.9183335,
                          5.7539805, 5.2653895, 4.683386, 2.135029},
                         {1.4476705, 2.590003, 3.077267, 2.769741, 3.176183, 4.5701105, 5.9731865, 4.688401, 4.4450535, 4.576323,
                          4.502663, 4.183355, 3.7979225, 3.44356, 1.4590885},
                         {1.1238195, 1.7796845, 2.0453735, 1.9403505, 2.3354175, 3.208187, 4.205703, 3.295571, 3.0479955, 3.2959955,
                          3.228516, 3.008253, 2.7967935, 2.386234, 1.0799665},
                         {0.761862, 1.2134075, 1.5208325, 1.38785, 1.6605295, 2.367107, 3.0871605, 2.4123735, 2.281772, 2.3162375, 2.158334,
                          2.047865, 1.852682, 1.6532595, 0.745882},
                         {0.493681, 0.779317, 0.8595405, 0.757254, 1.0147405, 1.400192, 1.851965, 1.4762505, 1.3603165, 1.431174, 1.435816,
                          1.4042675, 1.263922, 1.1651405, 0.5058135}};

float clas6_cs_err[5][15] = {{0.091695, 0.179970, 0.164874, 0.157349, 0.172448, 0.229728, 0.248475, 0.210523, 0.192848, 0.199844, 0.191500, 0.179232, 0.178550, 0.149039, 0.098633},
                             {0.064233, 0.110023, 0.115035, 0.106971, 0.118113, 0.147337, 0.176895, 0.159153, 0.137897, 0.147557, 0.143553, 0.131361, 0.126433, 0.113169, 0.061420},
                             {0.066089193624979, 0.110563133322098, 0.103631219948431, 0.10442156570843, 0.117685666064309, 0.167605262650073, 0.168652491959058, 0.14732291163631, 0.142434399275596, 0.158139247630055, 0.140297298224164, 0.128925042164042, 0.132381316072171, 0.12115672419639, 0.06553},
                             {0.067934, 0.100759, 0.093753, 0.079652, 0.094911, 0.119790, 0.133423, 0.109225, 0.112129, 0.119372, 0.116963, 0.104061, 0.085313, 0.079077, 0.050086},
                             {0.0282695, 0.050223, 0.048597, 0.047022, 0.04949, 0.0632065, 0.0749885, 0.059791, 0.0587005, 0.061277, 0.079192, 0.070863, 0.070452, 0.059122, 0.034278}};

/// These are final systematic errors in CLAS12 analysis ///////
double Final_syst_val[8][14] = {
    {0.216400007, 0.269632714, 0.32658112, 0.303304383, 0.365314438, 0.477154926, 0.57786752, 0.500280315, 0.472403248, 0.426042008, 0.405566325, 0.393082198, 0.372447152, 0.355968615},
    {0.130351676, 0.202058781, 0.184039205, 0.190062317, 0.196279928, 0.287981062, 0.339608752, 0.304029667, 0.287306829, 0.279836841, 0.293840812, 0.26328335, 0.260462669, 0.255202888},
    {0.080280975, 0.115713893, 0.126546488, 0.135988403, 0.144936227, 0.202001041, 0.256115686, 0.221572631, 0.210362354, 0.211578023, 0.212711359, 0.209241307, 0.184482277, 0.169479887},
    {0.06312397, 0.088214557, 0.102446298, 0.091569696, 0.102125842, 0.147365547, 0.188993475, 0.156830881, 0.153207089, 0.149985051, 0.15226815, 0.142073604, 0.140226835, 0.135423638},
    {0.044050828, 0.06175169, 0.073513529, 0.065898898, 0.073526409, 0.097985945, 0.134534433, 0.111674576, 0.110985684, 0.110689147, 0.107174207, 0.106113939, 0.103343759, 0.098783745},
    {0.029649621, 0.044430005, 0.042632858, 0.035555046, 0.0430097, 0.062511225, 0.078442661, 0.065473635, 0.06286998, 0.063962232, 0.067311829, 0.064022347, 0.059522474, 0.057895986},
    {0.018988083, 0.023551154, 0.02423667, 0.023598026, 0.0296132, 0.038846742, 0.051828326, 0.045168313, 0.041771124, 0.041161318, 0.044724006, 0.041574941, 0.039705345, 0.035851977},
    {0.010213739, 0.016575448, 0.01963053, 0.017190148, 0.018189257, 0.034365809, 0.036546036, 0.033016576, 0.028449637, 0.036981496, 0.034428019, 0.033950335, 0.028679275, 0.03484413}};
// wide range simulations
// float rad_corr_factor[10] = {1.42702, 1.40908, 1.41135, 1.40509, 1.40151, 1.37086, 1.35081, 1.34144, 1.32594, 1.26831, 1.25362, 1.25586, 1.24384, 1.27349, 1.25435, 1.27085, 1.25168, 1.21468, 1.17431, 1.16223, 1.15737, 1.13599, 1.13964, 1.13751};

// from only one q2 bin simulation 25 mev
// float rad_corr_factor[10] = {1.39047, 1.37839, 1.35447, 1.35067, 1.31858, 1.27496, 1.25344, 1.25131, 1.24169, 1.2636, 1.25875, 1.27143, 1.25846, 1.21249, 1.18035, 1.16335};
// from all q2 bin simulation 50 mev ///x410^8 events

/// 8x10^8 events hoina NEW PASS2 WITH 3*10^8 events
//// Now about 6*10^8 events
float rad_corr_factor[9][15] =
    // {1.167, 1.141, 1.098, 1.062, 1.0625, 1.07, 1.047, 0.993, 0.9756, 0.9644, 0.9556, 0.945, 0.9233, 0.917},
    //                             {1.171, 1.1455, 1.1, 1.068, 1.067, 1.072, 1.049, 0.997, 0.9805, 0.971, 0.9604, 0.9487, 0.9287, 0.9204},
    //                             {1.179, 1.15, 1.106, 1.069, 1.068, 1.081, 1.056, 0.998, 0.981, 0.973, 0.965, 0.9497, 0.937, 0.9277},
    //                             {1.183, 1.156, 1.108, 1.069, 1.07, 1.082, 1.058, 1.002, 0.9883, 0.9775, 0.9673, 0.957, 0.937, 0.9316},
    //                             {1.185, 1.159, 1.107, 1.071, 1.075, 1.087, 1.06, 1.005, 0.988, 0.9795, 0.9688, 0.9575, 0.9404, 0.931},
    //                             {1.186, 1.163, 1.109, 1.074, 1.074, 1.089, 1.063, 1.004, 0.9927, 0.9824, 0.975, 0.961, 0.942, 0.932},
    //                             {1.1875, 1.162, 1.11, 1.073, 1.073, 1.091, 1.065, 1.007, 0.996, 0.983, 0.9766, 0.9634, 0.9434, 0.9336},
    //                             {1.262, 1.222, 1.167, 1.124, 1.124, 1.142, 1.121, 1.052, 1.043, 1.031, 1.026, 1.013, 0.9873, 0.9756},
    //                             {1.297, 1.168, 1.111, 1.074, 1.07, 1.091, 1.066, 1.003, 0.995, 0.9834, 0.9785, 0.964, 0.9385, 0.929}};

    {
        {1.169345, 1.140739, 1.098110, 1.060894, 1.063410, 1.068831, 1.049380, 0.996605, 0.980411, 0.969999, 0.961215, 0.952153, 0.931945, 0.921742, 0.916368}, // Q² = 2.20
        {1.169250, 1.142855, 1.098406, 1.064159, 1.064140, 1.070758, 1.048595, 0.998498, 0.982977, 0.973086, 0.962329, 0.954371, 0.933927, 0.927959, 0.918350}, // Q² = 2.70
        {1.172045, 1.143902, 1.099749, 1.064133, 1.064432, 1.074126, 1.051938, 0.998472, 0.983370, 0.973297, 0.966488, 0.955410, 0.937918, 0.929323, 0.922469}, // Q² = 3.25
        {1.181248, 1.154537, 1.108488, 1.067788, 1.067771, 1.080647, 1.057714, 1.000657, 0.985384, 0.974594, 0.965623, 0.954342, 0.935793, 0.928428, 0.919357}, // Q² = 3.85
        {1.182902, 1.156663, 1.108432, 1.069563, 1.068995, 1.082276, 1.058995, 1.002131, 0.986850, 0.977412, 0.968133, 0.957484, 0.937384, 0.929019, 0.921394}, // Q² = 4.60
        {1.183206, 1.158152, 1.107931, 1.070055, 1.069346, 1.084449, 1.062312, 1.001604, 0.989061, 0.979909, 0.971232, 0.959558, 0.938840, 0.929997, 0.923073}, // Q² = 5.50
        {1.184453, 1.160928, 1.110090, 1.070099, 1.069174, 1.088207, 1.063480, 1.003160, 0.991555, 0.981228, 0.974819, 0.959959, 0.940013, 0.929761, 0.924921}, // Q² = 6.50
        {1.201181, 1.164780, 1.111952, 1.071517, 1.068496, 1.090334, 1.065828, 1.004021, 0.992840, 0.984021, 0.977012, 0.960617, 0.941176, 0.930630, 0.922285}, // Q² = 7.50
        {1.302748, 1.170088, 1.113792, 1.074591, 1.069167, 1.092405, 1.068387, 1.001955, 0.992238, 0.984977, 0.978305, 0.961218, 0.940044, 0.928758, 0.922392}, // Q² = 8.50
};
// //// For W hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
// float bin_centering_corr_w[7][16] = {{0.982714, 0.987143, 1.00094, 0.992125, 0.990467, 0.99054, 1.01228, 0.993493, 0.999654, 1.00105, 0.999625, 0.999021, 0.999842, 1.00045, 1.00235, 0.998844},
//                                      {0.981023, 0.986906, 1.00135, 0.993472, 0.989872, 0.989376, 1.01167, 0.993863, 0.999429, 1.00195, 0.999244, 0.998247, 0.999066, 1.00016, 1.00112, 0.998856},
//                                      {0.979786, 0.985924, 1.00106, 0.992847, 0.989229, 0.989491, 1.01214, 0.993445, 1.00051, 1.00226, 0.998548, 0.998867, 0.999017, 0.998949, 1.00084, 0.998615},
//                                      {0.980012, 0.986718, 1.00147, 0.992812, 0.989275, 0.989898, 1.0127, 0.993184, 0.999318, 1.00148, 0.999757, 0.999779, 0.99858, 0.999586, 1.00064, 1.00068},
//                                      {0.979529, 0.986427, 1.00138, 0.993453, 0.987524, 0.989852, 1.01293, 0.993917, 0.9998, 1.00088, 0.999532, 0.99984, 0.998954, 0.999259, 1.00077, 1.00042},
//                                      {0.979639, 0.986798, 1.00061, 0.993792, 0.985645, 0.989735, 1.01399, 0.993472, 0.998971, 1.00022, 1.00031, 0.999574, 0.998022, 0.999152, 1.00066, 0.999584},
//                                      {0.981539, 0.987975, 1.00021, 0.994806, 0.983396, 0.989321, 1.01396, 0.993675, 0.998437, 0.999283, 1.00159, 0.999882, 0.999002, 0.999271, 1.00078, 1.00019}};

// //// For Q2 hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
// float bin_centering_corr_q2[7][16] = {{0.974946, 0.974848, 0.974157, 0.976999, 0.976488, 0.977138, 0.977828, 0.978622, 0.979324, 0.979380, 0.979493, 0.980405, 0.979954, 0.981692, 0.980635, 0.980829},
//                                       {0.957131, 0.958902, 0.960504, 0.961224, 0.962847, 0.962530, 0.963868, 0.964148, 0.964738, 0.965974, 0.966348, 0.966346, 0.967800, 0.967987, 0.968873, 0.968718},
//                                       {0.978359, 0.979463, 0.979155, 0.979556, 0.979680, 0.980556, 0.981541, 0.982238, 0.982634, 0.982142, 0.983014, 0.982489, 0.981940, 0.982987, 0.983330, 0.983570},
//                                       {0.967750, 0.967844, 0.969391, 0.969340, 0.969472, 0.970410, 0.971589, 0.972088, 0.971552, 0.972408, 0.973259, 0.973728, 0.974159, 0.973615, 0.974521, 0.974009},
//                                       {0.968526, 0.969075, 0.969872, 0.969935, 0.970178, 0.971229, 0.972349, 0.973014, 0.972315, 0.974097, 0.973934, 0.974604, 0.974651, 0.975013, 0.975275, 0.975584},
//                                       {0.948711, 0.950965, 0.951408, 0.952030, 0.951910, 0.954474, 0.955512, 0.955267, 0.955928, 0.957258, 0.957915, 0.957669, 0.958665, 0.958890, 0.959190, 0.960317},
//                                       {0.849843, 0.849452, 0.850676, 0.851694, 0.850893, 0.856553, 0.860586, 0.860401, 0.861822, 0.865837, 0.868462, 0.869297, 0.869627, 0.869802, 0.870937, 0.871561}};

float bin_centering_corr_w_q2[9][14] = {
    {0.955791, 0.959127, 0.972504, 0.966528, 0.966590, 0.963523, 0.986115, 0.970434, 0.975323, 0.978652, 0.974793, 0.977613, 0.978410, 0.978543},
    {0.936145, 0.942425, 0.958513, 0.949148, 0.946442, 0.949634, 0.969737, 0.953968, 0.959641, 0.962593, 0.963392, 0.962670, 0.965322, 0.963984},
    {0.959041, 0.961146, 0.976683, 0.971213, 0.965115, 0.967004, 0.991067, 0.972839, 0.979530, 0.981830, 0.980333, 0.981745, 0.979033, 0.980701},
    {0.944204, 0.951302, 0.967160, 0.958739, 0.955580, 0.957176, 0.981369, 0.961843, 0.969645, 0.970513, 0.970309, 0.968312, 0.970068, 0.969791},
    {0.945185, 0.953111, 0.967380, 0.960374, 0.955171, 0.957646, 0.982821, 0.964211, 0.968488, 0.970756, 0.971455, 0.970484, 0.968577, 0.970982},
    {0.939916, 0.948176, 0.961456, 0.956141, 0.947035, 0.952913, 0.977511, 0.957091, 0.965023, 0.966879, 0.966590, 0.965800, 0.965436, 0.965995},
    {0.949401, 0.956215, 0.971763, 0.965341, 0.955451, 0.960869, 0.985948, 0.965916, 0.972318, 0.974069, 0.975018, 0.975643, 0.973878, 0.973831},
    {0.964546, 0.964848, 0.977819, 0.971859, 0.962066, 0.966825, 0.991673, 0.972240, 0.978159, 0.977992, 0.981503, 0.980372, 0.979354, 0.979487},
    {0.955836, 0.974055, 0.984388, 0.976997, 0.963949, 0.971298, 0.996613, 0.976218, 0.980805, 0.982791, 0.985535, 0.984104, 0.983445, 0.984681}};

//// For M_pPip hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
///// [7][16][7] --> inner [7] is for invariant mass, middle w and outer [7] is q2 ie; [q2][w][m_pPip]
float bin_centering_corr_m_pPip[9][14][7] = {{{0.786556, 0.871238, 0.973235, 0.998692, 1.010390, 0.972802, 0.760736},
                                              {0.957341, 0.931803, 0.968261, 1.001964, 0.956972, 0.936619, 0.773072},
                                              {0.923489, 0.918653, 0.995286, 1.002379, 0.961490, 0.926936, 0.875899},
                                              {0.903528, 0.887384, 1.010768, 0.966177, 0.964522, 0.990310, 0.835947},
                                              {0.937977, 0.879452, 1.014111, 0.954799, 0.947968, 0.966321, 0.871111},
                                              {0.950540, 0.937592, 0.996274, 0.932335, 0.960073, 1.010107, 0.870134},
                                              {0.948047, 1.037121, 1.004783, 0.949880, 0.972528, 1.019801, 0.973336},
                                              {0.926107, 1.086949, 0.959448, 0.935885, 0.965029, 0.976238, 0.903895},
                                              {0.939378, 1.098496, 0.947909, 0.956067, 0.982187, 1.032747, 0.784597},
                                              {0.941638, 1.062962, 0.947264, 0.969614, 0.986637, 0.990445, 0.765073},
                                              {0.907887, 1.062817, 0.958217, 0.969986, 0.972182, 1.014656, 0.758551},
                                              {0.924406, 0.999869, 0.944947, 0.963348, 0.986967, 1.043575, 0.775110},
                                              {0.928562, 0.980749, 0.966602, 0.984190, 0.990402, 1.041104, 0.758888},
                                              {0.927373, 0.968971, 0.958806, 0.986232, 0.970883, 1.047714, 0.783714}},
                                             {{0.771816, 0.860634, 0.948738, 0.980336, 0.985375, 0.951812, 0.741669},
                                              {0.950556, 0.921597, 0.946093, 0.989374, 0.941104, 0.918593, 0.759177},
                                              {0.905248, 0.896813, 0.982848, 0.990108, 0.952185, 0.915736, 0.867396},
                                              {0.882840, 0.868819, 0.993803, 0.948419, 0.947855, 0.976001, 0.814655},
                                              {0.914799, 0.861781, 0.991203, 0.934699, 0.931278, 0.951432, 0.841762},
                                              {0.932127, 0.926664, 0.983622, 0.917914, 0.944048, 0.989966, 0.863228},
                                              {0.940104, 1.019216, 0.986405, 0.935992, 0.957085, 0.995369, 0.959588},
                                              {0.916542, 1.069534, 0.941434, 0.916443, 0.948454, 0.969256, 0.876079},
                                              {0.922651, 1.088467, 0.934266, 0.938723, 0.966301, 1.018675, 0.777671},
                                              {0.924770, 1.045219, 0.932376, 0.949187, 0.979142, 0.980522, 0.751345},
                                              {0.910688, 1.044787, 0.947482, 0.957886, 0.967597, 1.005917, 0.736665},
                                              {0.914724, 0.979175, 0.926892, 0.950964, 0.968440, 1.028572, 0.771275},
                                              {0.910398, 0.969333, 0.953256, 0.971710, 0.980163, 1.021924, 0.748569},
                                              {0.907168, 0.956897, 0.953190, 0.964644, 0.961799, 1.022600, 0.757493}},
                                             {{0.790600, 0.885015, 0.972244, 1.007705, 1.009252, 0.967560, 0.759884},
                                              {0.961542, 0.942013, 0.972791, 1.000099, 0.961211, 0.941561, 0.770105},
                                              {0.930513, 0.920675, 0.998618, 1.008481, 0.966582, 0.934051, 0.879044},
                                              {0.906361, 0.888419, 1.013433, 0.971427, 0.975296, 1.007777, 0.838120},
                                              {0.935323, 0.882574, 1.009810, 0.951312, 0.944321, 0.967403, 0.866600},
                                              {0.942907, 0.941663, 1.001525, 0.935625, 0.959378, 1.006994, 0.877909},
                                              {0.945193, 1.048173, 1.011092, 0.950204, 0.977677, 1.019377, 0.977807},
                                              {0.932420, 1.087575, 0.961500, 0.935907, 0.969820, 0.974203, 0.895028},
                                              {0.942522, 1.105891, 0.950685, 0.956359, 0.986049, 1.036538, 0.789405},
                                              {0.942128, 1.069655, 0.948568, 0.963167, 0.993129, 0.999521, 0.770948},
                                              {0.919769, 1.065423, 0.967547, 0.970974, 0.984192, 1.017530, 0.747748},
                                              {0.927412, 1.003990, 0.949010, 0.967337, 0.989926, 1.041908, 0.778504},
                                              {0.931112, 0.978427, 0.960039, 0.990471, 0.988660, 1.039452, 0.759448},
                                              {0.930600, 0.972318, 0.960798, 0.980757, 0.974051, 1.054826, 0.786825}},
                                             {{0.793046, 0.874306, 0.963927, 0.985275, 0.991541, 0.950101, 0.744998},
                                              {0.955280, 0.928477, 0.962985, 0.995476, 0.949578, 0.924836, 0.763077},
                                              {0.916820, 0.908948, 0.994603, 0.994515, 0.957974, 0.918709, 0.874844},
                                              {0.893620, 0.875916, 1.006366, 0.958183, 0.958132, 0.989246, 0.825106},
                                              {0.916695, 0.874049, 0.999953, 0.941458, 0.937844, 0.959726, 0.852938},
                                              {0.931777, 0.939262, 0.993270, 0.925963, 0.952941, 0.998696, 0.868860},
                                              {0.939032, 1.036680, 0.998203, 0.943297, 0.967275, 1.006800, 0.971094},
                                              {0.914532, 1.078562, 0.948152, 0.928507, 0.958833, 0.973911, 0.885936},
                                              {0.930028, 1.097807, 0.941481, 0.948149, 0.977294, 1.029631, 0.775810},
                                              {0.929107, 1.057833, 0.937292, 0.960862, 0.983035, 0.987967, 0.756731},
                                              {0.902780, 1.059078, 0.956531, 0.965264, 0.981280, 1.008448, 0.737560},
                                              {0.913746, 0.989078, 0.934647, 0.953812, 0.980143, 1.028032, 0.765951},
                                              {0.905250, 0.977251, 0.956688, 0.979254, 0.978231, 1.026217, 0.749289},
                                              {0.923634, 0.963775, 0.953723, 0.972120, 0.966643, 1.029371, 0.768945}},
                                             {{0.801176, 0.880187, 0.963583, 0.987081, 0.995335, 0.946447, 0.750851},
                                              {0.953255, 0.927990, 0.960658, 1.000054, 0.951827, 0.928818, 0.762688},
                                              {0.920040, 0.909067, 0.993435, 0.994197, 0.962633, 0.920780, 0.873076},
                                              {0.889972, 0.877317, 1.005269, 0.959392, 0.962127, 0.998405, 0.822680},
                                              {0.917747, 0.874830, 1.004309, 0.941850, 0.935902, 0.956330, 0.850835},
                                              {0.926975, 0.938125, 0.990928, 0.927553, 0.952672, 1.003489, 0.860385},
                                              {0.941664, 1.038245, 0.996908, 0.947091, 0.969494, 1.009464, 0.962204},
                                              {0.918642, 1.081502, 0.954202, 0.928155, 0.956094, 0.973471, 0.893721},
                                              {0.928757, 1.099499, 0.936699, 0.949684, 0.975685, 1.028441, 0.785138},
                                              {0.922746, 1.060423, 0.938155, 0.956444, 0.983632, 0.997305, 0.757253},
                                              {0.908986, 1.059595, 0.955100, 0.967551, 0.974947, 1.013326, 0.742016},
                                              {0.917559, 0.991040, 0.938186, 0.960522, 0.982455, 1.022713, 0.768468},
                                              {0.910883, 0.971260, 0.954418, 0.974563, 0.988785, 1.027310, 0.753392},
                                              {0.917616, 0.964230, 0.951720, 0.972022, 0.968081, 1.039077, 0.772207}},
                                             {{0.816048, 0.872748, 0.957503, 0.981853, 0.984991, 0.945414, 0.735109},
                                              {0.951739, 0.925375, 0.959453, 0.994800, 0.947703, 0.918991, 0.760940},
                                              {0.913090, 0.906854, 0.986523, 0.990767, 0.952220, 0.915911, 0.869470},
                                              {0.885361, 0.874047, 1.000078, 0.952243, 0.960404, 1.000900, 0.817015},
                                              {0.911239, 0.868254, 0.994596, 0.931899, 0.929349, 0.948253, 0.837075},
                                              {0.917294, 0.931736, 0.990995, 0.922528, 0.945394, 0.996016, 0.866566},
                                              {0.931428, 1.035174, 0.997128, 0.934427, 0.963481, 1.000380, 0.963595},
                                              {0.900124, 1.076030, 0.945832, 0.920775, 0.953860, 0.966364, 0.875039},
                                              {0.918023, 1.094368, 0.936851, 0.944574, 0.973308, 1.023227, 0.771793},
                                              {0.922306, 1.055377, 0.936782, 0.955248, 0.982368, 0.983068, 0.751342},
                                              {0.899668, 1.056508, 0.949308, 0.958798, 0.976100, 1.007933, 0.741950},
                                              {0.910684, 0.988813, 0.930307, 0.954937, 0.979894, 1.025828, 0.759650},
                                              {0.907986, 0.968435, 0.953891, 0.976217, 0.979140, 1.021918, 0.746547},
                                              {0.912656, 0.960692, 0.943618, 0.963716, 0.963298, 1.037789, 0.771758}},
                                             {{0.722074, 0.904857, 0.971414, 0.991862, 0.993903, 0.949728, 0.745469},
                                              {0.969817, 0.927256, 0.965674, 1.003611, 0.952412, 0.931571, 0.766143},
                                              {0.944913, 0.911237, 0.996767, 0.996882, 0.962956, 0.929840, 0.877564},
                                              {0.913324, 0.885171, 1.008182, 0.960991, 0.971003, 0.999787, 0.832700},
                                              {0.911213, 0.877387, 1.000187, 0.943502, 0.939127, 0.953780, 0.845742},
                                              {0.920138, 0.943793, 0.995288, 0.934468, 0.954784, 1.003982, 0.867450},
                                              {0.931793, 1.043561, 1.002317, 0.945201, 0.973085, 1.014696, 0.976434},
                                              {0.902514, 1.086723, 0.957241, 0.930155, 0.959135, 0.977626, 0.888286},
                                              {0.926878, 1.106003, 0.937721, 0.950906, 0.981987, 1.037192, 0.774493},
                                              {0.920769, 1.068760, 0.940347, 0.965418, 0.989216, 0.994815, 0.755140},
                                              {0.907875, 1.065938, 0.959271, 0.967317, 0.983790, 1.011935, 0.738814},
                                              {0.925524, 0.997724, 0.939444, 0.964282, 0.988787, 1.037763, 0.762569},
                                              {0.916799, 0.980725, 0.955464, 0.983215, 0.986429, 1.034031, 0.748298},
                                              {0.921289, 0.966003, 0.952929, 0.972257, 0.969347, 1.042181, 0.772662}},
                                             {{0.447633, 0.871137, 1.004830, 1.010770, 1.004038, 0.965761, 0.726556},
                                              {0.869872, 0.961906, 0.970206, 1.011656, 0.959895, 0.930833, 0.768491},
                                              {0.844129, 0.918061, 1.002146, 1.007807, 0.970190, 0.927515, 0.876179},
                                              {0.812605, 0.887788, 1.017701, 0.967288, 0.977043, 1.014166, 0.821031},
                                              {0.925471, 0.887336, 1.009808, 0.949628, 0.943063, 0.958261, 0.840143},
                                              {0.922000, 0.948932, 1.002854, 0.937757, 0.962740, 1.007944, 0.880297},
                                              {0.939682, 1.052557, 1.007313, 0.949741, 0.976614, 1.018498, 0.981430},
                                              {0.908884, 1.094557, 0.961421, 0.934830, 0.965144, 0.982062, 0.891880},
                                              {0.923764, 1.117020, 0.947765, 0.958497, 0.987342, 1.036884, 0.774531},
                                              {0.921525, 1.072633, 0.945680, 0.966356, 0.994752, 1.001961, 0.759803},
                                              {0.914445, 1.076662, 0.962911, 0.977308, 0.989065, 1.021286, 0.742430},
                                              {0.922105, 1.003869, 0.942435, 0.971170, 0.993746, 1.044429, 0.768136},
                                              {0.924814, 0.982124, 0.958830, 0.987300, 0.997650, 1.034977, 0.755653},
                                              {0.933606, 0.970843, 0.957326, 0.976426, 0.975760, 1.052766, 0.780630}},
                                             {{0.272174, 0.570433, 0.955397, 1.026379, 1.043208, 0.983468, 0.426617},
                                              {0.626785, 0.947291, 0.991309, 1.011704, 0.964121, 0.973018, 0.728614},
                                              {0.704515, 0.936450, 1.011392, 1.009123, 0.973292, 0.948065, 0.884475},
                                              {0.621285, 0.910680, 1.021362, 0.975608, 0.978772, 1.016229, 0.749536},
                                              {0.899036, 0.881989, 1.011808, 0.948324, 0.948511, 0.964218, 0.802580},
                                              {0.933105, 0.956743, 1.008099, 0.939991, 0.969070, 1.016917, 0.874490},
                                              {0.939465, 1.055181, 1.016230, 0.954065, 0.977502, 1.032357, 0.988395},
                                              {0.906967, 1.100832, 0.965199, 0.941719, 0.969073, 0.987803, 0.900127},
                                              {0.921272, 1.124894, 0.948858, 0.960748, 0.988146, 1.045991, 0.772266},
                                              {0.921691, 1.083070, 0.950128, 0.977552, 0.996677, 1.006694, 0.764232},
                                              {0.913488, 1.083263, 0.969862, 0.981632, 0.987805, 1.023791, 0.747911},
                                              {0.933186, 1.009684, 0.948485, 0.975205, 0.996213, 1.045531, 0.774637},
                                              {0.928721, 0.987475, 0.963120, 0.990445, 1.000601, 1.042401, 0.756435},
                                              {0.937707, 0.977188, 0.956007, 0.980226, 0.981163, 1.054657, 0.780154}}};

float bin_centering_corr_m_pPim[9][14][7] = {{{0.932122, 0.961980, 0.961609, 0.957552, 0.950627, 0.943291, 0.889834},
                                              {0.950425, 0.935966, 0.963396, 0.968214, 0.940292, 0.935610, 0.901479},
                                              {0.942866, 0.930635, 0.948050, 0.971043, 0.951310, 0.927290, 0.854085},
                                              {0.940355, 0.934063, 0.961262, 0.956608, 0.957733, 0.949130, 0.837999},
                                              {0.950160, 0.945956, 0.960899, 0.967016, 0.965114, 0.955296, 0.938120},
                                              {0.917628, 0.963785, 0.958608, 0.946658, 0.969812, 0.971458, 0.965229},
                                              {0.895837, 0.985417, 0.936604, 0.945682, 0.964937, 0.973807, 0.958222},
                                              {0.882846, 1.005033, 0.929522, 0.948562, 0.974486, 0.981836, 0.962018},
                                              {0.865589, 1.017153, 0.932010, 0.946111, 0.949836, 0.990028, 0.933672},
                                              {0.923354, 1.014483, 0.944998, 0.945258, 0.933865, 1.001133, 0.950536},
                                              {0.963386, 1.005859, 0.942720, 0.939526, 0.939216, 1.006338, 0.915503},
                                              {0.971983, 1.009551, 0.944255, 0.937718, 0.931309, 1.004612, 0.901653},
                                              {0.972340, 1.000326, 0.948410, 0.930672, 0.951747, 1.000694, 0.936464},
                                              {0.958749, 1.005266, 0.938223, 0.922122, 0.975642, 0.963972, 0.975531}},
                                             {{0.914301, 0.923913, 0.919601, 0.926009, 0.908238, 0.905557, 0.869855},
                                              {0.919326, 0.899018, 0.934964, 0.934886, 0.914491, 0.906200, 0.868715},
                                              {0.908196, 0.908037, 0.929083, 0.942558, 0.917546, 0.905775, 0.812725},
                                              {0.911433, 0.901590, 0.939977, 0.930163, 0.939045, 0.919666, 0.800428},
                                              {0.923810, 0.903099, 0.934118, 0.933749, 0.930990, 0.924216, 0.902556},
                                              {0.891226, 0.931927, 0.934479, 0.912707, 0.941835, 0.939492, 0.943489},
                                              {0.863411, 0.955051, 0.909917, 0.919110, 0.940225, 0.947605, 0.923818},
                                              {0.854224, 0.983891, 0.896681, 0.916928, 0.933717, 0.949396, 0.936201},
                                              {0.839643, 0.990348, 0.904848, 0.916174, 0.922772, 0.959454, 0.896121},
                                              {0.886593, 0.985543, 0.910823, 0.917957, 0.914314, 0.972517, 0.918256},
                                              {0.928159, 0.987364, 0.914590, 0.912217, 0.910152, 0.991006, 0.895832},
                                              {0.944171, 0.982717, 0.914537, 0.908313, 0.901817, 0.977672, 0.892212},
                                              {0.948967, 0.973842, 0.924353, 0.904601, 0.930549, 0.967743, 0.924145},
                                              {0.918774, 0.971409, 0.922593, 0.892093, 0.952859, 0.938993, 0.957146}},
                                             {{0.949126, 0.963095, 0.969436, 0.968772, 0.955457, 0.949722, 0.909521},
                                              {0.948743, 0.941281, 0.967656, 0.967903, 0.953335, 0.939849, 0.897808},
                                              {0.949333, 0.939579, 0.963804, 0.981323, 0.957508, 0.933717, 0.863516},
                                              {0.949193, 0.938906, 0.973411, 0.971303, 0.965586, 0.951749, 0.845076},
                                              {0.955413, 0.945570, 0.964450, 0.962473, 0.968061, 0.973813, 0.945007},
                                              {0.916377, 0.971837, 0.957409, 0.957225, 0.966412, 0.974005, 0.959884},
                                              {0.904372, 0.990598, 0.941837, 0.949301, 0.981744, 0.984195, 0.957920},
                                              {0.879778, 1.010759, 0.938092, 0.949527, 0.971248, 0.981984, 0.972111},
                                              {0.858640, 1.025691, 0.937897, 0.946292, 0.963485, 0.995011, 0.940201},
                                              {0.929851, 1.014337, 0.941699, 0.951407, 0.950775, 1.004457, 0.953883},
                                              {0.958967, 1.018693, 0.946541, 0.946637, 0.946222, 1.016990, 0.920837},
                                              {0.984197, 1.010277, 0.956222, 0.941533, 0.941792, 1.023037, 0.924592},
                                              {0.972056, 1.013957, 0.948024, 0.932613, 0.948953, 0.994745, 0.956253},
                                              {0.960936, 1.006666, 0.949770, 0.921654, 0.974216, 0.967585, 0.989835}},
                                             {{0.925763, 0.933106, 0.947435, 0.943003, 0.930884, 0.923170, 0.876903},
                                              {0.928437, 0.917595, 0.946267, 0.948812, 0.934075, 0.917857, 0.883456},
                                              {0.924458, 0.922213, 0.946216, 0.960969, 0.939132, 0.916326, 0.833916},
                                              {0.924977, 0.916573, 0.949311, 0.947476, 0.944583, 0.933217, 0.823798},
                                              {0.932719, 0.921979, 0.954185, 0.943463, 0.950833, 0.946559, 0.909191},
                                              {0.893940, 0.947445, 0.935581, 0.933312, 0.946917, 0.955083, 0.958078},
                                              {0.879115, 0.976995, 0.922804, 0.936136, 0.954470, 0.963433, 0.932028},
                                              {0.865126, 0.988862, 0.915362, 0.934045, 0.954160, 0.959058, 0.950962},
                                              {0.851177, 1.007311, 0.920066, 0.931446, 0.945802, 0.978380, 0.915090},
                                              {0.905189, 0.997898, 0.930082, 0.928850, 0.934399, 0.993236, 0.920850},
                                              {0.934504, 0.997534, 0.928248, 0.934287, 0.927691, 0.990116, 0.901615},
                                              {0.953055, 0.997423, 0.937816, 0.924330, 0.919035, 0.997674, 0.898163},
                                              {0.954955, 0.988617, 0.937097, 0.915117, 0.941456, 0.974313, 0.936821},
                                              {0.942868, 0.981139, 0.936782, 0.902650, 0.960467, 0.961733, 0.969059}},
                                             {{0.929631, 0.942178, 0.941201, 0.945362, 0.936322, 0.920402, 0.884748},
                                              {0.924657, 0.921242, 0.953761, 0.951760, 0.938391, 0.917156, 0.880216},
                                              {0.922144, 0.919493, 0.946475, 0.958113, 0.935748, 0.918139, 0.834026},
                                              {0.921204, 0.918554, 0.958652, 0.948852, 0.942971, 0.934890, 0.822898},
                                              {0.935527, 0.928291, 0.946867, 0.946266, 0.952074, 0.948257, 0.913122},
                                              {0.906090, 0.955398, 0.943754, 0.933958, 0.954004, 0.963261, 0.946633},
                                              {0.882025, 0.976398, 0.927670, 0.936105, 0.955119, 0.963124, 0.932901},
                                              {0.872326, 0.990090, 0.916779, 0.936690, 0.949028, 0.971840, 0.948992},
                                              {0.857434, 1.007637, 0.919830, 0.935396, 0.937547, 0.970890, 0.912473},
                                              {0.908942, 0.998330, 0.928513, 0.934687, 0.928097, 0.979593, 0.933276},
                                              {0.945118, 0.996104, 0.928085, 0.931954, 0.926190, 0.997369, 0.908145},
                                              {0.966435, 0.992588, 0.934223, 0.927837, 0.921319, 0.993566, 0.909695},
                                              {0.955559, 0.986707, 0.934420, 0.920682, 0.939654, 0.975177, 0.927988},
                                              {0.948226, 0.992807, 0.934386, 0.908204, 0.956587, 0.957744, 0.962716}},
                                             {{0.913012, 0.931595, 0.944960, 0.933458, 0.922003, 0.908658, 0.879904},
                                              {0.918167, 0.912532, 0.938731, 0.947481, 0.929451, 0.913515, 0.865164},
                                              {0.915498, 0.910886, 0.939433, 0.950774, 0.930476, 0.909561, 0.827101},
                                              {0.920702, 0.916167, 0.951686, 0.938686, 0.934615, 0.925710, 0.807411},
                                              {0.916229, 0.915522, 0.935919, 0.932687, 0.938962, 0.938314, 0.902143},
                                              {0.889881, 0.942143, 0.930270, 0.926233, 0.944611, 0.947906, 0.932823},
                                              {0.872105, 0.962981, 0.912672, 0.929504, 0.947955, 0.963454, 0.917241},
                                              {0.848277, 0.990473, 0.899426, 0.928415, 0.944421, 0.959508, 0.932959},
                                              {0.848337, 0.997548, 0.915061, 0.927238, 0.933215, 0.964181, 0.904223},
                                              {0.899446, 0.989521, 0.930732, 0.924769, 0.923681, 0.976195, 0.914533},
                                              {0.938796, 0.992780, 0.924823, 0.920782, 0.925785, 0.984925, 0.890294},
                                              {0.963084, 0.987510, 0.928430, 0.919479, 0.915575, 0.985160, 0.892798},
                                              {0.949826, 0.979301, 0.930101, 0.911078, 0.933382, 0.969790, 0.920168},
                                              {0.942378, 0.983781, 0.921804, 0.898225, 0.949856, 0.947529, 0.959500}},
                                             {{0.932780, 0.952170, 0.957295, 0.951610, 0.943328, 0.941929, 0.882826},
                                              {0.933523, 0.928537, 0.956200, 0.961827, 0.944198, 0.925456, 0.885866},
                                              {0.931739, 0.930500, 0.954952, 0.964190, 0.950098, 0.928252, 0.831223},
                                              {0.929443, 0.927086, 0.962703, 0.952223, 0.952828, 0.945396, 0.816202},
                                              {0.947440, 0.939241, 0.952539, 0.952339, 0.962359, 0.953745, 0.913968},
                                              {0.904614, 0.958160, 0.948816, 0.945528, 0.960767, 0.964274, 0.942615},
                                              {0.891090, 0.984251, 0.930131, 0.942622, 0.968861, 0.974945, 0.926015},
                                              {0.870660, 1.000528, 0.919318, 0.942563, 0.962278, 0.971655, 0.939208},
                                              {0.853587, 1.022027, 0.924406, 0.940759, 0.947374, 0.979137, 0.922539},
                                              {0.921840, 1.005950, 0.940336, 0.939369, 0.937023, 0.987147, 0.927932},
                                              {0.950737, 1.008785, 0.943093, 0.935219, 0.935590, 0.995515, 0.915917},
                                              {0.978822, 1.005242, 0.939013, 0.932308, 0.928729, 0.997945, 0.913813},
                                              {0.965747, 0.996738, 0.939689, 0.924828, 0.944848, 0.988563, 0.947584},
                                              {0.948609, 0.996526, 0.942963, 0.913013, 0.961459, 0.964603, 0.974742}},
                                             {{0.960156, 0.968053, 0.967478, 0.965548, 0.960465, 0.933552, 0.846732},
                                              {0.954639, 0.934571, 0.969002, 0.973752, 0.956466, 0.946935, 0.895742},
                                              {0.946510, 0.943797, 0.968217, 0.982104, 0.953190, 0.947182, 0.827568},
                                              {0.936183, 0.933603, 0.973927, 0.964890, 0.963532, 0.955721, 0.810184},
                                              {0.941359, 0.951324, 0.965424, 0.960027, 0.974902, 0.972281, 0.907504},
                                              {0.911798, 0.974500, 0.957604, 0.956574, 0.974828, 0.977234, 0.948465},
                                              {0.898555, 0.994697, 0.934426, 0.952197, 0.975916, 0.988613, 0.931769},
                                              {0.883589, 1.013768, 0.929633, 0.951638, 0.968708, 0.983233, 0.948290},
                                              {0.871454, 1.028475, 0.934507, 0.952667, 0.963334, 0.998571, 0.933691},
                                              {0.936900, 1.016431, 0.947987, 0.951313, 0.948670, 0.998177, 0.941940},
                                              {0.965528, 1.014619, 0.953082, 0.944632, 0.950690, 1.011617, 0.925029},
                                              {0.979916, 1.017596, 0.952092, 0.946733, 0.940091, 1.006984, 0.924537},
                                              {0.983301, 1.007544, 0.953675, 0.937267, 0.949837, 0.993771, 0.956984},
                                              {0.965638, 1.014927, 0.947821, 0.926952, 0.971927, 0.976101, 0.988289}},
                                             {{0.830392, 0.990702, 0.988111, 0.994767, 0.946880, 0.805988, 0.531029},
                                              {0.908123, 0.976082, 0.979222, 0.984999, 0.971565, 0.936721, 0.843912},
                                              {0.971826, 0.951012, 0.976381, 0.987164, 0.967124, 0.951588, 0.789405},
                                              {0.932460, 0.937427, 0.981186, 0.974809, 0.977979, 0.961634, 0.804658},
                                              {0.947578, 0.962049, 0.973846, 0.962804, 0.976441, 0.974102, 0.911088},
                                              {0.928059, 0.982157, 0.962585, 0.961706, 0.982143, 0.991818, 0.954053},
                                              {0.915462, 1.006943, 0.943619, 0.957484, 0.984858, 0.995096, 0.939975},
                                              {0.888550, 1.022513, 0.939172, 0.961048, 0.982830, 0.988718, 0.955809},
                                              {0.873168, 1.033107, 0.943141, 0.960368, 0.967494, 0.999153, 0.935737},
                                              {0.939763, 1.020535, 0.961423, 0.959946, 0.961509, 1.005888, 0.945520},
                                              {0.958255, 1.019137, 0.953758, 0.961822, 0.953488, 1.013965, 0.928603},
                                              {0.995180, 1.015115, 0.958108, 0.951495, 0.941172, 1.018748, 0.935110},
                                              {0.985927, 1.016969, 0.959907, 0.946202, 0.953446, 1.005589, 0.963962},
                                              {0.971158, 1.011186, 0.956700, 0.939919, 0.978790, 0.988343, 0.988009}}};
//// For M_pipPim hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_m_pipPim[9][14][7] = {{{1.008278, 1.006708, 0.959281, 0.931389, 0.936775, 1.027395, 0.878726},
                                                {0.956506, 0.976972, 0.978853, 0.984607, 0.967777, 0.996430, 0.843541},
                                                {0.943133, 0.978144, 0.986677, 0.973937, 0.982522, 0.993628, 0.919715},
                                                {0.944437, 0.983854, 0.972378, 0.967847, 0.966156, 0.991760, 0.973558},
                                                {0.932050, 0.967650, 0.971629, 0.977302, 0.971092, 0.981251, 1.004418},
                                                {0.904793, 0.975567, 0.968741, 0.986221, 0.960982, 0.971982, 0.986933},
                                                {0.874545, 0.988645, 0.991679, 1.001907, 0.988073, 1.003897, 1.075955},
                                                {0.858192, 0.973723, 0.972729, 0.977990, 0.968991, 0.995545, 1.055160},
                                                {0.866533, 0.984258, 0.992721, 1.005421, 0.956988, 0.998571, 0.979430},
                                                {0.892763, 0.985887, 0.963718, 0.933122, 1.017609, 1.044907, 0.951533},
                                                {0.902800, 0.981769, 0.968739, 0.949720, 1.024775, 0.967054, 0.927032},
                                                {0.930407, 0.988992, 0.976596, 0.974624, 1.031528, 0.964839, 0.900704},
                                                {0.941914, 1.000055, 0.961496, 0.922035, 1.030984, 1.008439, 0.959857},
                                                {0.972932, 0.993894, 0.972288, 0.978710, 0.976272, 0.979460, 0.966004}},
                                               {{0.979730, 0.989406, 0.936123, 0.920193, 0.925265, 1.008103, 0.857387},
                                                {0.935729, 0.959604, 0.962999, 0.968192, 0.950538, 0.978167, 0.843020},
                                                {0.935560, 0.965102, 0.967279, 0.966930, 0.966665, 0.983940, 0.915064},
                                                {0.940431, 0.964169, 0.947945, 0.953808, 0.950546, 0.967476, 0.959826},
                                                {0.913188, 0.951444, 0.949106, 0.956800, 0.959342, 0.963181, 0.975645},
                                                {0.891081, 0.955572, 0.962175, 0.966718, 0.961172, 0.963665, 0.976442},
                                                {0.863672, 0.967022, 0.973893, 0.978966, 0.974920, 0.990656, 1.059708},
                                                {0.832749, 0.947457, 0.966187, 0.965420, 0.955112, 0.977962, 1.030288},
                                                {0.843232, 0.975781, 0.980620, 0.986007, 0.940885, 0.988592, 0.969051},
                                                {0.855792, 0.969703, 0.955381, 0.922390, 0.998728, 1.036043, 0.941099},
                                                {0.890521, 0.964552, 0.953722, 0.936443, 1.015794, 0.959053, 0.923653},
                                                {0.902133, 0.972987, 0.960569, 0.959492, 1.021778, 0.949378, 0.891025},
                                                {0.932872, 0.980185, 0.956707, 0.920165, 1.011689, 0.997071, 0.948327},
                                                {0.967503, 0.977927, 0.963544, 0.967012, 0.963259, 0.962624, 0.961989}},
                                               {{1.001835, 1.009927, 0.958595, 0.938422, 0.946262, 1.032672, 0.877354},
                                                {0.961951, 0.969408, 0.979945, 0.976158, 0.973874, 0.997156, 0.858941},
                                                {0.955930, 0.977794, 0.981731, 0.986000, 0.984597, 1.000007, 0.923956},
                                                {0.949967, 0.980341, 0.974757, 0.968384, 0.970383, 0.988664, 0.982558},
                                                {0.920432, 0.973678, 0.965986, 0.981568, 0.969207, 0.981082, 0.990650},
                                                {0.900834, 0.974662, 0.979203, 0.986370, 0.969591, 0.973663, 1.000295},
                                                {0.881743, 0.986899, 0.997842, 1.003253, 0.994602, 1.007002, 1.072018},
                                                {0.842436, 0.967619, 0.982676, 0.980338, 0.968357, 0.999681, 1.051561},
                                                {0.851771, 0.992117, 0.999512, 0.998251, 0.962465, 1.006144, 0.985943},
                                                {0.874054, 0.987993, 0.967391, 0.932387, 1.018773, 1.055165, 0.955162},
                                                {0.903067, 0.985578, 0.970683, 0.946478, 1.036763, 0.969420, 0.927159},
                                                {0.923780, 0.996025, 0.978594, 0.969966, 1.040072, 0.974622, 0.915231},
                                                {0.935728, 0.994666, 0.964618, 0.927389, 1.024858, 1.011342, 0.959899},
                                                {0.971692, 0.995231, 0.979179, 0.986579, 0.979282, 0.976286, 0.966446}},
                                               {{0.987705, 0.982875, 0.947480, 0.931147, 0.932873, 1.015858, 0.870886},
                                                {0.944607, 0.965163, 0.967692, 0.975198, 0.961100, 0.992410, 0.855068},
                                                {0.954718, 0.976125, 0.972147, 0.974783, 0.975567, 0.985203, 0.915488},
                                                {0.943229, 0.967483, 0.967294, 0.967330, 0.959494, 0.976435, 0.968675},
                                                {0.921848, 0.960040, 0.959849, 0.964540, 0.965464, 0.974990, 0.977228},
                                                {0.901754, 0.969210, 0.965199, 0.978480, 0.963524, 0.966241, 0.979194},
                                                {0.877591, 0.982698, 0.985239, 0.990582, 0.990393, 1.006567, 1.060122},
                                                {0.844368, 0.957917, 0.963251, 0.969800, 0.965806, 0.986591, 1.039312},
                                                {0.843357, 0.983433, 0.986654, 0.994891, 0.950060, 1.003713, 0.971862},
                                                {0.866393, 0.977295, 0.954948, 0.922602, 1.008867, 1.045478, 0.939979},
                                                {0.893684, 0.978846, 0.959252, 0.941739, 1.018209, 0.966934, 0.924611},
                                                {0.914673, 0.972962, 0.966462, 0.959902, 1.023748, 0.955392, 0.903206},
                                                {0.934455, 0.992854, 0.962012, 0.922798, 1.012736, 0.996690, 0.952350},
                                                {0.961459, 0.979320, 0.969246, 0.970402, 0.969279, 0.973419, 0.971475}},
                                               {{0.984934, 0.987319, 0.948307, 0.930334, 0.939518, 1.017360, 0.867420},
                                                {0.947644, 0.971970, 0.972774, 0.969361, 0.969307, 0.993147, 0.850089},
                                                {0.947779, 0.974587, 0.974112, 0.972628, 0.975702, 0.985500, 0.915113},
                                                {0.949472, 0.972682, 0.961399, 0.965699, 0.959151, 0.980700, 0.970909},
                                                {0.921508, 0.962320, 0.963952, 0.965595, 0.963709, 0.967270, 0.977422},
                                                {0.897426, 0.971182, 0.965896, 0.976972, 0.959406, 0.967886, 0.987480},
                                                {0.879802, 0.980997, 0.991053, 0.991194, 0.991656, 1.001872, 1.070895},
                                                {0.841085, 0.967395, 0.971025, 0.968242, 0.968007, 0.987601, 1.039211},
                                                {0.850769, 0.983655, 0.985091, 0.993579, 0.951106, 0.999675, 0.970487},
                                                {0.860684, 0.977963, 0.962931, 0.921026, 1.006985, 1.045834, 0.941567},
                                                {0.900645, 0.983294, 0.964337, 0.946167, 1.018000, 0.964548, 0.920851},
                                                {0.917223, 0.984248, 0.973423, 0.962719, 1.029064, 0.955482, 0.902010},
                                                {0.927329, 0.989873, 0.954909, 0.921498, 1.014380, 0.993293, 0.956322},
                                                {0.960439, 0.979652, 0.970080, 0.973339, 0.972490, 0.967070, 0.954916}},
                                               {{0.973518, 0.982310, 0.943844, 0.930749, 0.933970, 1.014558, 0.866961},
                                                {0.941656, 0.965959, 0.964895, 0.969556, 0.963778, 0.988263, 0.845002},
                                                {0.939279, 0.967473, 0.970475, 0.967478, 0.972718, 0.982108, 0.906829},
                                                {0.941152, 0.968825, 0.962996, 0.957186, 0.962738, 0.974204, 0.968081},
                                                {0.912177, 0.953167, 0.950964, 0.959761, 0.959990, 0.961390, 0.970146},
                                                {0.898074, 0.967857, 0.964909, 0.971059, 0.954501, 0.963694, 0.978567},
                                                {0.875382, 0.969760, 0.985527, 0.987639, 0.989165, 0.995201, 1.062308},
                                                {0.839775, 0.948573, 0.968639, 0.966427, 0.957061, 0.980087, 1.039215},
                                                {0.838782, 0.983573, 0.985521, 0.988342, 0.945821, 0.995432, 0.969349},
                                                {0.855322, 0.973762, 0.954065, 0.918520, 1.003621, 1.047707, 0.936440},
                                                {0.886034, 0.977312, 0.957457, 0.933378, 1.018286, 0.962317, 0.915876},
                                                {0.907268, 0.971206, 0.961360, 0.958802, 1.025312, 0.954206, 0.899274},
                                                {0.923509, 0.983663, 0.953597, 0.918552, 1.012755, 0.985892, 0.942294},
                                                {0.948770, 0.982292, 0.964688, 0.965888, 0.970320, 0.962753, 0.946584}},
                                               {{0.990880, 0.987074, 0.954814, 0.939034, 0.949373, 1.022268, 0.869179},
                                                {0.953689, 0.969524, 0.972684, 0.974257, 0.970294, 1.001211, 0.854838},
                                                {0.947890, 0.986339, 0.978802, 0.977438, 0.981008, 0.988837, 0.918573},
                                                {0.950594, 0.973181, 0.972255, 0.972117, 0.965340, 0.977457, 0.974970},
                                                {0.919290, 0.961533, 0.961028, 0.965651, 0.967015, 0.967875, 0.976295},
                                                {0.905645, 0.973714, 0.970139, 0.978753, 0.966858, 0.970686, 0.986543},
                                                {0.874799, 0.984321, 0.991343, 0.994822, 0.993055, 1.004816, 1.073496},
                                                {0.842097, 0.962422, 0.969234, 0.971522, 0.965844, 0.990494, 1.049501},
                                                {0.848029, 0.988220, 0.989622, 0.994890, 0.952321, 1.001831, 0.966110},
                                                {0.864275, 0.976563, 0.956548, 0.923642, 1.010620, 1.052655, 0.936795},
                                                {0.892708, 0.978435, 0.964944, 0.941691, 1.028271, 0.967403, 0.927635},
                                                {0.909550, 0.980726, 0.974669, 0.968716, 1.035616, 0.957220, 0.899234},
                                                {0.929808, 0.989744, 0.960781, 0.922885, 1.020078, 0.993850, 0.950900},
                                                {0.962648, 0.988757, 0.970421, 0.975785, 0.973513, 0.964510, 0.951593}},
                                               {{1.023361, 1.001486, 0.969420, 0.960787, 0.960143, 1.037342, 0.880140},
                                                {0.967559, 0.975626, 0.987094, 0.982352, 0.978140, 1.009959, 0.863285},
                                                {0.961038, 0.986154, 0.986082, 0.975650, 0.987138, 0.997674, 0.927656},
                                                {0.955833, 0.983982, 0.978077, 0.978389, 0.971954, 0.986000, 0.979836},
                                                {0.928656, 0.964291, 0.968796, 0.977764, 0.973070, 0.974472, 0.975684},
                                                {0.908651, 0.978684, 0.973157, 0.979757, 0.971257, 0.977915, 0.997926},
                                                {0.883410, 0.987210, 0.999827, 0.998651, 1.002408, 1.008890, 1.076713},
                                                {0.854556, 0.971480, 0.977043, 0.979035, 0.971506, 0.993860, 1.052917},
                                                {0.862146, 0.996283, 0.996518, 1.001748, 0.957942, 1.005913, 0.974585},
                                                {0.869783, 0.977789, 0.961732, 0.927808, 1.013238, 1.050033, 0.942252},
                                                {0.902816, 0.985889, 0.974824, 0.946816, 1.031834, 0.972854, 0.921415},
                                                {0.916448, 0.988515, 0.979608, 0.968667, 1.042968, 0.955499, 0.906606},
                                                {0.936128, 0.998579, 0.963355, 0.926499, 1.023831, 1.001084, 0.958486},
                                                {0.961154, 0.990922, 0.970275, 0.981710, 0.979870, 0.970901, 0.956076}},
                                               {{0.914381, 0.989774, 0.922371, 0.930679, 0.967173, 1.068446, 0.842559},
                                                {0.983962, 0.995668, 0.994217, 0.991116, 0.987490, 1.005820, 0.862677},
                                                {0.970966, 0.992686, 0.994733, 0.986621, 0.986777, 0.998271, 0.933482},
                                                {0.971199, 0.991005, 0.982165, 0.978036, 0.974890, 0.991249, 0.990296},
                                                {0.951741, 0.969016, 0.966289, 0.975404, 0.973711, 0.980036, 0.983710},
                                                {0.929735, 0.979795, 0.984504, 0.986180, 0.975007, 0.983971, 1.002922},
                                                {0.905413, 0.996982, 1.000930, 1.004455, 1.004853, 1.016034, 1.081671},
                                                {0.876795, 0.972722, 0.979526, 0.980561, 0.976375, 1.001352, 1.054078},
                                                {0.862829, 0.996229, 0.996950, 1.003294, 0.961153, 1.009712, 0.970421},
                                                {0.850842, 0.985238, 0.960024, 0.927136, 1.017275, 1.057300, 0.936167},
                                                {0.894138, 0.996362, 0.976294, 0.949973, 1.038637, 0.970290, 0.933531},
                                                {0.910544, 0.989855, 0.984379, 0.972607, 1.044243, 0.960314, 0.906387},
                                                {0.929699, 1.003171, 0.970941, 0.925431, 1.032138, 0.992336, 0.965221},
                                                {0.957705, 1.000525, 0.977514, 0.990120, 0.981081, 0.968997, 0.975034}}};

/////////////////////// Bin centring corr- theta ///////////////////
float bin_centering_corr_th_prot[9][14][10] = {
    {{1.018557, 0.995597, 0.966939, 0.940950, 0.929765, 0.945022, 0.960794, 0.978984, 0.972861, 0.993507},
     {0.940859, 0.966544, 0.986128, 0.970789, 0.960701, 0.951435, 0.957490, 0.956160, 0.965400, 0.962123},
     {0.968213, 0.965418, 0.968549, 0.974991, 0.978362, 0.976909, 0.978670, 0.983128, 0.972300, 0.997308},
     {0.967695, 0.973933, 0.977423, 0.976164, 0.963442, 0.968125, 0.979781, 0.964636, 0.981050, 0.968952},
     {1.014189, 0.996597, 0.975887, 0.961727, 0.966397, 0.974207, 0.969103, 0.976788, 0.972445, 0.962829},
     {0.927453, 0.946426, 0.961752, 0.962885, 0.963884, 0.967829, 0.973835, 0.969547, 0.991418, 0.993646},
     {0.995106, 0.998809, 0.992332, 0.995189, 0.992327, 0.983719, 0.987695, 0.989136, 0.987756, 0.999657},
     {0.969177, 0.962104, 0.976221, 0.973186, 0.977834, 0.979815, 0.972356, 0.976814, 0.974971, 0.990189},
     {1.015248, 0.999805, 0.992156, 0.986982, 0.988052, 0.980332, 0.970941, 0.963725, 0.967495, 0.951750},
     {0.966722, 0.962309, 0.963902, 0.960166, 0.981634, 0.988755, 0.994183, 0.998002, 1.013402, 1.013015},
     {0.983672, 0.985879, 0.975877, 0.976320, 0.977879, 0.976999, 0.981750, 0.975376, 0.985628, 0.987627},
     {0.997709, 0.998040, 0.984535, 0.978054, 0.973701, 0.974845, 0.990535, 0.986349, 0.985178, 0.966661},
     {0.972288, 0.991118, 0.971765, 0.981530, 0.986995, 0.978030, 0.985185, 0.983365, 0.998843, 1.019403},
     {0.967047, 0.980288, 0.984278, 0.974625, 0.976465, 0.982525, 0.990740, 0.978994, 0.990214, 1.015602}},
    {{1.014765, 0.976950, 0.945727, 0.922286, 0.912613, 0.920035, 0.942447, 0.957958, 0.970673, 0.951914},
     {0.916108, 0.951854, 0.965033, 0.956442, 0.941212, 0.937639, 0.943229, 0.942861, 0.951314, 0.965682},
     {0.945909, 0.949101, 0.949285, 0.962058, 0.961549, 0.961666, 0.960570, 0.969971, 0.969689, 0.966762},
     {0.940906, 0.960336, 0.958073, 0.949341, 0.946205, 0.948729, 0.953995, 0.957631, 0.961313, 0.963846},
     {1.004979, 0.966476, 0.951188, 0.952487, 0.947684, 0.946761, 0.951747, 0.949175, 0.942416, 0.951025},
     {0.934910, 0.930414, 0.946227, 0.952074, 0.955172, 0.959022, 0.962174, 0.954423, 0.970204, 0.964565},
     {0.985024, 0.985952, 0.974737, 0.975748, 0.972221, 0.967441, 0.970343, 0.973287, 0.983608, 0.986797},
     {0.951746, 0.938822, 0.952679, 0.965047, 0.961521, 0.965263, 0.952468, 0.958945, 0.957393, 0.959489},
     {0.983380, 0.983569, 0.974637, 0.975865, 0.971322, 0.965835, 0.954867, 0.941543, 0.945653, 0.934349},
     {0.953525, 0.949723, 0.939242, 0.945342, 0.955585, 0.962936, 0.978432, 0.979198, 1.000210, 1.009109},
     {0.988333, 0.982672, 0.971398, 0.966653, 0.972231, 0.965940, 0.962866, 0.971988, 0.964941, 0.974972},
     {0.961445, 0.973629, 0.955456, 0.965751, 0.962844, 0.963749, 0.972935, 0.964253, 0.973978, 0.986608},
     {0.980541, 0.980404, 0.961351, 0.968445, 0.963863, 0.965683, 0.973642, 0.964775, 0.982690, 0.994148},
     {0.959277, 0.971795, 0.962388, 0.964418, 0.968251, 0.971859, 0.973390, 0.971572, 0.963245, 0.999044}},
    {{1.002343, 0.998318, 0.966993, 0.947718, 0.938103, 0.945104, 0.966408, 0.983397, 0.981942, 0.995789},
     {0.942751, 0.965589, 0.984481, 0.974539, 0.966030, 0.953476, 0.960363, 0.962174, 0.963390, 0.948957},
     {0.963352, 0.968552, 0.981885, 0.979574, 0.973501, 0.980173, 0.984474, 0.990018, 0.986841, 0.987562},
     {0.983122, 0.985178, 0.976821, 0.970427, 0.972135, 0.974471, 0.982633, 0.977731, 0.983550, 0.980871},
     {1.005843, 0.986888, 0.969386, 0.972482, 0.960216, 0.967633, 0.971323, 0.971393, 0.968679, 0.969997},
     {0.943999, 0.949350, 0.955588, 0.969988, 0.973628, 0.973259, 0.972572, 0.979180, 0.985395, 0.995226},
     {1.026538, 1.003883, 0.999622, 0.988589, 0.996215, 0.990183, 0.992899, 1.000479, 1.003516, 1.003001},
     {0.968803, 0.975289, 0.974640, 0.984795, 0.991128, 0.971859, 0.970805, 0.970592, 0.977667, 0.981515},
     {0.985943, 0.998668, 0.991489, 0.999543, 0.996392, 0.980846, 0.973743, 0.968917, 0.968012, 0.952064},
     {0.956603, 0.974639, 0.960150, 0.969285, 0.968825, 0.985380, 0.997891, 1.001970, 1.012025, 1.007758},
     {0.991204, 0.993215, 0.979053, 0.985496, 0.988001, 0.982814, 0.983387, 0.984482, 0.988642, 0.989020},
     {1.002463, 0.985033, 0.990748, 0.986334, 0.982898, 0.986457, 0.988540, 0.988420, 0.993029, 1.009929},
     {0.990882, 0.988761, 0.984909, 0.979302, 0.982986, 0.977695, 0.986912, 0.983598, 0.990272, 1.021587},
     {0.973213, 0.995855, 0.986745, 0.980851, 0.980083, 0.983460, 0.992995, 0.980254, 0.977081, 1.013610}},
    {{1.003398, 0.980054, 0.951141, 0.930169, 0.917551, 0.933531, 0.952392, 0.965502, 0.965188, 0.978126},
     {0.930189, 0.953803, 0.975066, 0.961865, 0.952686, 0.949870, 0.952298, 0.953429, 0.952495, 0.963652},
     {0.946873, 0.950698, 0.966182, 0.967993, 0.969655, 0.971496, 0.971921, 0.978899, 0.983092, 0.979015},
     {0.941012, 0.967554, 0.964474, 0.961859, 0.958597, 0.959965, 0.966111, 0.967626, 0.968224, 0.968230},
     {0.996701, 0.977592, 0.961329, 0.957042, 0.957433, 0.956392, 0.955718, 0.964093, 0.961932, 0.958179},
     {0.933190, 0.938217, 0.948968, 0.961157, 0.961963, 0.961105, 0.964083, 0.969865, 0.973774, 0.986520},
     {1.001315, 0.994811, 0.989032, 0.980527, 0.981212, 0.983532, 0.982403, 0.983748, 0.990144, 0.991969},
     {0.964544, 0.961950, 0.963637, 0.969992, 0.971551, 0.962843, 0.964930, 0.963922, 0.964915, 0.963421},
     {0.998805, 0.987175, 0.985063, 0.992286, 0.980289, 0.972968, 0.962712, 0.952921, 0.955990, 0.951627},
     {0.954621, 0.954421, 0.947678, 0.955956, 0.963643, 0.980244, 0.983135, 0.987267, 1.001953, 1.012661},
     {0.992400, 0.984012, 0.975702, 0.979268, 0.972088, 0.971884, 0.975935, 0.972350, 0.970341, 0.975182},
     {0.980695, 0.978210, 0.966551, 0.974634, 0.968964, 0.972471, 0.972860, 0.977574, 0.968121, 0.984010},
     {0.971592, 0.974812, 0.965300, 0.974552, 0.973399, 0.975301, 0.977666, 0.979071, 0.976574, 1.002434},
     {0.978925, 0.986602, 0.964407, 0.972872, 0.967039, 0.978995, 0.974654, 0.971986, 0.980169, 1.000450}},
    {{0.994082, 0.973650, 0.952620, 0.931882, 0.921344, 0.932174, 0.951436, 0.969705, 0.977163, 0.961647},
     {0.935245, 0.959310, 0.975079, 0.963167, 0.951189, 0.948733, 0.951717, 0.957368, 0.958384, 0.954167},
     {0.960213, 0.962208, 0.965172, 0.964581, 0.974435, 0.968905, 0.974989, 0.980366, 0.976264, 0.976946},
     {0.961489, 0.962582, 0.968385, 0.960176, 0.958755, 0.961056, 0.963493, 0.968365, 0.970290, 0.974441},
     {0.992095, 0.970687, 0.957026, 0.953942, 0.958875, 0.955650, 0.954339, 0.956378, 0.964673, 0.959714},
     {0.924877, 0.941776, 0.950944, 0.957319, 0.967645, 0.962803, 0.961929, 0.975218, 0.968735, 0.988083},
     {1.005228, 0.988190, 0.983845, 0.985693, 0.984291, 0.984323, 0.988318, 0.988132, 0.996897, 0.989987},
     {0.955244, 0.963874, 0.973236, 0.971320, 0.967092, 0.968012, 0.964203, 0.967505, 0.968740, 0.964733},
     {1.003782, 0.991320, 0.983418, 0.981996, 0.975728, 0.970138, 0.964457, 0.954652, 0.958733, 0.941622},
     {0.960122, 0.961427, 0.952871, 0.956435, 0.966131, 0.970309, 0.982684, 0.996105, 0.999203, 1.018783},
     {0.995112, 0.986455, 0.976657, 0.975879, 0.977428, 0.971786, 0.975387, 0.975073, 0.973656, 0.969269},
     {0.982191, 0.978975, 0.969184, 0.970243, 0.969544, 0.973250, 0.979466, 0.977635, 0.976446, 0.987014},
     {0.962188, 0.980454, 0.968208, 0.970753, 0.969187, 0.970952, 0.978139, 0.969571, 0.984078, 1.006804},
     {0.962361, 0.984709, 0.976627, 0.974516, 0.972125, 0.975107, 0.981909, 0.970985, 0.980202, 1.018903}},
    {{0.987243, 0.973573, 0.942059, 0.928473, 0.923335, 0.929580, 0.948896, 0.960672, 0.963148, 0.968026},
     {0.934960, 0.952444, 0.968917, 0.963979, 0.949940, 0.941215, 0.945507, 0.956168, 0.955198, 0.953816},
     {0.948853, 0.952276, 0.961541, 0.962715, 0.962035, 0.964360, 0.967057, 0.971472, 0.978640, 0.976572},
     {0.952734, 0.956730, 0.959647, 0.958849, 0.957299, 0.954400, 0.961929, 0.968542, 0.967239, 0.962102},
     {0.979832, 0.966832, 0.953317, 0.947786, 0.949482, 0.950956, 0.946969, 0.948830, 0.955289, 0.942779},
     {0.920897, 0.933882, 0.942138, 0.951554, 0.955046, 0.958290, 0.959777, 0.974662, 0.971039, 0.973948},
     {0.998368, 0.984451, 0.980889, 0.983996, 0.977180, 0.978701, 0.978320, 0.985399, 0.988696, 0.983365},
     {0.946893, 0.949569, 0.965503, 0.969615, 0.966053, 0.961400, 0.954658, 0.958091, 0.964273, 0.960213},
     {0.985634, 0.988174, 0.976785, 0.978699, 0.975947, 0.969913, 0.962401, 0.953661, 0.951411, 0.948379},
     {0.949738, 0.949502, 0.943456, 0.951218, 0.964372, 0.971258, 0.977177, 0.986233, 1.001171, 1.007323},
     {0.980631, 0.976481, 0.968802, 0.977132, 0.969258, 0.970856, 0.970456, 0.968069, 0.975267, 0.977434},
     {0.967703, 0.976609, 0.958823, 0.964696, 0.966832, 0.969908, 0.974732, 0.974819, 0.975032, 0.976030},
     {0.963195, 0.972556, 0.961074, 0.969282, 0.966061, 0.965992, 0.968433, 0.973154, 0.979849, 1.004749},
     {0.963556, 0.978147, 0.970181, 0.964876, 0.968551, 0.970070, 0.971219, 0.971425, 0.972286, 0.993184}},
    {{0.999569, 0.982414, 0.954751, 0.931458, 0.931921, 0.942758, 0.955693, 0.971323, 0.968729, 0.974644},
     {0.942724, 0.962150, 0.970058, 0.971643, 0.960658, 0.951416, 0.952097, 0.962468, 0.954702, 0.960666},
     {0.961639, 0.963261, 0.968141, 0.973371, 0.975317, 0.979106, 0.980797, 0.981820, 0.980802, 0.981196},
     {0.956979, 0.966202, 0.964390, 0.964316, 0.963791, 0.968998, 0.969995, 0.974769, 0.969811, 0.978328},
     {0.982232, 0.972995, 0.963440, 0.956493, 0.956524, 0.956721, 0.957663, 0.961185, 0.961407, 0.958363},
     {0.932062, 0.944730, 0.957197, 0.960107, 0.965878, 0.960511, 0.969451, 0.973587, 0.981543, 0.977873},
     {0.997998, 0.988299, 0.990097, 0.988314, 0.989051, 0.986397, 0.990481, 0.993234, 0.997866, 1.000886},
     {0.946247, 0.965564, 0.972163, 0.975237, 0.971162, 0.973004, 0.965963, 0.969014, 0.969608, 0.967997},
     {0.994694, 0.988170, 0.987707, 0.993342, 0.983407, 0.977157, 0.965085, 0.958028, 0.959125, 0.942278},
     {0.945188, 0.956900, 0.952781, 0.961525, 0.969693, 0.977902, 0.982261, 0.998682, 1.009557, 1.016282},
     {0.982295, 0.987807, 0.977801, 0.981258, 0.983327, 0.980297, 0.979648, 0.973463, 0.979538, 0.978474},
     {0.969823, 0.974787, 0.971710, 0.979575, 0.975333, 0.977758, 0.980684, 0.985289, 0.985969, 0.997524},
     {0.970288, 0.978905, 0.972143, 0.977816, 0.970414, 0.973193, 0.980167, 0.982022, 0.988480, 1.014072},
     {0.974821, 0.987442, 0.970329, 0.978779, 0.972605, 0.976188, 0.984181, 0.979166, 0.979273, 1.000307}},
    {{1.038618, 1.002714, 0.965845, 0.945935, 0.941058, 0.957467, 0.979094, 0.987792, 0.988520, 0.991557},
     {0.942337, 0.967226, 0.983510, 0.986123, 0.965472, 0.960888, 0.964207, 0.965693, 0.968501, 0.963912},
     {0.969425, 0.967158, 0.973342, 0.979628, 0.983756, 0.979330, 0.985152, 0.986596, 0.989425, 0.982870},
     {0.965749, 0.974199, 0.971784, 0.973175, 0.969772, 0.974558, 0.974409, 0.981639, 0.986002, 0.985001},
     {0.996517, 0.980953, 0.969484, 0.964468, 0.962828, 0.965159, 0.965513, 0.964529, 0.968736, 0.953694},
     {0.941494, 0.949703, 0.959955, 0.967019, 0.965168, 0.971000, 0.975056, 0.985382, 0.988650, 0.983331},
     {1.011460, 0.994509, 0.994927, 0.996442, 0.990800, 0.998401, 0.991498, 0.999398, 1.005339, 1.003406},
     {0.962645, 0.969264, 0.975102, 0.981333, 0.981436, 0.977284, 0.974804, 0.972940, 0.979896, 0.992390},
     {0.998252, 0.999131, 0.996790, 0.992164, 0.988753, 0.983923, 0.972122, 0.965803, 0.962776, 0.953827},
     {0.969518, 0.966885, 0.957901, 0.961673, 0.970718, 0.980115, 0.989818, 0.998369, 1.008119, 1.027949},
     {0.980816, 0.988886, 0.980881, 0.984910, 0.983558, 0.982549, 0.987641, 0.980427, 0.993267, 0.994703},
     {0.975473, 0.979052, 0.981935, 0.983308, 0.981596, 0.981490, 0.986008, 0.991415, 0.983569, 1.006830},
     {0.991171, 0.985987, 0.977355, 0.980200, 0.984003, 0.975703, 0.982037, 0.987082, 0.998373, 1.015218},
     {0.972099, 0.993507, 0.979655, 0.981261, 0.979336, 0.982544, 0.989238, 0.986247, 0.985768, 1.017250}},
    {{0.871401, 0.920612, 0.961230, 0.937507, 0.921502, 0.935590, 0.964833, 0.992200, 1.019686, 1.030042},
     {1.011966, 1.016702, 0.999799, 0.989047, 0.975499, 0.967960, 0.967824, 0.971384, 0.972234, 0.980485},
     {0.980367, 0.983705, 0.985041, 0.985850, 0.988726, 0.986234, 0.986060, 0.994628, 0.997513, 1.008597},
     {0.969582, 0.974613, 0.978642, 0.976646, 0.971501, 0.978221, 0.987666, 0.986625, 0.989079, 0.980579},
     {0.984381, 0.977291, 0.972980, 0.964941, 0.964169, 0.960539, 0.969886, 0.965475, 0.974151, 0.972830},
     {0.950911, 0.956679, 0.961676, 0.974364, 0.973758, 0.973938, 0.975567, 0.989145, 0.991116, 0.994447},
     {1.003310, 1.002375, 1.002959, 0.998271, 0.998525, 0.997329, 0.998269, 1.003018, 1.005710, 1.002676},
     {0.967444, 0.973227, 0.981895, 0.985951, 0.981857, 0.981695, 0.976801, 0.978732, 0.983263, 0.980761},
     {0.995730, 1.001057, 0.998093, 0.993556, 0.991132, 0.985758, 0.978799, 0.968477, 0.969493, 0.959303},
     {0.965531, 0.965180, 0.964268, 0.963726, 0.975414, 0.984084, 0.993084, 1.007404, 1.017770, 1.028950},
     {0.989676, 0.998760, 0.985072, 0.991317, 0.988153, 0.986644, 0.992456, 0.990335, 0.991996, 0.988132},
     {0.982049, 0.996654, 0.983218, 0.988428, 0.986060, 0.986002, 0.990997, 0.991690, 0.988891, 0.995565},
     {0.981230, 0.986854, 0.985134, 0.986322, 0.981211, 0.987611, 0.987802, 0.989605, 0.994613, 1.023591},
     {0.965164, 0.996379, 0.988144, 0.984526, 0.986792, 0.987183, 0.991533, 0.992406, 0.989842, 1.031040}}};
float bin_centering_corr_th_pip[9][14][10] = {
    {{0.936123, 0.942739, 0.952933, 0.967028, 0.989787, 0.985570, 0.974466, 0.940872, 0.912590, 0.897848},
     {0.931262, 0.940581, 0.956862, 0.975162, 0.985460, 0.985778, 0.967682, 0.932142, 0.909774, 0.896680},
     {0.945897, 0.939093, 0.958490, 0.968461, 0.978057, 0.973314, 0.970912, 0.940321, 0.911078, 0.897448},
     {0.935991, 0.943937, 0.957643, 0.966617, 0.977002, 0.983343, 0.968361, 0.936986, 0.910647, 0.900522},
     {0.951497, 0.944571, 0.954044, 0.959359, 0.985922, 0.978689, 0.967505, 0.944512, 0.918594, 0.902996},
     {0.930105, 0.939451, 0.954732, 0.966027, 0.972945, 0.975922, 0.968517, 0.944270, 0.915717, 0.910252},
     {0.929853, 0.950082, 0.957130, 0.967963, 0.978426, 0.977293, 0.964863, 0.941626, 0.922018, 0.906869},
     {0.963132, 0.962512, 0.962137, 0.975437, 0.986098, 0.993582, 0.971381, 0.950432, 0.931730, 0.933504},
     {0.947728, 0.969561, 0.959633, 0.968221, 0.965048, 0.973471, 0.960537, 0.931648, 0.899983, 0.903858},
     {0.976335, 0.970402, 0.952333, 0.951434, 0.960769, 0.964571, 0.967858, 0.984653, 1.001288, 0.999656},
     {0.976747, 0.972289, 0.958418, 0.953753, 0.964038, 0.967491, 0.973177, 0.975881, 0.986240, 0.985871},
     {0.966390, 0.964252, 0.957876, 0.960890, 0.967309, 0.962972, 0.973906, 0.970472, 0.991688, 0.988360},
     {0.973307, 0.961299, 0.958520, 0.962447, 0.963063, 0.973348, 0.968365, 0.979568, 0.988776, 0.986181},
     {0.960523, 0.966936, 0.964371, 0.961148, 0.968276, 0.966086, 0.975602, 0.979022, 0.977766, 1.003969}},
    {{0.944921, 0.934409, 0.938699, 0.937819, 0.936505, 0.943614, 0.946725, 0.952595, 0.960371, 0.971074},
     {0.946572, 0.938027, 0.939111, 0.936460, 0.946684, 0.948941, 0.946359, 0.956935, 0.961774, 0.960775},
     {0.954236, 0.936624, 0.945635, 0.940181, 0.948239, 0.949122, 0.953688, 0.955671, 0.967187, 0.983353},
     {0.945471, 0.936349, 0.941460, 0.942075, 0.952192, 0.954739, 0.966588, 0.975186, 0.963611, 0.971854},
     {0.976751, 0.953404, 0.972750, 0.970899, 0.966795, 0.950311, 0.948878, 0.963342, 0.966189, 0.965972},
     {0.957524, 0.975364, 0.970853, 0.973267, 0.970252, 0.957310, 0.959016, 0.960925, 0.956243, 0.976515},
     {0.983634, 0.968393, 0.965738, 0.969364, 0.967271, 0.949572, 0.946687, 0.954404, 0.962712, 0.963341},
     {0.972947, 0.967645, 0.973629, 0.975915, 0.969700, 0.963663, 0.952605, 0.960267, 0.961737, 0.982761},
     {0.978661, 0.972859, 0.971361, 0.976690, 0.964445, 0.963764, 0.952960, 0.957077, 0.969210, 0.984642},
     {0.981454, 0.968754, 0.968435, 0.968962, 0.964632, 0.966113, 0.955738, 0.964877, 0.964212, 0.991681},
     {0.976437, 0.973746, 0.975833, 0.975896, 0.972194, 0.956697, 0.959449, 0.963145, 0.971087, 0.976930},
     {0.978559, 0.981521, 0.975049, 0.963835, 0.965344, 0.966486, 0.960689, 0.953472, 0.968180, 0.975899},
     {0.989841, 0.975374, 0.977321, 0.975422, 0.976599, 0.966447, 0.962724, 0.969104, 0.973264, 0.979966},
     {0.953550, 0.952675, 0.950371, 0.953667, 0.957382, 0.960011, 0.967619, 0.970903, 0.989571, 1.020340}},
    {{0.970605, 0.966817, 0.956506, 0.961243, 0.971632, 0.972535, 0.973175, 0.985348, 0.990768, 1.007504},
     {0.969667, 0.972453, 0.974607, 0.968181, 0.967540, 0.972897, 0.973723, 0.985618, 0.986325, 0.997287},
     {0.962687, 0.961529, 0.969776, 0.969218, 0.965322, 0.963964, 0.978938, 0.986928, 1.002563, 1.004370},
     {0.982373, 0.962604, 0.969778, 0.969216, 0.965172, 0.973375, 0.974168, 0.984528, 0.997766, 1.015228},
     {0.981595, 0.971796, 0.973228, 0.971304, 0.969076, 0.972904, 0.974506, 0.985482, 0.998186, 1.001665},
     {0.970234, 0.974093, 0.971056, 0.970669, 0.971757, 0.970563, 0.974045, 0.985980, 0.996842, 1.004263},
     {0.983613, 0.975892, 0.979216, 0.973539, 0.975357, 0.971108, 0.980410, 0.989582, 0.994624, 1.000674},
     {0.982654, 0.979603, 0.970975, 0.978678, 0.980058, 0.972397, 0.977289, 0.992027, 0.994281, 1.008484},
     {0.966437, 0.967072, 0.975626, 0.985150, 0.978475, 0.974664, 0.978486, 0.964658, 0.969656, 0.941277},
     {0.965271, 0.977418, 0.970515, 0.971088, 0.974630, 0.973528, 0.975850, 0.967717, 0.968270, 0.955200},
     {0.971654, 0.971136, 0.976810, 0.978391, 0.978179, 0.973710, 0.974774, 0.966389, 0.953375, 0.937623},
     {0.963784, 0.968358, 0.974593, 0.975156, 0.979919, 0.979362, 0.969680, 0.974031, 0.964230, 0.963039},
     {0.957593, 0.971563, 0.975863, 0.976441, 0.974777, 0.975473, 0.974907, 0.968658, 0.962667, 0.965027},
     {0.947168, 0.964816, 0.970730, 0.977499, 0.974706, 0.971841, 0.974187, 0.960816, 0.959743, 0.948275}},
    {{0.952290, 0.944412, 0.947707, 0.951790, 0.952179, 0.955138, 0.949891, 0.952564, 0.941252, 0.939309},
     {0.946799, 0.948317, 0.950396, 0.955757, 0.957476, 0.954235, 0.956780, 0.951282, 0.944640, 0.935476},
     {0.943683, 0.946087, 0.954442, 0.960097, 0.954319, 0.954736, 0.958689, 0.948788, 0.943437, 0.925162},
     {0.964263, 0.948807, 0.956065, 0.966974, 0.961285, 0.956737, 0.965163, 0.958916, 0.959718, 0.971531},
     {0.972993, 0.954153, 0.956666, 0.965405, 0.961362, 0.966435, 0.961036, 0.955632, 0.965990, 0.967406},
     {0.965743, 0.958616, 0.959408, 0.963586, 0.957645, 0.963466, 0.957169, 0.965763, 0.956946, 0.957714},
     {0.968485, 0.964663, 0.956476, 0.964518, 0.965587, 0.964234, 0.963400, 0.956558, 0.958260, 0.966323},
     {0.954127, 0.957123, 0.958518, 0.967747, 0.965856, 0.965476, 0.964168, 0.954129, 0.954528, 0.949500},
     {0.957351, 0.958944, 0.966323, 0.966138, 0.966460, 0.965287, 0.963236, 0.963120, 0.959338, 0.965768},
     {0.954811, 0.958921, 0.958124, 0.962468, 0.970943, 0.967736, 0.966189, 0.959478, 0.962880, 0.964321},
     {0.958715, 0.962264, 0.958279, 0.963105, 0.967358, 0.966511, 0.965089, 0.962867, 0.960949, 0.961736},
     {0.958447, 0.956495, 0.961808, 0.964555, 0.967018, 0.970932, 0.962259, 0.966561, 0.956519, 0.965238},
     {1.001299, 0.985984, 0.993989, 0.980126, 0.983740, 0.982505, 0.986160, 0.982848, 0.980218, 0.978513},
     {0.996195, 0.993193, 0.991813, 0.981477, 0.982828, 0.980526, 0.985685, 0.988173, 0.984029, 0.964355}},
    {{0.993695, 0.999324, 0.990256, 0.986703, 0.980917, 0.968032, 0.974930, 0.982540, 0.983026, 0.975400},
     {0.992522, 0.987205, 0.988326, 0.979486, 0.981312, 0.979294, 0.979813, 0.985916, 0.979819, 0.982258},
     {0.989784, 0.987417, 0.990482, 0.986218, 0.981334, 0.980759, 0.984510, 0.982485, 0.982382, 0.969759},
     {0.987146, 0.985803, 0.989856, 0.985724, 0.986632, 0.979946, 0.985291, 0.984420, 0.981348, 0.985677},
     {0.989096, 0.993187, 0.991322, 0.989634, 0.982533, 0.982647, 0.983567, 0.980130, 0.979190, 0.971471},
     {0.997611, 0.994993, 0.985170, 0.988550, 0.984575, 0.980137, 0.983108, 0.989213, 0.982980, 0.974892},
     {0.998382, 0.993396, 0.991228, 0.985886, 0.986294, 0.984360, 0.984576, 0.982661, 0.985171, 0.976053},
     {0.960273, 0.977003, 0.969185, 0.976286, 0.968094, 0.960030, 0.963742, 0.961584, 0.958860, 0.960987},
     {0.963599, 0.974097, 0.966987, 0.969740, 0.963259, 0.967598, 0.965805, 0.956172, 0.956602, 0.952624},
     {0.972728, 0.977847, 0.967728, 0.972619, 0.964594, 0.963146, 0.969756, 0.962166, 0.951969, 0.962882},
     {0.969829, 0.969725, 0.977063, 0.974834, 0.968003, 0.964580, 0.969492, 0.964887, 0.958629, 0.955403},
     {0.973389, 0.973779, 0.975107, 0.974249, 0.966117, 0.972153, 0.967311, 0.966979, 0.954373, 0.965698},
     {0.969255, 0.972308, 0.969283, 0.970873, 0.967912, 0.966098, 0.962376, 0.960134, 0.960577, 0.948101},
     {0.978859, 0.976318, 0.967862, 0.974437, 0.967339, 0.969709, 0.964550, 0.968838, 0.956814, 0.957588}},
    {{0.962222, 0.967394, 0.960425, 0.961336, 0.952520, 0.956803, 0.954177, 0.951770, 0.951544, 0.939040},
     {0.955884, 0.960977, 0.964849, 0.961413, 0.964180, 0.959439, 0.953718, 0.953725, 0.948944, 0.948985},
     {0.968826, 0.954832, 0.967134, 0.965954, 0.964235, 0.963547, 0.966856, 0.965749, 0.974808, 0.964887},
     {0.953709, 0.963057, 0.961850, 0.964505, 0.960999, 0.963581, 0.968749, 0.968274, 0.973383, 0.962258},
     {0.974781, 0.958440, 0.961645, 0.955591, 0.963848, 0.963519, 0.969362, 0.976221, 0.968969, 0.960186},
     {0.966910, 0.967128, 0.960568, 0.963945, 0.963291, 0.962398, 0.968329, 0.976340, 0.969711, 0.961142},
     {0.965689, 0.961809, 0.965012, 0.962196, 0.965368, 0.968878, 0.971290, 0.980907, 0.972397, 0.967221},
     {0.965118, 0.964508, 0.966298, 0.964930, 0.961876, 0.964035, 0.968929, 0.978084, 0.972213, 0.962728},
     {0.961173, 0.966883, 0.969079, 0.961918, 0.964229, 0.967425, 0.968565, 0.973704, 0.972806, 0.967059},
     {0.963517, 0.960871, 0.965888, 0.966871, 0.966941, 0.968070, 0.967252, 0.975391, 0.975018, 0.958185},
     {0.970870, 0.966013, 0.967781, 0.965096, 0.969196, 0.966811, 0.970286, 0.971050, 0.966540, 0.956663},
     {0.988429, 0.986722, 0.973247, 0.974868, 0.970562, 0.971083, 0.972149, 0.970939, 0.946200, 0.911670},
     {0.969343, 0.978274, 0.973828, 0.970705, 0.974690, 0.967386, 0.971566, 0.958929, 0.952901, 0.906753},
     {0.970241, 0.979471, 0.982666, 0.974886, 0.971692, 0.975130, 0.970237, 0.970452, 0.954785, 0.903594}},
    {{0.978387, 0.985947, 0.980011, 0.971272, 0.975132, 0.976171, 0.974578, 0.968620, 0.958956, 0.925621},
     {0.993198, 0.983109, 0.974072, 0.982111, 0.978746, 0.973611, 0.974014, 0.970231, 0.955673, 0.918327},
     {0.987801, 0.981283, 0.978045, 0.974012, 0.977972, 0.981224, 0.976355, 0.970509, 0.955151, 0.919902},
     {0.984500, 0.991448, 0.981502, 0.976579, 0.970902, 0.974324, 0.976824, 0.965785, 0.956504, 0.918113},
     {0.991790, 0.976923, 0.979583, 0.978047, 0.975599, 0.975985, 0.973728, 0.970022, 0.955076, 0.917961},
     {0.979743, 0.982880, 0.975900, 0.971794, 0.971597, 0.978706, 0.978226, 0.969008, 0.956982, 0.914924},
     {0.963707, 0.967963, 0.979051, 0.977741, 0.977720, 0.975356, 0.977500, 0.983453, 0.978459, 0.961293},
     {0.983473, 0.977413, 0.977168, 0.977493, 0.978982, 0.976922, 0.983620, 0.973843, 0.965863, 0.949910},
     {0.977226, 0.979284, 0.975852, 0.976573, 0.972515, 0.978847, 0.984935, 0.978168, 0.971996, 0.950960},
     {0.974468, 0.982710, 0.974731, 0.976840, 0.982297, 0.975938, 0.976966, 0.984477, 0.979265, 0.956447},
     {0.965925, 0.983297, 0.978802, 0.975151, 0.978772, 0.978147, 0.981166, 0.983249, 0.976179, 0.962745},
     {0.978117, 0.978472, 0.976489, 0.976307, 0.980585, 0.981847, 0.982496, 0.982606, 0.977758, 0.956790},
     {0.978082, 0.978186, 0.977654, 0.981590, 0.982062, 0.976828, 0.980683, 0.981261, 0.977094, 0.961183},
     {0.973684, 0.979718, 0.981317, 0.981275, 0.975928, 0.986707, 0.981181, 0.986918, 0.983239, 0.949729}},
    {{0.978436, 0.978946, 0.983226, 0.977845, 0.980782, 0.986971, 0.982729, 0.992487, 0.988346, 0.951593},
     {1.000166, 0.999011, 0.987703, 0.981846, 0.977008, 0.978463, 0.978398, 0.974288, 0.977046, 0.943364},
     {0.984483, 0.987258, 0.992549, 0.979829, 0.984091, 0.980645, 0.982583, 0.983366, 0.965445, 0.950562},
     {0.992740, 0.992640, 0.984617, 0.982651, 0.971754, 0.978367, 0.978252, 0.974336, 0.970308, 0.954229},
     {1.003225, 0.987356, 0.984072, 0.980793, 0.978434, 0.975235, 0.976889, 0.973749, 0.974533, 0.948669},
     {0.993473, 0.989637, 0.984584, 0.983589, 0.979658, 0.978858, 0.979812, 0.975075, 0.971105, 0.960071},
     {0.996481, 0.994632, 0.985092, 0.982632, 0.981124, 0.978680, 0.977405, 0.975525, 0.967582, 0.950962},
     {0.999280, 0.995338, 0.989132, 0.983413, 0.984980, 0.976750, 0.983730, 0.973535, 0.972301, 0.945189},
     {1.008039, 0.986555, 0.989070, 0.989895, 0.985186, 0.981165, 0.978711, 0.982281, 0.974452, 0.956865},
     {0.982708, 0.991997, 0.986259, 0.982495, 0.983777, 0.982255, 0.978896, 0.981858, 0.974050, 0.956500},
     {0.995157, 0.987988, 0.984534, 0.983246, 0.978002, 0.983809, 0.983537, 0.998466, 0.976126, 0.956889},
     {1.001506, 0.989093, 0.985416, 0.984104, 0.979240, 0.980812, 0.982054, 0.980730, 0.980667, 0.952385},
     {0.997569, 0.982594, 0.983958, 0.980880, 0.976156, 0.979837, 0.985645, 0.983417, 0.987758, 0.967550},
     {0.969021, 0.982768, 0.984349, 0.986713, 0.980702, 0.979450, 0.986753, 0.992533, 0.989995, 0.955848}},
    {{0.999394, 0.982518, 0.989339, 0.986323, 0.983549, 0.986060, 0.973568, 0.962133, 0.970854, 0.969852},
     {0.994866, 0.984783, 0.987604, 0.983386, 0.981955, 0.982671, 0.984357, 0.990240, 0.994004, 0.963857},
     {0.983670, 0.992241, 0.985315, 0.981612, 0.984190, 0.987884, 0.988101, 0.986760, 0.983646, 0.958974},
     {1.008216, 0.994541, 0.987890, 0.980315, 0.982018, 0.979403, 0.988319, 0.984397, 0.984844, 0.966914},
     {0.993554, 0.986522, 0.988024, 0.979258, 0.982916, 0.984331, 0.983682, 0.988441, 0.980888, 0.962786},
     {1.010380, 1.001917, 0.995685, 0.988980, 0.980908, 0.983467, 0.984659, 0.995261, 0.971100, 0.929851},
     {1.014103, 1.001269, 0.997555, 0.990632, 0.983809, 0.979785, 0.984938, 0.982673, 0.966709, 0.945459},
     {1.031519, 1.011232, 0.988275, 0.990574, 0.988977, 0.978480, 0.983730, 0.988133, 0.973932, 0.947210},
     {1.010749, 1.008569, 0.994691, 0.986435, 0.979443, 0.977252, 0.976911, 0.983163, 0.975282, 0.942395},
     {1.017765, 1.011850, 0.987872, 0.984933, 0.986723, 0.981288, 0.982689, 0.983286, 0.972623, 0.939406},
     {1.015281, 1.008003, 0.993781, 0.990168, 0.982752, 0.983343, 0.981323, 0.977771, 0.971741, 0.948384},
     {1.011108, 1.007018, 0.992528, 0.986210, 0.982344, 0.981726, 0.978887, 0.977292, 0.970873, 0.947005},
     {1.011549, 1.005490, 0.994712, 0.983057, 0.986537, 0.982096, 0.975909, 0.985087, 0.975351, 0.944573},
     {1.014325, 1.011718, 0.992984, 0.990765, 0.987328, 0.986939, 0.979328, 0.977929, 0.969284, 0.947226}}};
float bin_centering_corr_th_pim[9][14][10] = {
    {{0.985433, 0.968994, 0.962468, 0.960115, 0.957166, 0.943563, 0.954562, 0.960626, 0.983515, 1.020840},
     {0.974233, 0.970450, 0.961610, 0.956846, 0.947879, 0.945791, 0.958778, 0.970780, 0.983675, 1.016018},
     {0.978896, 0.968373, 0.974235, 0.954647, 0.945326, 0.943538, 0.953260, 0.965419, 0.978240, 1.013634},
     {0.986277, 0.976675, 0.968847, 0.954972, 0.944671, 0.951572, 0.951685, 0.956465, 0.988194, 1.009923},
     {0.982258, 0.978692, 0.967257, 0.957777, 0.949332, 0.948027, 0.954343, 0.959316, 0.982411, 1.029224},
     {0.991839, 0.975739, 0.968974, 0.957385, 0.945808, 0.946517, 0.946559, 0.958780, 0.982584, 1.012902},
     {0.988179, 0.977081, 0.970490, 0.960565, 0.951270, 0.939531, 0.948129, 0.957804, 0.981076, 1.015217},
     {1.003475, 0.995151, 0.981771, 0.969441, 0.956643, 0.951836, 0.960602, 0.974838, 0.989698, 1.028990},
     {1.010393, 0.980661, 0.978352, 0.960737, 0.941108, 0.914852, 0.902193, 0.945084, 1.045440, 1.062279},
     {0.995127, 0.968351, 0.981728, 0.965214, 0.971639, 0.961849, 0.968875, 0.961131, 0.978572, 0.981317},
     {0.987292, 0.973536, 0.979284, 0.970666, 0.963742, 0.966959, 0.964696, 0.966862, 0.970372, 1.012147},
     {0.978694, 0.980276, 0.972294, 0.963180, 0.970506, 0.967989, 0.960750, 0.965915, 0.978353, 1.018424},
     {1.001559, 0.982657, 0.969492, 0.968265, 0.965942, 0.969019, 0.967917, 0.960277, 0.976717, 1.017847},
     {1.005437, 0.977092, 0.978590, 0.972153, 0.970108, 0.958839, 0.968809, 0.966029, 0.968537, 1.005692}},
    {{0.987156, 0.959514, 0.949626, 0.951078, 0.940851, 0.937775, 0.936557, 0.941010, 0.951573, 0.974151},
     {0.974090, 0.954239, 0.956125, 0.948849, 0.943998, 0.939488, 0.941433, 0.938250, 0.952898, 0.977028},
     {0.979269, 0.965326, 0.954887, 0.955375, 0.946725, 0.944495, 0.947151, 0.941696, 0.951051, 0.980016},
     {0.984297, 0.970238, 0.961060, 0.951451, 0.945092, 0.943776, 0.953380, 0.969465, 0.969733, 0.991281},
     {0.998428, 0.959009, 0.958047, 0.964581, 0.967475, 0.957065, 0.958351, 0.961124, 0.990505, 1.014731},
     {0.975287, 0.971825, 0.966076, 0.961479, 0.968088, 0.962443, 0.963135, 0.962228, 0.990853, 1.005660},
     {0.984492, 0.963159, 0.970187, 0.970879, 0.966919, 0.960085, 0.959723, 0.966817, 0.980468, 1.006523},
     {0.976624, 0.975281, 0.968617, 0.968859, 0.965387, 0.957245, 0.967816, 0.965853, 0.985300, 1.006272},
     {0.988780, 0.965085, 0.967981, 0.975197, 0.963293, 0.965043, 0.960667, 0.960910, 0.994350, 1.020533},
     {0.984977, 0.976301, 0.966522, 0.969007, 0.965059, 0.962339, 0.962045, 0.964293, 0.993540, 0.998230},
     {0.984766, 0.979212, 0.971025, 0.970670, 0.966788, 0.963980, 0.967261, 0.967540, 0.988169, 1.020203},
     {0.981055, 0.974043, 0.971960, 0.969661, 0.967252, 0.958325, 0.958853, 0.970984, 0.989228, 1.007868},
     {1.000162, 0.973257, 0.969864, 0.974525, 0.974636, 0.970725, 0.965365, 0.971841, 0.995311, 1.019736},
     {0.982080, 0.984035, 0.971904, 0.965875, 0.967291, 0.967915, 0.960682, 0.944670, 0.948761, 0.931583}},
    {{1.000249, 0.990200, 0.989316, 0.974502, 0.979747, 0.978602, 0.971959, 0.952746, 0.951919, 0.955072},
     {0.996346, 0.981788, 0.975476, 0.984674, 0.973873, 0.971996, 0.972793, 0.961208, 0.957453, 0.963092},
     {0.992139, 0.993172, 0.984835, 0.975651, 0.976788, 0.978045, 0.975813, 0.954143, 0.955138, 0.958117},
     {1.003280, 0.992175, 0.985429, 0.976954, 0.974756, 0.979220, 0.974818, 0.964138, 0.954383, 0.955360},
     {1.010252, 0.994538, 0.984663, 0.985034, 0.977170, 0.980459, 0.970681, 0.962763, 0.956420, 0.958432},
     {0.998946, 0.988119, 0.981996, 0.984024, 0.977669, 0.979751, 0.975666, 0.961858, 0.950086, 0.951391},
     {0.998212, 0.994883, 0.992962, 0.981076, 0.980840, 0.984681, 0.974790, 0.965604, 0.957806, 0.951705},
     {1.005949, 0.996855, 0.988235, 0.982265, 0.980711, 0.981620, 0.981189, 0.963348, 0.962356, 0.952048},
     {0.992024, 0.978005, 0.972523, 0.970232, 0.971176, 0.979111, 0.974897, 0.982549, 0.988331, 1.000180},
     {1.002949, 0.976791, 0.968830, 0.969805, 0.969794, 0.977240, 0.976010, 0.976462, 0.982241, 0.982524},
     {0.979979, 0.965233, 0.971830, 0.973992, 0.973320, 0.981186, 0.980525, 0.973786, 0.981530, 0.968364},
     {0.990761, 0.982504, 0.975316, 0.974946, 0.975021, 0.975251, 0.974131, 0.978174, 0.987544, 1.000036},
     {0.997674, 0.975263, 0.972168, 0.970839, 0.974516, 0.974966, 0.975980, 0.966554, 0.984750, 0.988999},
     {0.992431, 0.967581, 0.975877, 0.969408, 0.969516, 0.970413, 0.966740, 0.971746, 0.980058, 0.984842}},
    {{0.977990, 0.964732, 0.947340, 0.951607, 0.951140, 0.952524, 0.953212, 0.950201, 0.954483, 0.954433},
     {0.978653, 0.957390, 0.957133, 0.953516, 0.951113, 0.952716, 0.953057, 0.948931, 0.954070, 0.960252},
     {0.983843, 0.963892, 0.960446, 0.954115, 0.952172, 0.951586, 0.952045, 0.955858, 0.958995, 0.967446},
     {0.999589, 0.977279, 0.971592, 0.968699, 0.959470, 0.958569, 0.951403, 0.946078, 0.938052, 0.933974},
     {1.001516, 0.986645, 0.972902, 0.964939, 0.962098, 0.956950, 0.954382, 0.945708, 0.939019, 0.940990},
     {1.012621, 0.974609, 0.972062, 0.966826, 0.956191, 0.958311, 0.959783, 0.946707, 0.935495, 0.941412},
     {1.008990, 0.983170, 0.973155, 0.968842, 0.964596, 0.960686, 0.953924, 0.946259, 0.947142, 0.935632},
     {0.993574, 0.979734, 0.970817, 0.972903, 0.962485, 0.964047, 0.951184, 0.949168, 0.945644, 0.942006},
     {0.997949, 0.983902, 0.977674, 0.972862, 0.962318, 0.963869, 0.958956, 0.954492, 0.940679, 0.942219},
     {1.003046, 0.978322, 0.977646, 0.965768, 0.962830, 0.961296, 0.960444, 0.954160, 0.945543, 0.931806},
     {1.004964, 0.982075, 0.975878, 0.971385, 0.964304, 0.962949, 0.960065, 0.949842, 0.945004, 0.938510},
     {0.998945, 0.981435, 0.975383, 0.970031, 0.959975, 0.964962, 0.961994, 0.951200, 0.949651, 0.938210},
     {0.991857, 0.986220, 0.983641, 0.987542, 0.987990, 0.984229, 0.988885, 0.993492, 0.994803, 0.988220},
     {1.003001, 0.990651, 0.978846, 0.988305, 0.989550, 0.981164, 0.994494, 0.985858, 0.984221, 0.987476}},
    {{1.004361, 0.996186, 0.980850, 0.984577, 0.979445, 0.981701, 0.976037, 0.975454, 0.988352, 0.997306},
     {1.007530, 0.985917, 0.984518, 0.984151, 0.982404, 0.987880, 0.984405, 0.982142, 0.987438, 0.990082},
     {1.002944, 0.986864, 0.986012, 0.979589, 0.986862, 0.981175, 0.987107, 0.981878, 0.988836, 0.992982},
     {1.002941, 0.991724, 0.988401, 0.984788, 0.985739, 0.985856, 0.983160, 0.983247, 0.983959, 0.998353},
     {0.999867, 0.990162, 0.987281, 0.985461, 0.986351, 0.983444, 0.987186, 0.980285, 0.990347, 0.987619},
     {1.006823, 0.989683, 0.988787, 0.989938, 0.989818, 0.985514, 0.986137, 0.986596, 0.988431, 0.999124},
     {1.001555, 0.994527, 0.993743, 0.982114, 0.985945, 0.984843, 0.986465, 0.986174, 0.990374, 0.993281},
     {0.975514, 0.962978, 0.963243, 0.960352, 0.971312, 0.964479, 0.968907, 0.969534, 0.979358, 0.989887},
     {0.968290, 0.967500, 0.956430, 0.962492, 0.962805, 0.963462, 0.972855, 0.970942, 0.975667, 0.992713},
     {0.967501, 0.961649, 0.965972, 0.967259, 0.961108, 0.965211, 0.967011, 0.976953, 0.981118, 0.992816},
     {0.964296, 0.966301, 0.963443, 0.966704, 0.967651, 0.969288, 0.971514, 0.978404, 0.978065, 0.989229},
     {0.967716, 0.965719, 0.968768, 0.968768, 0.965903, 0.969732, 0.970444, 0.974162, 0.979881, 0.987427},
     {0.969573, 0.961519, 0.963405, 0.963857, 0.968949, 0.963298, 0.969530, 0.977129, 0.976893, 0.979912},
     {0.971408, 0.971330, 0.967397, 0.963695, 0.967221, 0.970203, 0.970640, 0.972588, 0.976697, 0.980946}},
    {{0.971869, 0.958067, 0.961194, 0.956364, 0.955332, 0.958476, 0.956740, 0.961471, 0.968346, 0.974266},
     {0.963153, 0.961027, 0.959660, 0.957321, 0.957319, 0.957195, 0.962473, 0.958034, 0.967242, 0.972784},
     {0.953564, 0.956091, 0.958003, 0.961681, 0.961738, 0.973389, 0.970647, 0.973718, 0.970319, 0.990113},
     {0.950007, 0.952814, 0.959263, 0.956262, 0.964163, 0.970041, 0.976725, 0.973532, 0.967883, 0.962895},
     {0.955059, 0.951982, 0.954550, 0.957830, 0.964726, 0.978203, 0.978124, 0.974688, 0.970771, 0.981198},
     {0.948231, 0.957203, 0.956941, 0.958836, 0.966479, 0.975586, 0.978194, 0.972914, 0.974694, 0.987578},
     {0.955687, 0.954200, 0.957904, 0.965330, 0.971122, 0.976678, 0.978093, 0.968403, 0.973180, 0.980549},
     {0.953131, 0.950015, 0.962988, 0.958207, 0.970789, 0.975159, 0.978597, 0.975915, 0.977759, 0.987379},
     {0.953630, 0.950012, 0.955611, 0.960992, 0.968823, 0.976951, 0.981559, 0.980484, 0.976439, 0.969809},
     {0.941886, 0.950114, 0.952241, 0.957527, 0.970469, 0.977656, 0.984828, 0.980389, 0.978868, 0.979131},
     {0.955835, 0.952048, 0.956014, 0.964363, 0.970387, 0.975563, 0.978371, 0.979649, 0.977731, 0.977352},
     {1.007963, 0.998418, 0.984576, 0.980522, 0.969055, 0.962198, 0.960587, 0.958364, 0.952559, 0.995975},
     {1.015627, 1.000752, 0.992028, 0.983618, 0.974149, 0.958007, 0.959508, 0.950068, 0.955636, 0.963219},
     {0.992464, 1.003599, 0.993367, 0.981850, 0.979922, 0.955897, 0.955026, 0.956056, 0.965075, 0.975113}},
    {{1.018152, 1.002825, 0.995703, 0.986250, 0.974840, 0.962562, 0.953370, 0.956808, 0.958769, 0.959930},
     {1.012487, 0.999773, 0.996775, 0.986843, 0.974420, 0.961828, 0.963758, 0.958239, 0.960204, 0.968286},
     {1.019681, 1.005735, 0.992935, 0.990501, 0.975453, 0.962733, 0.958973, 0.959025, 0.962703, 0.966375},
     {1.019848, 1.010703, 0.992714, 0.986187, 0.971845, 0.964115, 0.961235, 0.962198, 0.962583, 0.961196},
     {1.023078, 0.999040, 0.992525, 0.983878, 0.977580, 0.963510, 0.957540, 0.960115, 0.963725, 0.968200},
     {1.021443, 1.004526, 0.994638, 0.984669, 0.971777, 0.961396, 0.955017, 0.960550, 0.961798, 0.954208},
     {0.986304, 0.974581, 0.979435, 0.974537, 0.974426, 0.974089, 0.973074, 0.979781, 0.969247, 0.969980},
     {0.983394, 0.968695, 0.974562, 0.973701, 0.978047, 0.975677, 0.979941, 0.981949, 0.977999, 0.980894},
     {0.976040, 0.973404, 0.978420, 0.979086, 0.979919, 0.972656, 0.979521, 0.973709, 0.979345, 0.967867},
     {0.981630, 0.973486, 0.977376, 0.981534, 0.974336, 0.979078, 0.979788, 0.981106, 0.976232, 0.968094},
     {0.980462, 0.980727, 0.977683, 0.975976, 0.978829, 0.975817, 0.979392, 0.982554, 0.976087, 0.996936},
     {0.979495, 0.982862, 0.982080, 0.980480, 0.980541, 0.979750, 0.979101, 0.979485, 0.975557, 0.956582},
     {0.989072, 0.978090, 0.980826, 0.982742, 0.982075, 0.976162, 0.977070, 0.982875, 0.981008, 0.969660},
     {0.983702, 0.989479, 0.985767, 0.980217, 0.983556, 0.977733, 0.979481, 0.982290, 0.976273, 0.963513}},
    {{0.991024, 0.990332, 0.985982, 0.986023, 0.981499, 0.981983, 0.978412, 0.983613, 0.975875, 0.956467},
     {0.998384, 0.994367, 0.990597, 0.984001, 0.974152, 0.980863, 0.980287, 0.987008, 0.982260, 1.000685},
     {1.013204, 0.991420, 0.982066, 0.975614, 0.983298, 0.982714, 0.991138, 0.986012, 0.985781, 0.967720},
     {1.009575, 0.982514, 0.975522, 0.982012, 0.975636, 0.980983, 0.987237, 0.979130, 0.985401, 0.987245},
     {0.988402, 0.992599, 0.984162, 0.978757, 0.973174, 0.979492, 0.978586, 0.983674, 0.982163, 0.986333},
     {0.998648, 0.990817, 0.987804, 0.981222, 0.976742, 0.981452, 0.984366, 0.975642, 0.980863, 1.002721},
     {1.000024, 0.987327, 0.983712, 0.984731, 0.980650, 0.982304, 0.984161, 0.983517, 0.987173, 0.996839},
     {0.998269, 0.999576, 0.984093, 0.985591, 0.982442, 0.983906, 0.982882, 0.987601, 0.982776, 0.983814},
     {1.011586, 0.994492, 0.984874, 0.981991, 0.982263, 0.984557, 0.984911, 0.987284, 0.978897, 0.988063},
     {0.997230, 0.993443, 0.992206, 0.983834, 0.981551, 0.984259, 0.983144, 0.985027, 0.985221, 0.976889},
     {1.061648, 1.007014, 0.980626, 0.984223, 0.989176, 0.979849, 0.979991, 0.987060, 0.971272, 0.975922},
     {1.034321, 1.001736, 0.976926, 0.986546, 0.982770, 0.986367, 0.986862, 0.987596, 0.985996, 0.997895},
     {1.064545, 1.002408, 0.977566, 0.981765, 0.982975, 0.985443, 0.979321, 0.982249, 0.981927, 1.003205},
     {1.046791, 1.005347, 0.985021, 0.981734, 0.982446, 0.985063, 0.981308, 0.980685, 0.988736, 0.980471}},
    {{1.036468, 1.002094, 0.987510, 0.982277, 0.981096, 0.984215, 0.972699, 0.979048, 0.968362, 1.010212},
     {1.037473, 1.004864, 0.987047, 0.982131, 0.977505, 0.986155, 0.990241, 0.987883, 0.986820, 0.991972},
     {1.036045, 1.011724, 0.988352, 0.989009, 0.984650, 0.983010, 0.978240, 0.978028, 0.987553, 0.979373},
     {1.044051, 1.001083, 0.987685, 0.985666, 0.982291, 0.984010, 0.982648, 0.984652, 0.983184, 0.999948},
     {1.031992, 1.006305, 0.988787, 0.980893, 0.980990, 0.990056, 0.982556, 0.984941, 0.976517, 0.974868},
     {1.008716, 1.002321, 0.986761, 0.986383, 0.996265, 0.978988, 0.988262, 0.988467, 0.992373, 1.021321},
     {1.015262, 1.002050, 0.989397, 0.986092, 0.985895, 0.988842, 0.991792, 0.986055, 0.993633, 1.026029},
     {1.034075, 1.000115, 0.989964, 0.988470, 0.993264, 0.993060, 0.988195, 0.994370, 1.002829, 1.024476},
     {1.013150, 0.995800, 0.990864, 0.989470, 0.984996, 0.983295, 0.990602, 0.988771, 0.996531, 1.018050},
     {1.028220, 0.989249, 0.982944, 0.988549, 0.983163, 0.988183, 0.989946, 0.992823, 1.002536, 1.012505},
     {1.014717, 0.999772, 0.981839, 0.989973, 0.985081, 0.988994, 0.985755, 0.991326, 1.000236, 1.007853},
     {1.013205, 0.995906, 0.985269, 0.981385, 0.986979, 0.987931, 0.991445, 0.994317, 0.998118, 1.012548},
     {1.024679, 0.993923, 0.986940, 0.985640, 0.986146, 0.988561, 0.986213, 0.990845, 0.994645, 0.991076},
     {1.034975, 0.996574, 0.988040, 0.984477, 0.991689, 0.988329, 0.993825, 0.995315, 0.998180, 0.999845}}};

/// alpha bc correction factors  ////////////////////////////////////////////////////////////////////////////////
float bin_centering_corr_alpha_prot[9][14][10] = {
    {{0.883196, 0.959736, 0.974272, 0.986136, 0.989560, 0.999938, 0.978744, 0.971526, 0.970821, 0.978954},
     {0.866133, 0.974344, 0.964186, 0.969537, 1.001063, 1.008892, 0.988355, 0.973698, 0.973279, 0.981360},
     {0.871064, 0.964841, 0.972822, 0.978707, 1.002491, 1.006910, 0.977903, 0.972726, 0.982056, 0.975077},
     {0.868424, 0.962983, 0.971737, 0.975304, 0.986857, 0.993657, 0.980219, 0.972812, 0.970794, 0.986442},
     {0.876695, 0.961173, 0.967446, 0.982946, 0.991354, 0.992807, 0.975458, 0.972983, 0.978750, 0.977258},
     {0.879674, 0.969160, 0.976986, 0.965436, 0.990077, 0.994182, 0.975176, 0.973185, 0.972765, 0.984969},
     {0.886305, 0.975485, 0.962262, 0.960125, 0.983279, 0.987032, 0.966718, 0.964785, 0.975347, 0.982203},
     {0.885690, 0.979093, 0.973683, 0.990670, 1.000876, 0.999361, 0.990895, 0.982571, 0.982134, 0.993970},
     {0.890078, 0.966805, 0.930974, 0.946582, 1.017889, 1.023633, 0.952569, 0.940285, 0.978879, 0.987540},
     {0.920863, 0.987278, 0.980081, 0.966404, 0.988638, 0.984980, 0.983414, 0.972220, 0.986787, 0.997951},
     {0.906224, 0.983734, 0.983316, 0.979614, 0.990997, 0.982347, 0.978962, 0.978658, 0.993037, 1.005884},
     {0.908182, 0.982362, 0.983832, 0.982345, 0.982257, 0.987696, 0.984555, 0.982902, 0.987385, 1.001638},
     {0.915212, 0.984895, 0.989988, 0.977251, 0.973330, 0.978686, 0.980660, 0.981757, 0.993702, 1.007911},
     {0.918505, 0.984422, 0.981682, 0.975818, 0.980240, 0.986416, 0.976796, 0.973227, 0.994817, 1.002380}},
    {{0.892062, 0.975101, 0.970633, 0.971844, 0.989540, 0.984339, 0.977313, 0.975348, 0.986536, 0.998272},
     {0.882992, 0.973961, 0.970211, 0.977845, 0.990442, 0.991041, 0.968930, 0.976008, 0.991525, 1.003943},
     {0.888793, 0.982118, 0.973924, 0.977236, 0.992157, 0.994527, 0.973121, 0.975210, 0.980542, 1.009751},
     {0.892695, 0.973714, 0.973922, 0.981750, 0.981277, 0.987092, 0.984651, 0.968450, 0.992088, 1.005149},
     {0.895874, 0.976145, 0.989297, 1.000182, 1.018600, 1.017449, 0.992245, 0.995047, 0.997258, 1.002538},
     {0.893808, 0.983548, 0.996016, 0.996474, 1.012108, 1.014898, 0.995691, 1.001479, 0.991576, 1.004287},
     {0.896966, 0.996718, 0.998480, 0.994728, 1.015847, 1.013697, 0.991433, 0.995315, 0.998709, 1.005313},
     {0.897809, 0.994373, 1.002919, 0.995077, 1.009127, 1.012325, 0.998282, 0.999597, 0.996312, 1.004662},
     {0.905574, 0.996902, 1.000489, 0.993459, 1.015985, 1.018254, 0.991423, 0.997995, 1.005567, 0.995372},
     {0.915736, 0.985217, 0.991698, 0.996155, 1.013874, 1.006952, 0.994209, 0.997850, 0.992458, 1.006225},
     {0.914617, 0.995961, 0.999130, 0.999405, 1.012779, 1.009806, 0.992472, 1.002369, 1.001269, 1.001671},
     {0.917442, 0.988142, 0.999170, 1.002568, 1.008037, 1.007981, 0.997787, 1.003376, 0.998479, 1.007549},
     {0.915625, 1.000018, 1.000977, 1.002106, 1.012389, 1.012895, 1.004581, 1.001426, 0.996998, 1.012245},
     {0.932152, 0.990658, 0.986288, 0.984628, 0.967055, 0.976680, 0.979372, 0.993020, 0.998248, 1.030306}},
    {{0.900491, 0.983750, 0.980864, 0.975905, 0.974197, 0.973781, 0.981179, 0.981147, 0.994509, 1.014001},
     {0.906990, 0.987341, 0.979847, 0.980795, 0.980732, 0.986201, 0.978918, 0.990168, 0.995322, 1.012078},
     {0.896160, 0.987912, 0.988067, 0.973043, 0.979975, 0.973226, 0.979424, 0.981206, 0.997115, 1.019491},
     {0.905748, 0.978575, 0.982847, 0.981774, 0.977390, 0.972410, 0.979343, 0.981917, 0.989844, 1.014734},
     {0.901568, 0.982513, 0.980572, 0.981373, 0.985032, 0.980824, 0.984629, 0.982364, 0.989673, 1.020861},
     {0.898883, 0.984328, 0.989151, 0.989313, 0.981077, 0.980202, 0.988997, 0.991642, 0.994979, 1.013933},
     {0.908486, 0.990659, 0.987754, 0.994542, 0.980700, 0.986684, 0.988494, 0.989670, 0.990593, 1.013608},
     {0.909866, 0.980107, 0.982513, 0.989519, 0.983257, 0.977779, 0.991223, 0.987438, 0.995255, 1.018158},
     {0.894752, 0.974029, 0.991410, 1.001592, 1.002011, 1.009432, 0.988608, 0.991147, 0.980970, 0.982087},
     {0.899030, 0.972085, 0.985696, 0.990842, 1.002529, 1.007233, 0.989623, 0.989054, 0.984719, 0.996210},
     {0.894539, 0.970040, 0.985762, 0.986230, 0.998018, 1.011279, 0.995522, 0.975358, 0.979279, 0.988490},
     {0.899228, 0.979312, 0.989124, 0.988611, 0.995627, 0.999139, 0.989896, 0.990001, 0.976577, 0.992332},
     {0.894973, 0.978796, 0.981962, 0.988065, 0.995490, 0.992521, 0.986547, 0.986024, 0.983153, 0.996432},
     {0.908686, 0.970343, 0.982894, 0.980122, 0.990969, 0.995016, 0.992330, 0.983858, 0.976546, 0.999538}},
    {{0.877863, 0.965795, 0.973874, 0.976684, 0.992960, 0.996305, 0.979403, 0.977112, 0.971816, 0.985087},
     {0.878862, 0.964441, 0.976348, 0.978664, 0.996204, 0.987092, 0.978256, 0.982322, 0.984124, 0.986723},
     {0.882503, 0.969699, 0.971181, 0.978835, 0.991962, 0.994491, 0.978992, 0.977163, 0.978999, 0.990069},
     {0.889033, 0.969444, 0.998903, 0.971893, 0.981948, 0.982386, 0.990369, 0.988990, 0.982232, 1.001596},
     {0.893073, 0.983605, 0.990672, 0.984285, 0.979908, 0.984788, 0.982123, 0.990273, 0.982150, 1.002382},
     {0.895564, 0.982519, 0.985122, 0.993112, 0.987515, 0.976268, 0.991469, 0.981789, 0.993139, 1.005641},
     {0.899413, 0.988249, 0.985965, 0.985108, 0.990533, 0.981819, 0.982676, 0.980159, 0.989756, 1.008629},
     {0.899220, 0.979886, 0.990334, 0.980430, 0.984314, 0.986472, 0.984056, 0.988361, 0.990107, 0.997737},
     {0.905194, 0.981863, 0.987016, 0.983967, 0.990009, 0.984728, 0.982162, 0.994091, 0.997272, 1.003975},
     {0.910807, 0.988756, 0.989584, 0.978872, 0.982072, 0.987437, 0.986879, 0.993290, 0.994852, 1.009004},
     {0.911933, 0.986097, 0.987820, 0.985795, 0.982087, 0.983906, 0.983127, 0.990180, 0.992338, 0.999984},
     {0.914872, 0.986426, 0.991300, 0.982242, 0.984060, 0.981788, 0.979262, 0.992036, 0.988863, 1.006039},
     {0.927185, 1.006871, 1.008141, 1.005967, 1.009938, 1.018934, 1.012388, 1.005391, 1.005037, 1.019653},
     {0.932081, 1.011928, 1.012110, 1.017967, 1.012410, 1.018385, 1.004517, 1.008976, 1.009808, 1.026689}},
    {{0.907653, 0.998731, 0.991377, 1.011073, 1.019668, 1.025943, 1.006270, 1.006968, 1.005497, 1.019694},
     {0.900611, 1.003872, 1.009173, 1.008783, 1.023588, 1.018661, 1.008073, 1.003955, 1.012026, 1.021914},
     {0.908730, 0.999430, 1.016059, 1.012818, 1.024272, 1.023357, 1.008927, 1.009105, 1.011707, 1.012686},
     {0.907698, 0.997076, 1.007499, 1.009833, 1.015571, 1.017427, 1.012900, 1.010344, 1.006228, 1.019255},
     {0.904884, 1.001648, 1.010836, 1.012826, 1.014783, 1.012482, 1.016442, 1.011186, 1.007627, 1.017073},
     {0.913843, 0.995204, 1.009657, 1.013214, 1.015024, 1.019038, 1.014403, 1.015122, 1.009609, 1.022214},
     {0.908563, 1.003176, 1.015216, 1.016756, 1.022271, 1.017205, 1.012922, 1.013410, 1.009763, 1.017806},
     {0.887829, 0.989523, 0.986207, 0.996030, 1.008008, 0.999042, 0.993652, 0.990570, 0.992588, 1.000588},
     {0.896588, 0.987626, 0.995933, 0.992525, 1.005027, 0.999649, 0.991594, 0.997097, 0.984571, 0.994685},
     {0.905850, 0.980177, 0.988634, 0.984360, 1.003478, 0.994704, 0.992396, 0.992118, 0.993100, 1.002003},
     {0.902296, 0.991577, 0.997193, 0.989578, 1.003452, 0.999511, 0.992702, 0.996637, 0.990944, 0.997858},
     {0.904746, 0.992425, 0.991893, 0.995274, 1.006413, 0.999130, 0.997220, 0.992898, 0.990367, 0.998128},
     {0.900578, 0.986591, 0.994288, 1.000403, 1.002616, 0.997746, 0.992482, 0.990528, 0.996077, 0.997751},
     {0.914120, 0.987199, 0.991204, 0.997039, 1.002380, 1.000909, 0.992963, 0.994020, 0.994593, 0.999112}},
    {{0.887553, 0.978479, 0.981299, 0.989066, 1.009243, 1.011369, 0.989041, 0.986536, 0.989138, 0.991848},
     {0.886120, 0.982958, 0.983882, 0.990176, 1.007913, 0.999768, 0.990390, 0.988816, 0.987963, 1.000350},
     {0.894948, 0.991378, 0.990483, 0.989467, 1.008361, 1.001558, 1.001302, 0.990459, 0.999628, 1.002825},
     {0.888423, 0.985213, 0.995390, 0.991579, 1.001861, 1.003087, 0.994001, 0.994749, 1.004302, 1.004515},
     {0.895165, 0.986977, 1.003440, 0.988213, 1.004025, 1.004326, 0.993611, 1.001995, 0.995902, 1.008593},
     {0.897473, 0.989616, 0.997188, 0.991344, 1.005487, 1.000433, 0.997110, 1.004683, 1.005585, 1.005514},
     {0.900605, 0.993960, 1.002337, 0.996243, 0.999146, 1.002125, 0.996035, 1.002338, 0.998920, 1.001316},
     {0.897754, 0.999059, 1.002255, 0.997695, 1.006966, 1.005881, 0.997010, 1.001569, 1.007432, 1.001039},
     {0.903200, 0.997387, 1.005157, 0.996500, 1.002150, 1.011152, 0.993155, 1.002430, 1.002377, 0.996019},
     {0.911960, 0.994068, 0.996534, 0.997398, 0.998417, 1.003590, 0.994414, 1.000529, 1.003414, 1.001655},
     {0.913675, 0.990445, 0.999770, 0.997541, 1.006037, 1.006894, 0.995636, 1.000466, 1.001999, 1.002703},
     {0.929158, 0.996511, 0.996471, 0.998896, 1.003474, 1.001190, 0.993065, 0.997684, 1.016110, 1.011300},
     {0.929952, 0.989505, 0.996382, 0.991494, 1.010583, 1.002929, 0.993868, 0.997633, 1.004406, 1.016226},
     {0.937578, 1.003398, 0.999108, 0.999769, 1.007930, 1.003210, 0.990122, 1.013674, 1.004495, 1.017191}},
    {{0.907463, 0.992976, 0.994492, 0.983892, 1.006050, 0.999414, 0.987486, 0.994142, 1.000569, 1.024079},
     {0.902052, 0.990151, 0.991520, 0.997179, 1.008737, 1.003028, 0.988780, 0.997707, 1.003553, 1.016813},
     {0.902712, 0.992714, 0.994140, 0.997911, 1.005643, 1.008443, 0.997258, 0.994001, 1.009019, 1.017999},
     {0.899848, 0.985532, 0.995559, 0.989553, 1.012034, 1.005719, 0.991869, 0.995128, 1.000622, 1.017912},
     {0.908197, 0.983981, 0.994731, 0.989366, 1.002058, 1.005021, 0.991085, 0.997545, 0.998540, 1.016985},
     {0.906215, 0.992701, 0.995219, 0.988344, 1.005181, 0.997866, 0.994454, 1.001202, 1.007250, 1.015376},
     {0.900505, 0.996662, 1.003668, 0.986522, 0.998101, 0.995360, 0.998000, 0.997020, 1.002575, 1.019918},
     {0.901023, 0.995971, 1.001448, 1.003564, 0.996369, 1.003680, 0.989437, 1.008069, 1.008914, 0.997122},
     {0.902731, 0.996768, 1.005836, 0.998030, 0.993886, 1.005014, 0.998976, 1.002258, 0.999598, 0.999754},
     {0.912833, 1.004559, 1.002761, 0.996139, 1.002539, 0.999387, 0.996022, 1.004677, 1.008262, 1.008221},
     {0.914872, 1.007185, 1.004577, 0.994607, 1.000789, 1.002491, 0.998000, 1.006431, 1.003453, 1.013021},
     {0.915214, 0.994746, 1.004857, 0.996953, 0.998073, 0.998639, 0.996830, 1.008122, 1.007466, 1.012406},
     {0.920034, 0.999527, 1.005622, 0.999468, 1.004930, 0.999804, 0.996889, 1.009781, 1.005769, 1.014831},
     {0.925943, 1.002174, 1.005007, 0.992956, 1.000783, 0.999907, 0.997951, 1.012349, 1.006664, 1.011335}},
    {{0.899629, 0.994961, 0.999093, 0.995357, 1.004204, 1.002494, 0.993876, 1.003199, 1.012134, 1.008420},
     {0.896138, 0.983656, 0.995269, 1.007849, 1.008773, 1.007939, 1.001443, 0.989506, 0.994955, 1.013060},
     {0.903411, 0.979961, 0.998134, 1.001132, 1.005038, 1.001027, 1.003078, 1.004948, 0.999008, 1.011364},
     {0.895655, 0.989648, 0.998612, 0.995995, 0.993732, 1.006571, 0.998819, 0.997962, 0.993697, 1.013168},
     {0.896702, 0.988573, 0.998763, 0.998631, 1.001755, 0.998526, 0.987628, 0.998670, 0.993432, 1.011180},
     {0.900964, 0.983646, 0.995233, 0.996449, 1.009268, 1.000710, 0.998461, 0.998627, 0.998438, 1.006145},
     {0.902916, 0.988676, 0.994057, 0.998527, 1.004152, 1.002376, 0.996562, 1.000416, 1.000979, 1.005325},
     {0.905588, 0.988991, 1.001503, 0.998001, 1.006875, 1.013813, 1.001110, 1.002899, 0.998770, 1.002566},
     {0.913513, 0.992144, 0.994702, 0.994249, 1.004035, 1.004922, 0.996554, 1.001969, 1.000419, 1.012739},
     {0.919157, 0.996156, 1.005271, 0.995662, 1.005630, 1.009807, 0.996091, 1.006245, 1.000187, 1.014431},
     {0.942126, 0.997805, 1.006168, 0.992736, 0.986867, 0.996409, 0.998011, 1.009618, 0.999399, 1.021848},
     {0.933955, 0.994322, 1.004509, 0.996747, 1.003518, 1.000425, 0.998078, 1.008688, 0.996532, 1.021691},
     {0.927427, 0.994334, 1.001379, 0.998539, 0.993560, 0.992562, 0.993008, 1.012818, 0.992387, 1.027393},
     {0.928853, 1.003780, 0.997899, 0.998075, 0.997444, 1.000712, 0.997166, 1.004843, 1.003695, 1.028097}},
    {{0.898296, 0.983294, 0.983864, 0.998040, 1.001509, 1.000829, 0.993359, 0.988610, 1.001970, 1.017741},
     {0.904639, 0.982135, 0.989181, 0.994339, 0.999572, 1.000033, 0.995967, 0.985461, 0.999774, 1.017339},
     {0.908401, 0.992363, 0.989434, 0.992690, 1.001763, 0.999165, 0.995968, 0.993151, 1.002410, 1.022462},
     {0.902212, 0.985224, 0.992032, 0.995146, 1.001090, 0.998175, 1.001416, 1.002554, 0.991280, 1.023056},
     {0.910256, 0.985700, 0.994662, 0.995546, 0.995726, 0.995178, 0.992558, 0.997069, 1.002251, 1.018623},
     {0.899133, 0.986581, 0.996725, 0.996002, 1.006645, 1.005198, 0.999768, 0.992409, 1.000283, 1.006946},
     {0.898812, 0.990729, 0.995106, 1.004651, 1.010902, 1.017257, 0.994183, 0.996627, 0.996478, 1.007492},
     {0.909857, 0.989483, 0.997980, 0.994363, 1.014276, 1.016001, 1.007135, 1.001078, 0.992448, 1.019051},
     {0.905545, 0.997463, 0.994703, 1.001438, 1.015151, 1.019598, 0.995012, 0.994826, 0.997514, 1.003124},
     {0.916870, 0.996282, 0.999770, 0.997972, 1.019422, 1.011542, 0.998640, 0.999032, 0.999090, 1.011494},
     {0.919288, 1.000326, 0.997695, 1.002802, 1.012357, 1.019488, 0.999086, 1.005163, 0.998445, 1.004119},
     {0.912561, 0.993834, 0.996545, 0.996751, 1.017029, 1.009583, 1.001104, 1.001355, 0.996210, 1.009273},
     {0.918116, 0.997593, 0.995941, 1.001345, 1.009895, 1.007334, 1.000396, 0.998535, 1.001983, 1.005236},
     {0.922218, 0.990534, 1.002605, 0.993883, 1.009403, 1.013273, 1.008887, 0.999961, 0.999289, 1.011056}}};

float bin_centering_corr_alpha_pip[9][14][10] = {
    {{0.977704, 0.930986, 0.921659, 0.961013, 0.982497, 0.981464, 0.952703, 0.918584, 0.929256, 0.979623},
     {0.974442, 0.931659, 0.918989, 0.954897, 0.979876, 0.983724, 0.945132, 0.918710, 0.935431, 0.981497},
     {0.979581, 0.933304, 0.916370, 0.962354, 0.985454, 0.979810, 0.950040, 0.917428, 0.929695, 0.969422},
     {0.978894, 0.925871, 0.917120, 0.950558, 0.985423, 0.984175, 0.951666, 0.920264, 0.922206, 0.978945},
     {0.978600, 0.922413, 0.922820, 0.950255, 0.986979, 0.983045, 0.953035, 0.922632, 0.933612, 0.982311},
     {0.977447, 0.928950, 0.922816, 0.952284, 0.980912, 0.978760, 0.953247, 0.919102, 0.927575, 0.972865},
     {0.979202, 0.929094, 0.925312, 0.957228, 0.981138, 0.976139, 0.953534, 0.920388, 0.924216, 0.971651},
     {0.985164, 0.935501, 0.928880, 0.961020, 0.991130, 0.993933, 0.970404, 0.931939, 0.940075, 0.983190},
     {1.001554, 0.881826, 0.881603, 0.962184, 0.991022, 1.002848, 0.959148, 0.891408, 0.882494, 0.998303},
     {0.961293, 0.957505, 0.964084, 0.965250, 0.971507, 0.979536, 0.961787, 0.957274, 0.952441, 0.965003},
     {0.962913, 0.960355, 0.962783, 0.971233, 0.967404, 0.964199, 0.969947, 0.966797, 0.958974, 0.959598},
     {0.966066, 0.953576, 0.965674, 0.959706, 0.968559, 0.966066, 0.974505, 0.959138, 0.954973, 0.970387},
     {0.967746, 0.956346, 0.959798, 0.967617, 0.978022, 0.967291, 0.968274, 0.962985, 0.957725, 0.969076},
     {0.963100, 0.955489, 0.963025, 0.969320, 0.975846, 0.967399, 0.971033, 0.961509, 0.957339, 0.966931}},
    {{0.941842, 0.933609, 0.932236, 0.939572, 0.946171, 0.945639, 0.945117, 0.939214, 0.928180, 0.941151},
     {0.941105, 0.927914, 0.944110, 0.939299, 0.949479, 0.948116, 0.943651, 0.937335, 0.930174, 0.946055},
     {0.942443, 0.939401, 0.941646, 0.946464, 0.953030, 0.955571, 0.951678, 0.941108, 0.939078, 0.943940},
     {0.960104, 0.939515, 0.941724, 0.949748, 0.954386, 0.957006, 0.945184, 0.943946, 0.940802, 0.965898},
     {0.957250, 0.953279, 0.956375, 0.959323, 0.970766, 0.962332, 0.955892, 0.952718, 0.943952, 0.968109},
     {0.966367, 0.951473, 0.957564, 0.960195, 0.962974, 0.962821, 0.962315, 0.960731, 0.954082, 0.966717},
     {0.962702, 0.954804, 0.955070, 0.964289, 0.965869, 0.961605, 0.962092, 0.962370, 0.956061, 0.963601},
     {0.961125, 0.954358, 0.963531, 0.968417, 0.964627, 0.970129, 0.964636, 0.959136, 0.955801, 0.960827},
     {0.967420, 0.953761, 0.959827, 0.966071, 0.965366, 0.964473, 0.960661, 0.953180, 0.956518, 0.969945},
     {0.958893, 0.959658, 0.962207, 0.958924, 0.973198, 0.964241, 0.966518, 0.958523, 0.953571, 0.963072},
     {0.966284, 0.961361, 0.957711, 0.963946, 0.970215, 0.972197, 0.961849, 0.961975, 0.956720, 0.963267},
     {0.968151, 0.954915, 0.960141, 0.964959, 0.970693, 0.970133, 0.959750, 0.961622, 0.950374, 0.964846},
     {0.971898, 0.961622, 0.967597, 0.969433, 0.968938, 0.974108, 0.968246, 0.967516, 0.964507, 0.971352},
     {0.948388, 0.955944, 0.953908, 0.953013, 0.970537, 0.971868, 0.961636, 0.957784, 0.953709, 0.954771}},
    {{0.950475, 0.962683, 0.962858, 0.966940, 0.980762, 0.983355, 0.972257, 0.966090, 0.969497, 0.954579},
     {0.951527, 0.971560, 0.961999, 0.974990, 0.979087, 0.970965, 0.964802, 0.966859, 0.969629, 0.963529},
     {0.953296, 0.973631, 0.972078, 0.966243, 0.979837, 0.978523, 0.973035, 0.966833, 0.964737, 0.954591},
     {0.966876, 0.971048, 0.970405, 0.970025, 0.982206, 0.979780, 0.965403, 0.963909, 0.968240, 0.965078},
     {0.961044, 0.966954, 0.969007, 0.970535, 0.982939, 0.986100, 0.970882, 0.969736, 0.970296, 0.961914},
     {0.961847, 0.972336, 0.972649, 0.966546, 0.976827, 0.982395, 0.970853, 0.967276, 0.966745, 0.962530},
     {0.970570, 0.968891, 0.971179, 0.974317, 0.989101, 0.986544, 0.970496, 0.961604, 0.971476, 0.967756},
     {0.968330, 0.974325, 0.974412, 0.978700, 0.985522, 0.984843, 0.975491, 0.974220, 0.971376, 0.962939},
     {0.988768, 0.967136, 0.946862, 0.971800, 0.965503, 0.969852, 0.960036, 0.959444, 0.975853, 0.987705},
     {0.982469, 0.958875, 0.960438, 0.962123, 0.972182, 0.973226, 0.957345, 0.961960, 0.970252, 0.990610},
     {0.973099, 0.966795, 0.957490, 0.968116, 0.972447, 0.971217, 0.960589, 0.958103, 0.967881, 0.987248},
     {0.987160, 0.965745, 0.952901, 0.966236, 0.978657, 0.975674, 0.961607, 0.962909, 0.970196, 0.980194},
     {0.983184, 0.968906, 0.955494, 0.962319, 0.973359, 0.977336, 0.959289, 0.955651, 0.964183, 0.984797},
     {0.983742, 0.964359, 0.954555, 0.958223, 0.969785, 0.969686, 0.966967, 0.955129, 0.961567, 0.972098}},
    {{0.952854, 0.945149, 0.932334, 0.940129, 0.955348, 0.955073, 0.938258, 0.934004, 0.943412, 0.957457},
     {0.955091, 0.945048, 0.937949, 0.945426, 0.957939, 0.957056, 0.944398, 0.934267, 0.950335, 0.957900},
     {0.958309, 0.945430, 0.938786, 0.945819, 0.963250, 0.958430, 0.938719, 0.936654, 0.943259, 0.963859},
     {0.944067, 0.949144, 0.951092, 0.961485, 0.967348, 0.969898, 0.963423, 0.953227, 0.941802, 0.937859},
     {0.946397, 0.950267, 0.948393, 0.960915, 0.977458, 0.968648, 0.958219, 0.951245, 0.947354, 0.941868},
     {0.941950, 0.954147, 0.953970, 0.959577, 0.966765, 0.969184, 0.963935, 0.953543, 0.953377, 0.938557},
     {0.947932, 0.950377, 0.959878, 0.959665, 0.978673, 0.974003, 0.957739, 0.952432, 0.947642, 0.947430},
     {0.944428, 0.951278, 0.951818, 0.958037, 0.975846, 0.973177, 0.964145, 0.950404, 0.948039, 0.939536},
     {0.945873, 0.950500, 0.956365, 0.961959, 0.978865, 0.979941, 0.962761, 0.950895, 0.953695, 0.946328},
     {0.942914, 0.955448, 0.951446, 0.960349, 0.971534, 0.975573, 0.958848, 0.955493, 0.951226, 0.955640},
     {0.947681, 0.946685, 0.954886, 0.962339, 0.978359, 0.975664, 0.963817, 0.951721, 0.952214, 0.948857},
     {0.945644, 0.956098, 0.953886, 0.960997, 0.976305, 0.973414, 0.958868, 0.957541, 0.954074, 0.951404},
     {0.990592, 0.975379, 0.984346, 0.977432, 0.981382, 0.976933, 0.978377, 0.980600, 0.987211, 0.994708},
     {0.983421, 0.980655, 0.981407, 0.982508, 0.978714, 0.990121, 0.974720, 0.976589, 0.981358, 0.989924}},
    {{0.986517, 0.974336, 0.970908, 0.973527, 0.979523, 0.982567, 0.973464, 0.968061, 0.975642, 0.977174},
     {0.986301, 0.982113, 0.974980, 0.972172, 0.983660, 0.978835, 0.974190, 0.978948, 0.976258, 0.984755},
     {0.985676, 0.983564, 0.976528, 0.973226, 0.982976, 0.986391, 0.972659, 0.979938, 0.979790, 0.981444},
     {0.986841, 0.977574, 0.980654, 0.971496, 0.983100, 0.986723, 0.976361, 0.975929, 0.985162, 0.981665},
     {0.984173, 0.978317, 0.975896, 0.976254, 0.988571, 0.985257, 0.977203, 0.982886, 0.975236, 0.981474},
     {0.987280, 0.985272, 0.977870, 0.980580, 0.986396, 0.984188, 0.976191, 0.981861, 0.985636, 0.986800},
     {0.984826, 0.980969, 0.978720, 0.978642, 0.986830, 0.985155, 0.980287, 0.981795, 0.984243, 0.988099},
     {0.966276, 0.967007, 0.967684, 0.954464, 0.957983, 0.966034, 0.961077, 0.961698, 0.954174, 0.961878},
     {0.970249, 0.965073, 0.961355, 0.959752, 0.964568, 0.966517, 0.952250, 0.959978, 0.967129, 0.963292},
     {0.966886, 0.966792, 0.962919, 0.956784, 0.968661, 0.963485, 0.961052, 0.967875, 0.968573, 0.966439},
     {0.973810, 0.966247, 0.966175, 0.958258, 0.958435, 0.965614, 0.966447, 0.962295, 0.970261, 0.967039},
     {0.965831, 0.967528, 0.965923, 0.964402, 0.965645, 0.969415, 0.963911, 0.962176, 0.967693, 0.966889},
     {0.966016, 0.968901, 0.959977, 0.956376, 0.959166, 0.964317, 0.959054, 0.963608, 0.965500, 0.967553},
     {0.967950, 0.969617, 0.963278, 0.960987, 0.961815, 0.972657, 0.962556, 0.962966, 0.968092, 0.965175}},
    {{0.956049, 0.957038, 0.953380, 0.944285, 0.958720, 0.957417, 0.954584, 0.950500, 0.957121, 0.957211},
     {0.956845, 0.951491, 0.954766, 0.952041, 0.957807, 0.959166, 0.954508, 0.954559, 0.954551, 0.956497},
     {0.975665, 0.971553, 0.958867, 0.954217, 0.951015, 0.951568, 0.948895, 0.966048, 0.973350, 0.975396},
     {0.970809, 0.975188, 0.965527, 0.953470, 0.942388, 0.942379, 0.956246, 0.971638, 0.971732, 0.977746},
     {0.978977, 0.971051, 0.962238, 0.949036, 0.949949, 0.943759, 0.954188, 0.961985, 0.970507, 0.980644},
     {0.970540, 0.969522, 0.969554, 0.957343, 0.949673, 0.948085, 0.945259, 0.972808, 0.971001, 0.978715},
     {0.975585, 0.971555, 0.975144, 0.960175, 0.949055, 0.945692, 0.949092, 0.975152, 0.976212, 0.975069},
     {0.978938, 0.974665, 0.967468, 0.959549, 0.953721, 0.945468, 0.958589, 0.962253, 0.973724, 0.979030},
     {0.981615, 0.977112, 0.971399, 0.955506, 0.950131, 0.947295, 0.954488, 0.972641, 0.976508, 0.974080},
     {0.975033, 0.973451, 0.972784, 0.953557, 0.947906, 0.947641, 0.954778, 0.973430, 0.973571, 0.983464},
     {0.978943, 0.977741, 0.970606, 0.956723, 0.955044, 0.954549, 0.955825, 0.973200, 0.971199, 0.976269},
     {0.956834, 0.939886, 0.959704, 0.980154, 0.989320, 0.995126, 0.987516, 0.953782, 0.952065, 0.947339},
     {0.959266, 0.942072, 0.957082, 0.969614, 0.996374, 1.001190, 0.971611, 0.954696, 0.940522, 0.948841},
     {0.949845, 0.946422, 0.965467, 0.976838, 0.996313, 0.997432, 0.978489, 0.961288, 0.951673, 0.950775}},
    {{0.951693, 0.947285, 0.959041, 0.987604, 0.999052, 0.995432, 0.977630, 0.961737, 0.947229, 0.954067},
     {0.952572, 0.943657, 0.961628, 0.983498, 0.999355, 0.999921, 0.984472, 0.961613, 0.944791, 0.956434},
     {0.952425, 0.947149, 0.961053, 0.986838, 1.002923, 1.000445, 0.984180, 0.958449, 0.950559, 0.954119},
     {0.956772, 0.944907, 0.965329, 0.983223, 0.997857, 1.001995, 0.983918, 0.964387, 0.949075, 0.948258},
     {0.956228, 0.950986, 0.964063, 0.985816, 1.002581, 1.001709, 0.979677, 0.964607, 0.943970, 0.956947},
     {0.952308, 0.945827, 0.963691, 0.982147, 1.000092, 0.999464, 0.980051, 0.963337, 0.949924, 0.949445},
     {0.967046, 0.971442, 0.966264, 0.974575, 0.967207, 0.975673, 0.962652, 0.972856, 0.972902, 0.977066},
     {0.972618, 0.977305, 0.973825, 0.977066, 0.963083, 0.966307, 0.967511, 0.972195, 0.974205, 0.980189},
     {0.982982, 0.972254, 0.977846, 0.974686, 0.967833, 0.967725, 0.981242, 0.974404, 0.973569, 0.979536},
     {0.976363, 0.971315, 0.976267, 0.978941, 0.972464, 0.970436, 0.973324, 0.971420, 0.976877, 0.977335},
     {0.979809, 0.972840, 0.976505, 0.974549, 0.974495, 0.971526, 0.971308, 0.978961, 0.975327, 0.985678},
     {0.970629, 0.980462, 0.977642, 0.978602, 0.971363, 0.977106, 0.975611, 0.974454, 0.967500, 0.979348},
     {0.981893, 0.974144, 0.976739, 0.976475, 0.974603, 0.975659, 0.974902, 0.975309, 0.976750, 0.978919},
     {0.980868, 0.977647, 0.974750, 0.976106, 0.981254, 0.978378, 0.977046, 0.974219, 0.975934, 0.978296}},
    {{0.981726, 0.979188, 0.979179, 0.979547, 0.977500, 0.981898, 0.981620, 0.980286, 0.975367, 0.980747},
     {0.988267, 0.979875, 0.975421, 0.979961, 0.981993, 0.988677, 0.977934, 0.968676, 0.968932, 0.978872},
     {0.974215, 0.973654, 0.972558, 0.982725, 0.982360, 0.981889, 0.984750, 0.976745, 0.974011, 0.969845},
     {0.972629, 0.975025, 0.976489, 0.974046, 0.974795, 0.989465, 0.976768, 0.973896, 0.978974, 0.982004},
     {0.977884, 0.980147, 0.973670, 0.978226, 0.979828, 0.972499, 0.973294, 0.974296, 0.973843, 0.974648},
     {0.984194, 0.972967, 0.972748, 0.977954, 0.981751, 0.984077, 0.975664, 0.975818, 0.973593, 0.980613},
     {0.974932, 0.976695, 0.973240, 0.978991, 0.978879, 0.980055, 0.983162, 0.980226, 0.977084, 0.976850},
     {0.981221, 0.976393, 0.980942, 0.975012, 0.988343, 0.982007, 0.981070, 0.972141, 0.978059, 0.978746},
     {0.986249, 0.981561, 0.973807, 0.976213, 0.982981, 0.992361, 0.976325, 0.976927, 0.983422, 0.981757},
     {0.979748, 0.979065, 0.978110, 0.982572, 0.980491, 0.980593, 0.974511, 0.979287, 0.976025, 0.987078},
     {0.978769, 0.975341, 0.981883, 0.980703, 0.999829, 0.996918, 0.989583, 0.982256, 0.964450, 0.984217},
     {0.983685, 0.981847, 0.972049, 0.988009, 0.989250, 0.990902, 0.979456, 0.979662, 0.975973, 0.985807},
     {0.977241, 0.979110, 0.970100, 0.982037, 0.988973, 0.990005, 0.975665, 0.974448, 0.967702, 0.975477},
     {0.985352, 0.972994, 0.982552, 0.980138, 0.993750, 1.000795, 0.979412, 0.973407, 0.974391, 0.980360}},
    {{0.976642, 0.972656, 0.976483, 0.978717, 0.989704, 0.991621, 0.981095, 0.972921, 0.968504, 0.973884},
     {0.986067, 0.983882, 0.973692, 0.977790, 0.989667, 0.997684, 0.978667, 0.977867, 0.979928, 0.980445},
     {0.979525, 0.973823, 0.982281, 0.978847, 0.998394, 0.999668, 0.982624, 0.975423, 0.974130, 0.979790},
     {0.984019, 0.973383, 0.971853, 0.981282, 0.996735, 0.988297, 0.981973, 0.978154, 0.975534, 0.984509},
     {0.978734, 0.974136, 0.978440, 0.980702, 0.993450, 0.986347, 0.981719, 0.980123, 0.985262, 0.977316},
     {0.987027, 0.978544, 0.978749, 0.983660, 0.991843, 0.991119, 0.985070, 0.988337, 0.975239, 0.987648},
     {0.991494, 0.984672, 0.982553, 0.978795, 0.990442, 0.989490, 0.985304, 0.984908, 0.978622, 0.988325},
     {0.996646, 0.982802, 0.974549, 0.979441, 0.992565, 0.989253, 0.985495, 0.981495, 0.982831, 0.992901},
     {0.996074, 0.978292, 0.978541, 0.980308, 0.986897, 0.989025, 0.981976, 0.978820, 0.975386, 0.991726},
     {0.991139, 0.982495, 0.983698, 0.980169, 0.989009, 0.990589, 0.984059, 0.982468, 0.982164, 0.998340},
     {0.995467, 0.980123, 0.983388, 0.981689, 0.983137, 0.990116, 0.983435, 0.983167, 0.980923, 0.992218},
     {0.993603, 0.976177, 0.980751, 0.986412, 0.989138, 0.984850, 0.984236, 0.983458, 0.981259, 0.997544},
     {0.992927, 0.980057, 0.980995, 0.982938, 0.985175, 0.983807, 0.985967, 0.979328, 0.977366, 0.992024},
     {0.992846, 0.984069, 0.981955, 0.982886, 0.989931, 0.992675, 0.983256, 0.983567, 0.987463, 0.988822}}};
float bin_centering_corr_alpha_pim[9][14][10] =
    {
        {{0.940625, 0.936056, 0.956457, 0.971929, 0.980950, 0.980777, 0.975730, 0.950910, 0.932240, 0.944411},
         {0.949926, 0.937192, 0.948583, 0.970274, 0.984833, 0.980910, 0.972946, 0.958667, 0.937088, 0.941790},
         {0.940019, 0.936305, 0.947123, 0.965626, 0.973630, 0.978440, 0.964579, 0.954012, 0.940338, 0.945812},
         {0.944193, 0.934842, 0.952356, 0.961255, 0.978347, 0.976283, 0.965558, 0.959546, 0.935680, 0.945575},
         {0.949434, 0.939619, 0.955919, 0.963093, 0.974086, 0.970693, 0.964722, 0.951204, 0.938802, 0.947846},
         {0.939508, 0.943409, 0.951124, 0.964691, 0.969632, 0.972434, 0.966566, 0.947843, 0.941360, 0.949061},
         {0.940895, 0.938831, 0.943923, 0.966428, 0.971865, 0.967164, 0.961856, 0.952589, 0.951356, 0.951118},
         {0.961228, 0.952468, 0.960205, 0.975246, 0.986778, 0.977025, 0.966120, 0.963623, 0.952036, 0.957361},
         {0.956198, 0.940067, 0.937870, 0.957646, 0.983169, 0.981503, 0.947611, 0.932286, 0.935665, 0.948243},
         {0.974258, 0.967054, 0.959736, 0.957173, 0.964605, 0.958742, 0.956043, 0.962343, 0.972054, 0.973840},
         {0.962480, 0.972889, 0.965527, 0.965039, 0.951974, 0.966858, 0.959198, 0.966917, 0.968211, 0.960616},
         {0.966191, 0.978788, 0.957449, 0.964218, 0.953759, 0.950826, 0.960605, 0.962063, 0.965248, 0.972846},
         {0.960484, 0.968351, 0.963963, 0.962838, 0.962068, 0.956940, 0.956715, 0.969811, 0.968503, 0.970341},
         {0.963868, 0.967308, 0.960467, 0.961820, 0.963738, 0.959072, 0.966062, 0.971762, 0.962953, 0.968242}},
        {{0.946653, 0.941005, 0.944590, 0.937771, 0.935438, 0.937781, 0.929746, 0.941335, 0.941495, 0.946558},
         {0.946222, 0.943866, 0.945066, 0.942792, 0.935912, 0.937136, 0.943436, 0.944753, 0.943644, 0.944007},
         {0.950694, 0.951787, 0.951388, 0.936363, 0.946992, 0.940212, 0.943204, 0.943400, 0.947961, 0.949152},
         {0.958413, 0.955108, 0.944919, 0.945443, 0.941192, 0.941988, 0.945866, 0.947065, 0.958196, 0.956541},
         {0.944249, 0.962603, 0.955856, 0.957067, 0.954400, 0.966437, 0.967969, 0.951833, 0.957444, 0.950328},
         {0.950747, 0.961913, 0.960104, 0.975419, 0.962581, 0.963753, 0.969521, 0.963497, 0.952396, 0.957725},
         {0.946299, 0.962727, 0.952847, 0.957030, 0.972149, 0.963174, 0.969083, 0.948731, 0.959612, 0.954701},
         {0.952571, 0.962675, 0.960106, 0.962269, 0.965030, 0.967001, 0.963862, 0.968849, 0.959555, 0.953581},
         {0.957114, 0.956271, 0.960049, 0.967831, 0.964832, 0.964035, 0.962379, 0.964493, 0.964619, 0.962977},
         {0.956081, 0.949014, 0.964263, 0.959124, 0.966109, 0.965632, 0.962047, 0.965143, 0.963708, 0.957086},
         {0.961871, 0.961194, 0.962909, 0.969922, 0.970738, 0.969448, 0.965290, 0.967210, 0.959887, 0.959057},
         {0.951456, 0.963870, 0.959353, 0.962665, 0.972752, 0.968714, 0.963669, 0.960419, 0.960812, 0.957918},
         {0.958352, 0.965777, 0.976535, 0.968028, 0.971020, 0.963501, 0.970671, 0.968179, 0.968952, 0.965110},
         {0.962787, 0.961552, 0.959144, 0.950286, 0.950110, 0.947141, 0.950442, 0.943200, 0.960576, 0.967092}},
        {{0.980318, 0.976881, 0.965475, 0.956349, 0.962938, 0.965303, 0.959643, 0.958991, 0.973199, 0.980481},
         {0.976748, 0.968608, 0.965150, 0.971044, 0.965290, 0.958827, 0.964318, 0.965041, 0.980907, 0.976423},
         {0.980476, 0.972040, 0.967712, 0.970262, 0.951451, 0.963309, 0.962128, 0.967471, 0.973399, 0.978075},
         {0.983615, 0.972149, 0.969355, 0.967519, 0.959064, 0.969862, 0.965852, 0.970339, 0.978818, 0.982333},
         {0.986441, 0.978907, 0.970917, 0.962446, 0.971772, 0.970481, 0.969122, 0.968313, 0.979817, 0.976246},
         {0.981199, 0.975595, 0.965525, 0.977377, 0.967276, 0.963881, 0.961930, 0.969315, 0.970253, 0.985989},
         {0.989690, 0.974943, 0.969110, 0.969212, 0.967101, 0.979699, 0.971960, 0.969437, 0.976292, 0.983572},
         {0.984454, 0.973950, 0.973540, 0.975264, 0.969035, 0.974860, 0.965371, 0.973770, 0.983822, 0.981494},
         {0.967898, 0.965861, 0.972865, 0.976444, 0.975851, 0.968370, 0.967861, 0.965009, 0.974893, 0.976520},
         {0.973820, 0.971756, 0.967407, 0.974631, 0.965501, 0.964680, 0.973803, 0.965876, 0.967773, 0.967930},
         {0.966841, 0.965559, 0.967916, 0.971484, 0.972120, 0.971734, 0.975986, 0.970388, 0.965415, 0.965552},
         {0.971433, 0.970560, 0.968188, 0.968335, 0.973288, 0.971852, 0.970774, 0.970988, 0.966184, 0.973209},
         {0.960917, 0.964818, 0.960483, 0.966250, 0.969771, 0.968376, 0.968888, 0.966841, 0.968056, 0.968764},
         {0.965141, 0.962449, 0.960169, 0.970022, 0.969313, 0.958980, 0.965185, 0.967778, 0.970553, 0.970371}},
        {{0.952825, 0.945216, 0.941105, 0.948601, 0.946649, 0.950765, 0.948640, 0.943258, 0.947464, 0.949509},
         {0.951055, 0.950747, 0.944435, 0.949329, 0.946959, 0.947999, 0.946199, 0.945980, 0.946638, 0.952179},
         {0.952746, 0.947423, 0.944721, 0.947805, 0.950168, 0.954757, 0.952230, 0.947137, 0.949609, 0.946619},
         {0.946513, 0.950401, 0.965684, 0.956348, 0.957138, 0.964305, 0.956632, 0.963359, 0.951775, 0.951573},
         {0.945952, 0.951945, 0.962347, 0.962849, 0.960689, 0.966534, 0.962855, 0.955933, 0.960427, 0.952963},
         {0.957670, 0.949947, 0.965768, 0.962171, 0.958267, 0.952519, 0.956910, 0.965290, 0.966819, 0.948812},
         {0.958821, 0.952253, 0.958092, 0.961477, 0.962080, 0.963966, 0.958190, 0.962658, 0.956608, 0.955579},
         {0.947252, 0.954536, 0.962828, 0.960147, 0.966060, 0.961485, 0.959737, 0.958283, 0.962046, 0.954926},
         {0.955980, 0.957829, 0.960305, 0.966700, 0.963474, 0.966513, 0.960225, 0.960305, 0.959631, 0.955126},
         {0.963155, 0.959890, 0.961818, 0.963648, 0.961021, 0.961634, 0.960173, 0.963154, 0.957728, 0.948061},
         {0.952403, 0.958856, 0.960695, 0.961117, 0.959457, 0.962089, 0.963322, 0.962732, 0.958364, 0.950484},
         {0.962451, 0.956380, 0.965499, 0.961280, 0.959283, 0.962420, 0.960374, 0.961064, 0.957852, 0.954214},
         {0.984202, 0.976622, 0.987372, 0.991991, 0.983969, 0.986563, 0.981167, 0.976904, 0.979962, 0.982711},
         {0.981472, 0.981518, 0.977811, 0.982725, 0.990807, 0.983454, 0.980819, 0.974714, 0.981913, 0.981641}},
        {{0.974242, 0.976993, 0.972909, 0.976333, 0.984412, 0.980422, 0.974969, 0.973603, 0.980139, 0.973224},
         {0.986188, 0.977661, 0.979640, 0.978784, 0.981818, 0.982135, 0.983634, 0.981453, 0.975261, 0.979472},
         {0.979897, 0.976058, 0.971979, 0.979587, 0.981058, 0.984461, 0.981837, 0.979353, 0.977769, 0.980890},
         {0.981436, 0.977807, 0.979303, 0.978984, 0.982986, 0.981854, 0.980169, 0.974053, 0.980460, 0.980250},
         {0.980520, 0.979291, 0.979334, 0.981012, 0.982457, 0.984992, 0.982843, 0.978471, 0.980514, 0.981803},
         {0.982033, 0.975388, 0.982738, 0.980190, 0.983337, 0.985401, 0.985142, 0.977606, 0.978067, 0.987537},
         {0.986383, 0.983409, 0.981189, 0.985216, 0.983519, 0.982698, 0.987273, 0.982605, 0.979684, 0.976445},
         {0.959091, 0.962905, 0.961648, 0.966890, 0.967374, 0.968248, 0.970355, 0.961758, 0.962179, 0.958465},
         {0.959263, 0.954837, 0.962748, 0.964546, 0.960363, 0.968965, 0.963325, 0.955518, 0.968388, 0.959479},
         {0.963198, 0.968467, 0.967882, 0.969268, 0.951417, 0.968217, 0.965567, 0.969931, 0.959512, 0.955487},
         {0.963991, 0.968291, 0.964044, 0.970548, 0.959396, 0.967909, 0.966124, 0.966674, 0.967123, 0.959738},
         {0.964000, 0.960816, 0.971222, 0.968077, 0.970896, 0.968225, 0.962848, 0.962361, 0.967634, 0.963388},
         {0.961427, 0.963633, 0.962510, 0.962345, 0.965279, 0.966387, 0.961618, 0.965508, 0.959538, 0.957921},
         {0.963006, 0.963465, 0.964078, 0.968980, 0.966440, 0.967188, 0.967483, 0.966381, 0.964074, 0.961010}},
        {{0.953027, 0.952721, 0.955644, 0.956821, 0.957223, 0.954707, 0.957144, 0.949984, 0.949887, 0.953167},
         {0.953729, 0.956051, 0.953648, 0.958323, 0.959643, 0.954173, 0.959300, 0.959073, 0.950433, 0.948999},
         {0.980292, 0.970924, 0.958878, 0.953583, 0.948805, 0.953551, 0.949000, 0.961565, 0.977965, 0.979203},
         {0.973944, 0.974714, 0.968825, 0.951894, 0.945050, 0.943825, 0.954959, 0.963549, 0.965372, 0.978797},
         {0.974561, 0.975574, 0.961603, 0.951532, 0.948981, 0.945891, 0.947764, 0.954453, 0.980875, 0.979047},
         {0.973659, 0.974830, 0.966613, 0.949891, 0.949618, 0.949816, 0.950931, 0.960295, 0.972767, 0.981375},
         {0.978014, 0.975272, 0.962885, 0.955414, 0.947222, 0.947073, 0.957921, 0.968705, 0.977358, 0.980631},
         {0.979995, 0.973321, 0.964958, 0.957352, 0.953922, 0.950110, 0.961307, 0.965549, 0.969157, 0.981133},
         {0.977883, 0.972593, 0.971030, 0.952614, 0.947983, 0.950268, 0.959305, 0.966677, 0.975300, 0.981214},
         {0.979384, 0.970692, 0.960225, 0.958641, 0.949045, 0.947991, 0.953583, 0.964850, 0.974731, 0.977033},
         {0.980002, 0.969665, 0.966314, 0.959605, 0.948552, 0.949229, 0.960318, 0.965317, 0.973703, 0.987979},
         {0.949381, 0.952981, 0.971103, 0.974948, 0.990350, 0.980586, 0.976375, 0.971382, 0.951704, 0.950428},
         {0.950705, 0.944871, 0.974397, 0.968820, 0.982000, 0.987912, 0.972167, 0.961369, 0.951363, 0.955618},
         {0.939318, 0.957432, 0.963467, 0.979428, 0.977113, 0.975765, 0.979137, 0.967548, 0.960908, 0.949628}},
        {{0.959452, 0.954991, 0.959823, 0.973174, 0.982165, 0.986487, 0.977891, 0.970539, 0.951652, 0.949879},
         {0.947962, 0.957176, 0.963415, 0.978284, 0.985228, 0.981587, 0.984217, 0.965477, 0.956700, 0.952033},
         {0.948602, 0.958099, 0.967012, 0.979618, 0.983364, 0.983916, 0.980316, 0.968631, 0.957032, 0.954918},
         {0.950762, 0.953927, 0.970310, 0.977718, 0.983686, 0.988174, 0.977498, 0.966441, 0.956937, 0.948348},
         {0.950662, 0.956441, 0.970265, 0.977603, 0.981602, 0.981573, 0.979731, 0.966056, 0.958248, 0.956742},
         {0.951165, 0.952286, 0.963841, 0.978889, 0.980024, 0.986109, 0.977129, 0.969501, 0.957559, 0.949805},
         {0.983622, 0.971898, 0.975819, 0.965112, 0.967729, 0.960819, 0.964891, 0.973506, 0.975513, 0.974492},
         {0.980794, 0.983062, 0.976242, 0.969746, 0.969712, 0.964591, 0.968251, 0.984890, 0.977228, 0.976825},
         {0.975696, 0.978198, 0.973126, 0.972127, 0.964344, 0.969515, 0.968012, 0.977556, 0.971422, 0.981762},
         {0.980903, 0.977305, 0.975632, 0.970670, 0.963448, 0.967766, 0.970580, 0.977908, 0.977568, 0.976316},
         {0.984240, 0.979599, 0.975889, 0.969116, 0.968853, 0.969552, 0.972685, 0.974209, 0.985446, 0.983332},
         {0.983680, 0.983871, 0.977201, 0.969438, 0.970822, 0.966365, 0.973377, 0.979656, 0.982252, 0.976082},
         {0.979236, 0.985077, 0.971900, 0.974290, 0.968426, 0.971916, 0.972201, 0.975178, 0.984389, 0.985148},
         {0.978773, 0.984079, 0.979931, 0.967891, 0.971767, 0.975397, 0.970115, 0.976055, 0.985225, 0.986156}},
        {{0.990893, 0.984311, 0.983777, 0.973687, 0.969880, 0.969522, 0.975178, 0.980048, 0.988255, 0.984199},
         {0.977856, 0.971591, 0.965330, 0.977988, 0.974120, 0.986722, 0.976106, 0.978457, 0.976370, 0.979059},
         {0.978099, 0.977499, 0.976211, 0.983395, 0.980620, 0.977553, 0.980441, 0.975958, 0.979391, 0.970185},
         {0.973667, 0.968006, 0.976872, 0.975062, 0.980142, 0.978146, 0.978407, 0.970281, 0.972437, 0.978466},
         {0.976519, 0.971315, 0.968834, 0.972976, 0.975307, 0.982039, 0.980175, 0.975659, 0.970425, 0.976514},
         {0.974333, 0.978275, 0.975232, 0.974785, 0.982408, 0.980235, 0.973454, 0.969947, 0.973003, 0.976828},
         {0.974267, 0.974054, 0.981280, 0.982937, 0.981534, 0.978610, 0.980435, 0.972535, 0.967567, 0.973266},
         {0.971722, 0.972826, 0.973342, 0.983693, 0.980056, 0.983898, 0.974949, 0.975357, 0.974914, 0.980127},
         {0.981742, 0.976618, 0.977045, 0.984626, 0.989655, 0.977341, 0.975227, 0.975661, 0.979616, 0.975841},
         {0.981874, 0.977679, 0.974730, 0.981099, 0.980190, 0.980761, 0.977625, 0.979217, 0.974192, 0.982364},
         {0.978534, 0.978202, 0.983059, 0.987094, 0.980059, 0.987904, 0.976809, 0.979568, 0.984037, 0.983500},
         {0.991932, 0.980251, 0.976827, 0.977866, 0.982676, 0.987229, 0.987563, 0.968074, 0.979680, 0.982413},
         {0.979583, 0.979378, 0.978701, 0.969729, 0.975474, 0.976915, 0.979638, 0.983727, 0.979659, 0.988699},
         {0.982146, 0.972337, 0.971327, 0.984924, 0.985394, 0.971851, 0.979597, 0.976867, 0.977192, 0.975392}},
        {{0.974910, 0.973232, 0.976371, 0.980667, 0.979422, 0.985754, 0.982966, 0.975465, 0.979275, 0.981390},
         {0.993412, 0.973383, 0.982316, 0.985292, 0.976633, 0.981135, 0.982786, 0.976533, 0.981403, 0.984802},
         {0.989628, 0.981467, 0.985742, 0.980059, 0.982293, 0.988698, 0.975919, 0.978780, 0.983933, 0.989226},
         {0.982977, 0.982327, 0.977741, 0.981660, 0.982334, 0.982948, 0.979428, 0.975083, 0.979138, 0.985209},
         {0.987292, 0.981951, 0.981216, 0.980669, 0.979371, 0.982225, 0.979385, 0.979773, 0.982232, 0.979340},
         {0.972775, 0.979852, 0.973032, 0.988310, 1.003257, 0.980756, 0.985170, 0.984250, 0.973350, 0.971126},
         {0.963882, 0.972654, 0.977019, 0.984275, 0.994899, 0.993501, 0.991497, 0.978004, 0.979169, 0.968933},
         {0.975816, 0.975155, 0.984120, 0.985205, 0.992745, 0.995385, 0.983555, 0.985768, 0.969135, 0.972794},
         {0.974996, 0.970309, 0.979701, 0.982083, 0.993257, 0.991503, 0.985150, 0.977576, 0.976810, 0.967405},
         {0.976009, 0.977681, 0.979448, 0.989165, 0.986650, 0.996062, 0.986456, 0.982021, 0.978180, 0.970796},
         {0.975874, 0.979964, 0.981497, 0.985261, 0.992314, 0.988030, 0.987371, 0.976653, 0.973129, 0.971659},
         {0.971424, 0.977497, 0.980724, 0.989592, 0.985988, 0.987026, 0.984817, 0.980555, 0.976135, 0.974392},
         {0.975142, 0.975595, 0.977064, 0.981222, 0.994635, 0.988171, 0.991076, 0.975094, 0.970582, 0.973013},
         {0.973995, 0.973666, 0.984555, 0.985727, 0.994297, 0.993801, 0.986197, 0.986703, 0.973121, 0.972478}}};

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

THnSparseD *h_exp_prot[W_bins_no];
THnSparseD *h_exp_prot_background[W_bins_no];
THnSparseD *h_simu_prot_background[W_bins_no];
THnSparseD *h_empty_prot[W_bins_no];
THnSparseD *h_th_prot[W_bins_no];
THnSparseD *h_simu_prot[W_bins_no];
THnSparseD *acceptance_7D_hist_prot[W_bins_no];
THnSparseD *acceptance_corrected_7D_prot[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_prot[W_bins_no];
THnSparseD *hole_yield_simulation_prot[W_bins_no];
THnSparseD *hole_yield_exp_prot[W_bins_no];
THnSparseD *total_yield_exp_prot[W_bins_no];
THnSparseD *h_th_prot_sig2[W_bins_no];
THnSparseD *h_rec_prot_sig2[W_bins_no];
THnSparseD *h_th_prot_evt[W_bins_no]; // same as the h_rec_prot_sig2 just weight is 1 here
THnSparseD *h_rec_prot_evt[W_bins_no];

THnSparseD *h_exp_pip[W_bins_no];
THnSparseD *h_exp_pip_background[W_bins_no];
THnSparseD *h_simu_pip_background[W_bins_no];
THnSparseD *h_empty_pip[W_bins_no];
THnSparseD *h_th_pip[W_bins_no];
THnSparseD *h_simu_pip[W_bins_no];
THnSparseD *acceptance_7D_hist_pip[W_bins_no];
THnSparseD *acceptance_corrected_7D_pip[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_pip[W_bins_no];
THnSparseD *hole_yield_simulation_pip[W_bins_no];
THnSparseD *hole_yield_exp_pip[W_bins_no];
THnSparseD *total_yield_exp_pip[W_bins_no];
THnSparseD *h_th_pip_sig2[W_bins_no];
THnSparseD *h_rec_pip_sig2[W_bins_no];
THnSparseD *h_th_pip_evt[W_bins_no]; // same as the h_rec_pip_sig2 just weight is 1 here
THnSparseD *h_rec_pip_evt[W_bins_no];

THnSparseD *h_exp_pim[W_bins_no];
THnSparseD *h_exp_pim_background[W_bins_no];
THnSparseD *h_simu_pim_background[W_bins_no];
THnSparseD *h_empty_pim[W_bins_no];
THnSparseD *h_th_pim[W_bins_no];
THnSparseD *h_simu_pim[W_bins_no];
THnSparseD *acceptance_7D_hist_pim[W_bins_no];
THnSparseD *acceptance_corrected_7D_pim[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_pim[W_bins_no];
THnSparseD *hole_yield_simulation_pim[W_bins_no];
THnSparseD *hole_yield_exp_pim[W_bins_no];
THnSparseD *total_yield_exp_pim[W_bins_no];
THnSparseD *h_th_pim_sig2[W_bins_no];
THnSparseD *h_rec_pim_sig2[W_bins_no];
THnSparseD *h_th_pim_evt[W_bins_no]; // same as the h_rec_pim_sig2 just weight is 1 here
THnSparseD *h_rec_pim_evt[W_bins_no];

Int_t pipP_max = 11;
Int_t pimP_max = 11;
Int_t pip_pim_max = 11;
Int_t theta_max = 10;
Int_t phi_max = 6;
Int_t alpha_max = 10;

float bin_content_sum_acc_corrected_simu[3];
float bin_content_sum_acc_corrected_exp[3];
float scale_factor[3];
const float E_beam = 10.6041;
float w_bin_size = 0.05;

Float_t eff_threshold = 0;
Float_t rec_threshold = 0.;
// Float_t eff_err_threshold = 0.5;

float Acc_fact[15];

float Int[15];

float Int_1[15];
float Int_2[15];
float Int_3[15];

float Int_bc_corr[15];
float Int_1_bc_corr[15];
float Int_2_bc_corr[15];
float Int_3_bc_corr[15];

Double_t Int_err[15];
Double_t Int_err_1[15];
Double_t Int_err_2[15];
Double_t Int_err_3[15];

Double_t Int_err_bc_corr[15];
Double_t Int_err_1_bc_corr[15];
Double_t Int_err_2_bc_corr[15];
Double_t Int_err_3_bc_corr[15];

float Int_acc_corr[15];
float Int_1_acc_corr[15];
float Int_2_acc_corr[15];
float Int_3_acc_corr[15];

Double_t Int_err_acc_corr[15];
Double_t Int_err_1_acc_corr[15];
Double_t Int_err_2_acc_corr[15];
Double_t Int_err_3_acc_corr[15];

float Int_theta[15];
float Int_1_theta[15];
float Int_2_theta[15];
float Int_3_theta[15];

double nine_1d_syst[15][9];

Double_t Int_err_theta[15];
Double_t Int_err_1_theta[15];
Double_t Int_err_2_theta[15];
Double_t Int_err_3_theta[15];

float Int_alpha[15];
float Int_1_alpha[15];
float Int_2_alpha[15];
float Int_3_alpha[15];

Double_t Int_err_alpha[15];
Double_t Int_err_1_alpha[15];
Double_t Int_err_2_alpha[15];
Double_t Int_err_3_alpha[15];

float w_for_int[15];
float estimate1[15];

void suppressWarnings()
{
#ifdef __linux__ // Check if running on a Linux system
    // Redirect stderr to /dev/null
    std::ofstream devnull("/dev/null");
    std::cerr.rdbuf(devnull.rdbuf());
#else
    // On non-Linux systems, you can redirect stderr to a file
    // Change "error.log" to the desired filename
    freopen("error.log", "w", stderr);
#endif
}

TH1F *h_w_int = new TH1F("h_w_int", "h_w_int", 15, 1.4, 2.15);
TH1F *h_w_int_bc_corr = new TH1F("h_w_int_bc_corr", "h_w_int_bc_corr", 15, 1.4, 2.15);

// TH1F *h_w_int_low_th = new TH1F("h_w_int_low_th", "h_w_int_low_th", 10, 1.4, 1.9);
TH1F *h_empty_cell_contribution = new TH1F("h_empty_cell_contribution", "h_empty_cell_contribution", 15, 1.4, 2.15);
TH1F *h_syst_err_contribution = new TH1F("h_syst_err_contribution", "h_syst_err_contribution", 15, 1.4, 2.15);

TH1F *h_w_int_clas6 = new TH1F("h_w_int_clas6", "h_w_int_clas6", 15, 1.4, 2.15);
TH1F *h_w_int_diff = new TH1F("h_w_int_diff", "h_w_int_diff", 15, 1.4, 2.1);

TH1F *h_w_int_acc_corr = new TH1F("h_w_int_acc_corr", "h_w_int_acc_corr", 15, 1.4, 2.15);
TH1F *h_w_int_theta = new TH1F("h_w_int_theta", "h_w_int_theta", 15, 1.4, 2.15);
TH1F *h_w_int_alpha = new TH1F("h_w_int_alpha", "h_w_int_alpha", 15, 1.4, 2.15);

TH1D *d_eff = new TH1D("d_eff", "d_eff", 200, -0.1, 1);
TH1D *eff = new TH1D("eff", "eff", 200, -0.5, 1.);
TH2D *deff_vs_eff = new TH2D("deff_vs_eff", "deff_vs_eff", 200, -0., 1, 200, -0.5, 1.);
TH1D *eff_threshold_cut = new TH1D("eff_threshold_cut", "eff_threshold_cut", 200, -0., 1.);

TH1D *d_eff_before = new TH1D("d_eff_before", "d_eff_before", 200, -0.10, 1.);
TH1D *eff_before = new TH1D("eff_before", "eff_before", 200, -0.1, 1.);
TH2D *deff_vs_eff_before = new TH2D("deff_vs_eff_before", "deff_vs_eff_before", 200, -0.0, 0.4, 200, -0., 2.0);
TH1D *eff_threshold_cut_before = new TH1D("eff_threshold_cut_before", "eff_threshold_cut_before", 200, 0, 2.0);

TH1D *d_eff_after = new TH1D("d_eff_after", "d_eff_after", 200, -0.10, 1.);
TH1D *eff_after = new TH1D("eff", "eff_after", 200, -0.1, 1.);
TH1D *eff_threshold_cut_after = new TH1D("eff_threshold_cut_after", "eff_threshold_cut_after", 200, 0, 1.0);
TH2D *deff_vs_eff_after = new TH2D("deff_vs_eff_after", "deff_vs_eff_after", 200, -0.0, 1., 200, -0., 1.0);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TH2D *W_VS_Q2_HOLE_FRACTION = new TH2D("W_VS_Q2_HOLE_FRACTION", "W_VS_Q2_HOLE_FRACTION", 15, 1.4, 2.15, 9, -0.0, 1);
float holes_fraction_exp[9][15];
float holes_in_sim[9][15];
float holes_in_exp[9][15];
float filled_bins_in_sim[9][15];
float filled_bins_in_exp[9][15];
float holes_fraction_sim[9][15];
float total_bins_in_sim[9][15];

//////// float Threshold_cuts[9] = {0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85};
// float Threshold_cuts[9] = {0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55};
float Threshold_cuts[9] = {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7};
// float Threshold_cuts[9] = {0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4};
// float Threshold_cuts[9] = {0.7, 0.7, 0.7, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3};
// float Threshold_cuts[9] = {20.7, 20.7, 20.7, 20.3, 20.3, 20.3, 20.3, 20.3, 20.3};

int n = 10;
TCanvas *can1 =
    new TCanvas("Nine_differential_Yields", "Nine_diff_Yields", 1950, 1200);
auto name_int = Form("int_cross-section");
auto mg = new TMultiGraph("int_cr_sec", "int_cr_sec");

// The subroutine calculates the virtual photon flux
float flux(float w, float q2_value)
{
    // float w = 1.0 + w_bin * 0.05;
    // float q2 = 1.0 + q2_bin * 1.0;
    // float q2_value = q2_low_values[q2_bin];
    // std::cout << "q2 low in flux function : " << q2_value << std::endl;
    // std::cout << "w low in flux function : " << w << std::endl;

    float omega = (w * w + q2_value - MASS_P * MASS_P) / (2. * MASS_P);
    // std::cout << "omega =  " << omega << std::endl;

    float en_elp = E_beam - omega;
    float th_elp = 2 * asin(sqrt(q2_value / 4. / E_beam / en_elp));
    // std::cout << "theta =  " << th_elp << std::endl;

    float epsilon = 1 / (1. + 2. * (1. + omega * omega / q2_value) * (tan(th_elp / 2.)) * (tan(th_elp / 2.)));

    // std::cout << "epsilon = : " << epsilon << std::endl;

    float flux_calc = (omega - q2_value / 2. / MASS_P) / 137.;

    flux_calc = flux_calc / 2. / (PI) / E_beam / q2_value / (1 - epsilon);
    flux_calc = flux_calc * w / E_beam / MASS_P;
    // std::cout << "flux  =  " << flux_calc << std::endl;
    // std::cout << "pi  =  " << PI << std::endl;

    return flux_calc;
}
// questions
/// corrections like bin centering? ....
/// all topology may sum little differently?
// binning 25 MeV
// mom corrections and background substractions?

void set_all_errors(int no_w_bins); // prototype
void set_eff_errors(float threshold_cut, int no_w_bins);
void eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins);
// float Threshold_cuts[9] = {5, 5, 2.5, 2, 0.6, 0.6, 0.6, 0.6, 0.6};

Float_t eff_acc_threshold = 0.000;

// float Threshold_cuts[9] = {5, 2.50, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0};

struct CrossSectionData
{
    std::vector<double> w_values;
    std::vector<double> cross_sections;
    std::vector<double> errors;
};
CrossSectionData readCrossSections(const std::string &file_path)
{
    CrossSectionData data;
    std::ifstream file(file_path);
    // std::cerr << "Opening file: " << file_path << std::endl;

    if (!file.is_open())
    {
        std::cerr << "Error opening file: " << file_path << std::endl;
        return data;
    }

    std::string line;
    // Skip the first line if it contains headers
    // std::getline(file, line); // assuming the first line has headers
    // std::cout << "Header line: " << line << std::endl;

    while (std::getline(file, line))
    {
        // std::cout << "Processing line: " << line << std::endl;

        std::istringstream stream(line);
        double w_value, cross_section, error;

        // Read the three columns (w_value, cross_section, error)
        if (stream >> w_value >> cross_section >> error)
        {
            // std::cout << "Parsed values - w: " << w_value
            //           << ", cross_section: " << cross_section
            //           << ", error: " << error << std::endl;

            data.w_values.push_back(w_value);
            data.cross_sections.push_back(cross_section);
            data.errors.push_back(error);
        }
        else
        {
            std::cerr << "Error parsing line: " << line << std::endl;
        }
    }

    // std::cerr << "Finished reading file: " << file_path << std::endl;
    return data;
}

/// This is for error estimation  ///////////////////////////////////////////
/// This is for error estimation  ///////////////////////////////////////////
/// This is for error estimation  ///////////////////////////////////////////
/// This is for error estimation  ///////////////////////////////////////////

int main(int argc, char **argv)
{
    suppressWarnings();

    // //////////////  FINAL VERSION FOR CROSS-SECTION PLOTS ////////////////
    // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/resIncl_pass2_3_empty_target_runs_new_inv_mas_bins_mPim_topo_for_cs.root";
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/pass2_45nA_mPim_topo_for_cs_741_files_new_inv_binning_mid_fiducial_cuts_05_06_2025.root";
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/resIncl_pass2_all_126_runs_new_inv_mas_bins_mPim_topo_for_cs.root";
    // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/resIncl_pass2_all_126_runs_new_inv_mas_bins_bkg_file.root";
    // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/pass2_45nA_bkg_files_for_741_files_new_inv_binning_mid_fiducial_cuts_05_06_2025.root";

    // // //////////////////// merged files in simulations //////////////// this is befor final modification on th fiducial cuts /// this did not worked at all
    // // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/MERGED_FILES_SIM/pass2_merged_917files_good_wt_for_final_cs.root";
    // // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/MERGED_FILES_SIM/pass2_merged_917files_for_background_good_wt_for_final_cs.root";

    //////////// 50, 55 nA beam current MC files   //////////////
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/pass2_40_files_50nA_mid_fiducial_cuts_05_06_2025.root";
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/pass2_130_files_55nA_mid_fiducial_cuts_05_06_2025.root";
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/pass2_all_3_beam_currents_910_files.root";

    // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2025/May_2025/pass2_all_beam_current_910_files_bkg_merged.root";

    //////////////

    // // After submission  aayo new background!!!!!!!!!!

    // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2025/After_Submission/resIncl_pass2_all_126_runs_NEW_background_THNSparse_with_new_mid_fiducial_cuts.root";
    // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2025/After_Submission/pass2_741_files_NEW_BKG_with_new_mid_fiducial_cuts_03_19_2025.root";

    //////////////  FINAL VERSION FOR CROSS-SECTION PLOTS ////////////////
    std::string em_inFileName = "/Users/krishnaneupane/Downloads/2025/July_2025/resIncl_pass2_3_empty_runs_Merged_7_inv_bins_5D_mPim_topo_for_cs.root";
    std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/July_2025/out_marged_range_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45_only_7inv_bins.root";
    std::string inFileName = "/Users/krishnaneupane/Downloads/2025/July_2025/resIncl_pass2_all_126_golden_runs_Merged_7_inv_bins_5D_mPim_topo_for_cs.root";
    std::string background_inFileName = "/Users/krishnaneupane/Downloads/2025/July_2025/resIncl_pass2_3_bkg_files_Merged_7_inv_bins_5D_mPim_topo_for_cs.root";
    std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2025/July_2025/out_merged_range_Pass2_sim_bg_45_only_7inv_bins_mc_BKG_merged_output.root";

    /////////// Arjuns cross-sections ////////////
    /////////// Arjuns cross-sections ////////////
    /////////// Arjuns cross-sections ////////////
    /////////// Arjuns cross-sections ////////////
    std::string inputDirectory_clas6 = "/Users/krishnaneupane/Documents/GitHub/arjuns_cross_sections/Merged_W_bin";
    // Define the Q² directories to process
    std::vector<std::string> q2_dirs_clas6 = {"q2_20_24", "q2_24_30", "q2_30_35", "q2_35_42", "q2_42_50"};
    // Define the W directories to process
    std::vector<std::string> w_dirs_clas6 = {
        "w_1400_1425", "w_1425_1450", "w_1450_1475", "w_1475_1500", "w_1500_1525", "w_1525_1550", "w_1550_1575", "w_1575_1600", "w_1600_1625", "w_1625_1650",
        "w_1650_1675", "w_1675_1700", "w_1700_1725", "w_1725_1750", "w_1750_1775", "w_1775_1800", "w_1800_1825", "w_1825_1850", "w_1850_1875", "w_1875_1900",
        "w_1900-1925", "w_1925_1950", "w_1950_1975", "w_1975_2000", "w_2000_2025", "w_2025_2050", "w_2050_2075", "w_2075_2100"};

    // Cross-section file names to process
    std::vector<std::string> cs_files_clas6 = {"xsec1d_mpippr.dat", "xsec1d_mpimpr.dat", "xsec1d_mpippim.dat", "xsec1d_theta_pim.dat", "xsec1d_theta_pip.dat", "xsec1d_theta_pr.dat",
                                               "xsec1d_psi_pim.dat", "xsec1d_psi_pip.dat", "xsec1d_psi_pr.dat"};

    gStyle->SetHistMinimumZero();
    TFile *root_data = new TFile(inFileName.c_str());
    TFile *root_data_background = new TFile(background_inFileName.c_str());
    TFile *root_data_empty_target = new TFile(em_inFileName.c_str());
    // TFile *root_mcWt1 = new TFile(mcWt1FileName.c_str());
    TFile *root_mc = new TFile(mcFileName.c_str());
    // TFile *root_mc_with_bkg_subtracted = new TFile(mcFileName_bkg_subtracted.c_str());
    // TFile *root_mcWt1_with_bkg_subtracted = new TFile(mcWt1FileName_bkg_subtracted.c_str());

    TFile *root_mc_background = new TFile(background_mcFileName.c_str());

    // define and set style
    gStyle->SetTitleSize(0.08, "t");
    gStyle->SetOptStat(0);
    gStyle->SetStatColor(0);
    // gStyle->SetPaperSize(18, 24);
    gStyle->SetLabelSize(0.055, "Y");
    gStyle->SetLabelSize(0.055, "X");
    gStyle->SetTitleOffset(0.9, "X"); // Adjust title offset for better spacing
    gStyle->SetTitleOffset(0.9, "Y");
    gStyle->SetTitleSize(0.09, "XY");
    gStyle->SetStatFontSize(0.06);
    gStyle->SetTitleFont(22, "XY");
    gStyle->SetLabelFont(22, "XY");
    gStyle->SetTextFont(22);
    gStyle->SetLabelOffset(0.02, "X"); // Increase X label spacing
    gStyle->SetLabelOffset(0.02, "Y"); // Increase Y label spacing
    gStyle->SetLegendFont(22);
    gStyle->SetLegendTextSize(0.035);
    gStyle->SetMarkerStyle(20);
    gStyle->SetMarkerSize(1.6);
    // gStyle->SetMarkerColor(4);
    gStyle->SetErrorX(0);

    // TFile *fiveD = new TFile("fiveD.root","RECREATE");

    // questions  ......................................................................
    // is arjuns cross-sections are sum of all topology?
    /// corrections like bin centering, bin migration? ....
    /// all topology may sum little differently?
    // binning 25 MeV
    // mom corrections and background substractions?
    // effects of each cuts should be studied
    // fc charge is important used one is from nick's calculation, exact calculation needed for myself
    // radiative correction factors are based on the simulation data on wider range, i have not generated the files withour rad correction..
    // ..in this one q2 bin, is that needed?...
    // for wider w-q2 range how far should we go? arjun has 1.4<w<2.125 GeV, 2<Q2<5GeV2
    // boundary effects, bin to bin event migration
    bool CLAS6 = false;

    double twopeg_W_scale_factors[8][14] = {
        {1.004211, 1.148794, 0.989093, 0.922634, 0.899489, 0.992955, 1.023289, 0.915766, 0.929878, 0.987731, 0.943487, 0.926322, 0.909633, 0.841183},
        {0.815422, 0.927827, 0.898250, 0.819461, 0.837215, 0.953629, 1.071787, 0.970500, 0.978268, 1.048198, 1.053690, 0.989108, 0.961490, 0.905667},
        {0.986176, 0.981531, 0.913725, 0.876044, 0.938181, 1.009985, 1.131275, 1.021808, 1.002267, 1.123299, 1.121798, 1.055486, 1.049308, 0.929179},
        {1.005047, 0.995475, 1.005265, 0.922833, 0.982457, 1.087645, 1.204002, 1.080880, 1.081616, 1.132415, 1.072460, 1.027363, 0.992088, 0.917982},
        {1.005536, 0.978511, 0.865748, 0.766142, 0.916022, 0.969819, 1.080374, 0.990487, 0.963121, 1.038411, 1.055719, 1.043408, 1.001927, 0.958459},
        {1.307788, 1.040652, 0.921352, 0.854077, 0.954695, 0.902797, 1.045428, 0.872150, 0.922488, 0.980257, 0.924563, 0.915225, 0.942118, 0.905425},
        {0.941066, 1.037920, 0.810638, 0.781193, 0.922739, 0.895750, 0.925064, 1.049887, 0.952149, 0.938898, 1.000741, 0.885873, 0.986096, 0.871332},
        {0.720877, 0.916051, 0.762204, 0.816070, 0.865472, 0.985150, 1.105986, 1.014232, 0.975946, 1.061765, 1.053227, 1.036501, 1.032657, 1.181062},
    };
    // // Define the directory path
    // std::string directory = "/Users/krishnaneupane/Desktop/Desktop_backedup_at_icloud/Final_cross_sections/";

    // // Format filename with Q2 range
    // std::stringstream filename;
    // filename << directory << "final_int_cs_eff_07_second_bin.csv";

    // // Format filename with Q2 range
    // std::stringstream filename_1d;
    // filename_1d << directory << "final_1d_cs_eff_07__second_bin.csv";

    // std::ofstream file(filename.str());       // Open file
    // std::ofstream file_1d(filename_1d.str()); // Open file

    // // if (!file)
    // // {
    // //     std::cerr << "Error opening file: " << filename.str() << std::endl;
    // //     return 1;
    // // }
    // // Writing the header
    // // file << "W_bin,Q2_mid,Int,Int_err,Int_bc,Int_bc_err,CLAS6_CS,CLAS6_CS_err,Int_theta,Int_err_theta,Int_alpha,Int_err_alpha\n";
    // file << "W_bin,Q2_mid,Int\n";
    // file_1d << "W_bin,Q2_mid,pPip,pipPim,pPim,thetaP,thetaPip,thetaPim,alphaP,alphaPip,alphaPim\n";

    // // Format filename with Q2 range
    // std::stringstream filename_1d_bin;
    // filename_1d_bin << directory << "final_1d_bin_by_bin_cs_eff_07_second_bin.csv";

    // std::ofstream file_1d_bin(filename_1d_bin.str()); // Open file
    // file_1d_bin << "W_bin,Q2_mid,Histogram,BinNumber,BinContent\n";

    // for (short q2 = 4; q2 < 5; q2++)
    // {
    if (argc != 2)
    {
        std::cerr << "Usage: ./cs_measure <q2_value>" << std::endl;
        return 1;
    }
    short q2 = std::stoi(argv[1]); // Convert command-line argument to short
    {

        std::string inputDirectory;

        if (q2 >= 1 && q2 <= 3)
        {
            //// loding CLAS12 cross-sectopns
            inputDirectory = "/Users/krishnaneupane/Desktop/Desktop_backedup_at_icloud/Final_cross_sections/FINAL_Grand_total/1d_sys_eff_err_cut_07";
            std::cout << "  0.7 cut q2 file loading for q2 bin  " << q2 << std::endl;
        }
        else if (q2 >= 4 && q2 <= 8)
        {
            inputDirectory = "/Users/krishnaneupane/Desktop/Desktop_backedup_at_icloud/Final_cross_sections/FINAL_Grand_total/1d_sys_eff_err_cut_03";
            std::cout << " 0.3 cut  q2 file loading for q2 bin  " << q2 << std::endl;
        }
        else
        {
            std::cerr << "Error: Q^2 value out of range!" << std::endl;
            return 1; // Exit the program with an error
        }

        // Define the Q² directories to process
        std::vector<std::string> q2_dirs = {"q2_20_24", "q2_24_30", "q2_30_35", "q2_35_42", "q2_42_50", "q2_50_60", "q2_60_70", "q2_70_80"};
        // Define the W directories to process
        std::vector<std::string> w_dirs = {
            "w_140_145", "w_145_150", "w_150_155", "w_155_160",
            "w_160_165", "w_165_170", "w_170_175", "w_175_180",
            "w_180_185", "w_185_190", "w_190_195", "w_195_200",
            "w_200_205", "w_205_210"};

        // Cross-section file names to process
        std::vector<std::string> cs_files = {"xsec1d_mpippr.dat", "xsec1d_mpimpr.dat", "xsec1d_mpippim.dat", "xsec1d_theta_pim.dat", "xsec1d_theta_pip.dat", "xsec1d_theta_pr.dat",
                                             "xsec1d_psi_pim.dat", "xsec1d_psi_pip.dat", "xsec1d_psi_pr.dat"};

        // if (q2 <= 5)
        //     CLAS6 = true;
        std::string q2_path = inputDirectory + "/" + q2_dirs[q2 - 1];
        std::string q2_path_clas6 = inputDirectory_clas6 + "/" + q2_dirs_clas6[q2 - 1];

        // std::cout << "Processing Q² directory: " << q2_path << std::endl;

        float q2_lower_lim = q2_low_values[q2];
        float q2_upper_lim = q2_up_values[q2];
        float q2_bin_size = q2_binning_size[q2];
        float q2_mid_value = (q2_low_values[q2] + q2_up_values[q2]) / 2;

        std::string directory = "/Users/krishnaneupane/Desktop/Desktop_backedup_at_icloud/For_analysis_note/";
        std::string mod_folder = "";

        // Format filename with Q2 range
        std::stringstream filename;
        filename << directory << "45nA_beam_curr_final_int_cs_part_" << mod_folder << "cut_q2_" << q2_lower_lim << "_to_" << q2_upper_lim << ".csv";

        // // Format filename with Q2 range
        // std::stringstream filename_1d;
        // filename_1d << directory << "final_1d_cs_part_" << mod_folder << "_cut_q2_" << q2_lower_lim << "_to_" << q2_upper_lim << ".csv";
        // Format filename with Q2 range
        std::stringstream filename_1d_bin;
        filename_1d_bin << directory << "45nA_beam_curr_final_1d_bin_by_bin_cs_part_" << mod_folder << "cut_q2_" << q2_lower_lim << "_to_" << q2_upper_lim << ".csv";

        std::ofstream file(filename.str()); // Open file
        // std::ofstream file_1d(filename_1d.str()); // Open file

        // if (!file)
        // {
        //     std::cerr << "Error opening file: " << filename.str() << std::endl;
        //     return 1;
        // }
        // Writing the header
        // file << "W_bin,Q2_mid,Int,Int_err,Int_bc,Int_bc_err,CLAS6_CS,CLAS6_CS_err,Int_theta,Int_err_theta,Int_alpha,Int_err_alpha\n";
        file << "W_bin,Q2_mid,In_bc_corr,Int,Int_th,Int_al,hole_syst,hole_syst_per\n";
        // file_1d << "W_bin,Q2_mid,pPip,pipPim,pPim,thetaP,thetaPip,thetaPim,alphaP,alphaPip,alphaPim\n";

        std::ofstream file_1d_bin(filename_1d_bin.str()); // Open file
        // file_1d_bin << "W_bin,Q2_mid,Histogram,BinNumber,BinContent\n";
        // file_1d_bin << "W_bin,Q2_mid,Histogram,BinValue,BinNumber,BinContent\n";
        file_1d_bin << "W_bin,Q2_mid,Histogram,BinValue,BinNumber,CrossSection,hole_syst_val,hole_syst_per\n";

        // float ff_scale = (1 / (pow((1 + (q2_mid_value / 0.7)), (0.31660)))) / 0.46044672679; // form factor scale
        float ff_scale = (1 / (pow((1 + (q2_mid_value / 0.7)), (0.47189)))) / 0.35599; // form factor scale

        std::cout << " q2_bin_size " << q2_bin_size << "   q2 range is " << q2_low_values[q2] << "-" << q2_up_values[q2] << std::endl;
        std::cout << " q2 values for flux " << q2_mid_value << "\n";

        TCanvas *can1 =
            new TCanvas("Nine_differential_Yields", "Nine_diff_Yields", 1900, 1400);

        can1->Divide(3, 3);

        for (short w = 8; w < 22; w++)
        {

            std::string w_path = q2_path + "/" + w_dirs[w - 8];
            std::string w_path_clas6 = q2_path_clas6 + "/" + w_dirs_clas6[w - 8];

            // std::cout << "  Processing W directory: " << w_path << std::endl;

            const Int_t ndims_5D = 5;
            Int_t bins_5D[ndims_5D] = {11, 11, 10, 6, 10};
            Double_t Bin_size_pPip = ((1.0 + 0.05 * w + 0.025 - MASS_PIM) - (0.938272 + 0.13957)) / 7.0;
            Double_t Bin_size_pipPim = ((1.0 + 0.05 * w + 0.025 - MASS_P) - (0.13957 + 0.13957)) / 7.0;

            // Double_t xmin_5D[ndims_5D] = {((0.938272 + 0.13957) - 2 * Bin_size_pPip), (0.13957 + 0.13957) - 2 * Bin_size_pipPim, 0., 0., 0.};
            // Double_t xmax_5D[ndims_5D] = {((1.0 + 0.05 * w + 0.025 - MASS_PIM) + 2 * Bin_size_pPip), ((1.0 + 0.05 * w + 0.025 - MASS_P) + 2 * Bin_size_pipPim), 180, 360, 360};

            Double_t xmin_5D[ndims_5D] = {((0.938272 + 0.13957) - 2 * Bin_size_pPip), (0.13957 + 0.13957) - 2 * Bin_size_pipPim, 0., 0., 0.};
            Double_t xmax_5D[ndims_5D] = {((1.0 + 0.05 * w + 0.025 - MASS_PIM) + 2 * Bin_size_pPip), ((1.0 + 0.05 * w + 0.025 - MASS_P) + 2 * Bin_size_pipPim), 180, 360, 360};

            // Double_t xmin_5D[5] = {(0.938272 + 0.13957), (0.13957 + 0.13957), 0., 0., 0.};
            // Double_t xmax_5D[5] = {(1.0 + 0.05 * w + 0.025 - MASS_PIM), (1.0 + 0.05 * w + 0.025 - MASS_P), 180, 360, 360};

            // std::cout << "initial value of Int cs : " << w - 8 << " is " << Int[w - 8] << std::endl;

            // if (w == 19 || w == 20)
            // continue;
            float const w_bin_for_flux = 1.0 + w * 0.05 + 0.05 / 2;
            std::cout << " w low " << (1.0 + 0.05 * w) << "\n";
            // std::cout << " w bin " << w << "\n";
            std::cout << " w_bin for flux " << w_bin_for_flux << "\n";

            // //done for testing twoQ2 merged case

            auto name = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            auto name_simu = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            auto name_Empty = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            auto name_evt = Form("h_5dim_evt_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            auto output_name = Form("nine_1D_cs_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            // auto output_name = Form("nine-1D_cs_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            int no_w_bins = w - 8; ////be careful here ............................

            // From THnsparse Prot
            h_exp_prot[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_prot/%s", name));
            h_simu_prot[no_w_bins] = (THnSparseD *)root_mc->Get(Form("THnSparse_7D_prot/%s", name_simu));
            h_exp_prot_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_prot/%s", name));
            // h_exp_prot_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_prot%s/%s", mod_folder.c_str(), name));
            h_empty_prot[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_prot/%s", name_Empty));
            h_th_prot[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_prot/%s", name_simu));

            h_simu_prot_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_prot/%s", name_simu));
            // h_simu_prot_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_prot%s/%s", mod_folder.c_str(), name_simu));

            //////////////////////////////////////////////////////////////////////
            h_simu_prot[no_w_bins]->Add(h_simu_prot_background[no_w_bins], -1.);
            // std::cout << " name is ...............  :  " << name << std::endl;

            // 2. Acceptance THnSparse: simu_rec/simu_thrown
            acceptance_7D_hist_prot[no_w_bins] =
                (THnSparseD *)h_simu_prot[no_w_bins]->Clone("Accepatnce_7D_prot");
            // std::cout << " name is ...............  :  " << name << std::endl;

            acceptance_7D_hist_prot[no_w_bins]->Divide(h_th_prot[no_w_bins]);

            h_rec_prot_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_prot_evt/%s", name_evt));

            h_th_prot_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_prot_evt/%s", name_evt));

            // h_rec_prot_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
            //     "THnSparse_7D_prot_evt/%s", name_evt));

            // h_th_prot_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
            //     "THnSparse_7D_thrown_prot_evt/%s", name_evt));

            // From THnsparse pim

            h_exp_pim[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_pim/%s", name));
            h_simu_pim[no_w_bins] = (THnSparseD *)root_mc->Get(Form("THnSparse_7D_pim/%s", name_simu));

            h_exp_pim_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_pim/%s", name));
            h_empty_pim[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_pim/%s", name_Empty));

            h_th_pim[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pim/%s", name_simu));

            // h_simu_pim[no_w_bins] =
            //     (THnSparseD *)root_mc1->Get(Form("THnSparse_7D_pim/%s", name_simu));

            h_simu_pim_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_pim/%s", name_simu));

            //////////////////////////////////////////////////////////////////////
            h_simu_pim[no_w_bins]->Add(h_simu_pim_background[no_w_bins], -1.);

            // acceptance_7D_hist_pim = ComputeAcceptanceTHnSparse(h_simu_pim, h_th_pim, "Accepatnce_7D_pim");
            acceptance_7D_hist_pim[no_w_bins] =
                (THnSparseD *)h_simu_pim[no_w_bins]->Clone("Accepatnce_7D_pim");
            // // std::cout << "  no of h_simu_pim bins " << h_simu_pim[no_w_bins]->GetNbins() << std::endl;
            acceptance_7D_hist_pim[no_w_bins]->Divide(h_th_pim[no_w_bins]);

            h_rec_pim_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_pim_evt/%s", name_evt));

            h_th_pim_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pim_evt/%s", name_evt));

            // h_rec_pim_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
            //     "THnSparse_7D_pim_evt/%s", name_evt));
            // h_th_pim_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
            //     "THnSparse_7D_thrown_pim_evt/%s", name_evt));

            // From THnsparse pip

            h_exp_pip[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_pip/%s", name));
            h_simu_pip[no_w_bins] = (THnSparseD *)root_mc->Get(Form("THnSparse_7D_pip/%s", name_simu));

            h_exp_pip_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_pip/%s", name));

            h_empty_pip[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_pip/%s", name_Empty));
            h_th_pip[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pip/%s", name_simu));

            // h_simu_pip[no_w_bins] =
            //     (THnSparseD *)root_mc1->Get(Form("THnSparse_7D_pip/%s", name_simu));

            h_simu_pip_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_pip/%s", name_simu));

            //////////////////////////////////////////////////////////////////////
            h_simu_pip[no_w_bins]->Add(h_simu_pip_background[no_w_bins], -1.);

            acceptance_7D_hist_pip[no_w_bins] =
                (THnSparseD *)h_simu_pip[no_w_bins]->Clone("Accepatnce_7D_pip");

            // ///// acceptance_7D_hist_pip[no_w_bins]->Add(h_simu_pip_background[no_w_bins], -1);

            acceptance_7D_hist_pip[no_w_bins]->Divide(h_th_pip[no_w_bins]);

            h_rec_pip_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_pip_evt/%s", name_evt));

            h_th_pip_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pip_evt/%s", name_evt));

            // h_rec_pip_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
            //     "THnSparse_7D_pip_evt/%s", name_evt));

            // h_th_pip_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
            //     "THnSparse_7D_thrown_pip_evt/%s", name_evt));
            Int_t *bins_prot_test = new Int_t[4];

            //     for (Int_t pipP = 1; pipP <= pipP_max; pipP++)
            //     {
            //         for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
            for (Int_t pipP = 3; pipP <= pipP_max - 2; pipP++)
            {
                for (Int_t pip_pim = 3; pip_pim <= pip_pim_max - 2; pip_pim++)
                {
                    for (Int_t theta = 1; theta <= theta_max; theta++)
                    {
                        for (Int_t phi = 1; phi <= phi_max; phi++)
                        {
                            for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                            {
                                int total_bin_content_pPip = 0;
                                int total_bin_err_pPip = 0;

                                // total_bin_content_pPip = total_bin_content_pPip + acceptance_corrected_7D_prot[no_w_bins]->GetBinContent(bins_prot);
                                // total_bin_err_pPip = total_bin_err_pPip + acceptance_corrected_7D_prot[no_w_bins]->GetBinError(bins_prot);

                                total_bins_in_sim[q2 - 1][w - 8]++;

                                bins_prot_test[0] = pipP;
                                bins_prot_test[1] = pip_pim;
                                bins_prot_test[2] = theta;
                                // bins_prot_test[3] = phi;
                                bins_prot_test[3] = alpha;

                                if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot_test) > 0.)
                                {

                                    eff_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot_test));
                                    ///// 2nd hist cd(2)
                                    d_eff_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins_prot_test));

                                    eff_threshold_cut_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins_prot_test) / (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot_test)));

                                    deff_vs_eff_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot_test),
                                                             acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins_prot_test) / (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot_test)));
                                }
                            }
                        }
                    }
                }
            }

            // ////////////////// EFF Cut TEST BEFORE ///////////////////////////////
            // // ////////////////// EFF Cut TEST BEFORE ///////////////////////////////
            // // // ////////////////// EFF Cut TEST BEFORE ///////////////////////////////
            // ////////////////// EFF Cut TEST BEFORE ///////////////////////////////
            {
                TCanvas *can_eff_checks_before = new TCanvas("eff_study_before", "eff_study_before", 900, 500);
                can_eff_checks_before->Divide(2, 1);
                can_eff_checks_before->cd(1);
                gPad->SetBottomMargin(0.15); // More space for X labels
                gPad->SetLeftMargin(0.1);    // More space for Y labels
                gPad->SetRightMargin(0.15);
                gPad->SetTopMargin(0.1);
                // gPad->SetGrid();
                // eff_before->SetTitle("Acceptance: 1.70 <= W < 1.75, 3.5 < Q^{2} < 4");
                // eff_before->SetXTitle("A");
                // eff_before->Draw("");
                // // can_eff_checks_before->cd(2);
                // // gPad->SetGrid();
                // // d_eff_before->SetTitle("Efficiency Uncertainty #delta#epsilon ");
                // // d_eff_before->SetXTitle("#delta#epsilon ");
                // // d_eff_before->Draw("");
                // can_eff_checks_before->cd(2);
                gPad->SetGrid();
                eff_threshold_cut_before->SetTitle("Acceptance error/ acceptance ");
                eff_threshold_cut_before->GetXaxis()->SetTitleSize(0.02); // Adjust size for X-axis
                eff_threshold_cut_before->SetTitleSize(0.04);             // Adjust size for the main title
                eff_threshold_cut_before->SetXTitle("#delta A/A");
                eff_threshold_cut_before->Draw("");

                double line_x = (q2 <= 3) ? 0.7 : 0.3;
                TLine *line3 = new TLine(line_x, 0, line_x, eff_threshold_cut_before->GetMaximum() * 0.7);

                line3->SetLineColor(kRed);
                line3->SetLineStyle(1); // Solid line
                line3->SetLineWidth(2); // Make it more visible
                line3->Draw("same");

                gStyle->SetPalette(kRainBow); // Set rainbow color palette

                can_eff_checks_before->cd(2);
                gPad->SetBottomMargin(0.15); // More space for X labels
                gPad->SetLeftMargin(0.15);   // More space for Y labels
                gPad->SetRightMargin(0.15);
                gPad->SetTopMargin(0.1);
                deff_vs_eff_before->SetYTitle("#delta A/A");
                deff_vs_eff_before->SetXTitle("A");
                deff_vs_eff_before->SetTitle("Acc. error / acc. vs. acceptance");
                // deff_vs_eff_before->GetXaxis()->SetTitleSize(0.05); // Adjust size for X-axis
                // deff_vs_eff_before->GetYaxis()->SetTitleSize(0.05); // Adjust size for Y-axis
                deff_vs_eff_before->SetTitleSize(0.04);
                deff_vs_eff_before->SetMinimum(1e-1);
                deff_vs_eff_before->SetMaximum(1e2);
                gPad->SetLogz(1);
                deff_vs_eff_before->Draw("COLZ");
                gPad->SetGrid();

                double line_x1 = (q2 <= 3) ? 0.7 : 0.3;
                TLine *line = new TLine(0., line_x1, 0.4, line_x1);
                line->SetLineColor(kRed);
                line->SetLineStyle(1); // Solid line
                line->SetLineWidth(2); // Make it more visible
                line->Draw("same");

                can_eff_checks_before->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/CS_measurement/5d_merged_before_eff_threshold_cut_wt_cs_741_files_%.1f<=Q2<=%.1f_GeV2_%.2f<=W<=%.2f_GeV.png",
                                                   q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));
            }

            // continue;
            // std::cout << "  is it printed ??? " << std::endl;

            set_all_errors(no_w_bins);

            set_eff_errors(Threshold_cuts[q2 - 1], no_w_bins);

            {

                // 1. faraday cup charge = 0.03790 ..C
                h_exp_prot[no_w_bins]->Add(h_exp_prot_background[no_w_bins], -1.);

                // h_exp_prot[no_w_bins]->Scale(1. * 0.99034 / 0.029113878);
                h_exp_prot[no_w_bins]->Scale(1. * 0.99397 / 0.029113878); // from valerii
                //  // h_exp_prot[no_w_bins]->Scale(1. / 0.0290267); // this is my analysis output and correcting beam blocker issues
                //// h_exp_prot[no_w_bins]->Scale(1. / 0.02788674); // this is using clas12 root and correcting beam blocker issues

                /// // 2.94703e+07 this is the faraday cup charge I got using golden criteria for pass2 runs, no correction applied
                ///// adjust 2.94703e+07 - 5.85024e+06 + 5.40664e+06 = 2.90267
                ///// corrected for beam blocker: 6.13032e+06 + 2.88288e+07  //// calculated using clas12 root without asking golden
                ///// Total = 2.788674 from clas12 root correcting for beam blocker issue
                ////  Total without correction : 2.8333034, using clas12root

                // // // faraday cup charge = 0.00240...C
                h_empty_prot[no_w_bins]->Scale(1. / 0.0024075358);

                // // // //Empty Target Substraction
                h_exp_prot[no_w_bins]->Add(h_empty_prot[no_w_bins], -1.);
                /////////// for cold hydrogen during empty taregt run ///////
                ///////// ORIGINAL DENSITY = 0.0708 gm/cm^3 , residual is  0.0010363 g/cm^3
                h_exp_prot[no_w_bins]->Scale(1.0485443);

                // radiative effects correction factors
                h_exp_prot[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);
                // std::cout << " rad_corr_fac " << rad_corr_factor[q2 - 1][w - 8] << "\n";

                // Acceptance corrected THnSparse
                acceptance_corrected_7D_prot[no_w_bins] =
                    (THnSparseD *)h_exp_prot[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_prot");
                acceptance_corrected_7D_prot[no_w_bins]->Divide(acceptance_7D_hist_prot[no_w_bins]);
                // acceptance_corrected_7D_prot[no_w_bins]->Write();

                // Hole Fillin Process
                acceptance_corrected_7D_simulation_prot[no_w_bins] =
                    (THnSparseD *)h_simu_prot[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_prot_simulation_prot");
                acceptance_corrected_7D_simulation_prot[no_w_bins]->Divide(acceptance_7D_hist_prot[no_w_bins]);

                hole_yield_simulation_prot[no_w_bins] =
                    (THnSparseD *)h_th_prot[no_w_bins]->Clone(
                        "hole_yield_simulation_prot");
                hole_yield_simulation_prot[no_w_bins]->Add(acceptance_corrected_7D_simulation_prot[no_w_bins], -1);
                hole_yield_simulation_prot[no_w_bins]->Scale(ff_scale);

                Int_t *bins_prot = new Int_t[4];

                //     for (Int_t pipP = 1; pipP <= pipP_max; pipP++)
                //     {
                //         for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                for (Int_t pipP = 3; pipP <= pipP_max - 2; pipP++)
                {
                    for (Int_t pip_pim = 3; pip_pim <= pip_pim_max - 2; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            for (Int_t phi = 1; phi <= phi_max; phi++)
                            {
                                for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                {
                                    int total_bin_content_pPip = 0;
                                    int total_bin_err_pPip = 0;

                                    // total_bin_content_pPip = total_bin_content_pPip + acceptance_corrected_7D_prot[no_w_bins]->GetBinContent(bins_prot);
                                    // total_bin_err_pPip = total_bin_err_pPip + acceptance_corrected_7D_prot[no_w_bins]->GetBinError(bins_prot);

                                    total_bins_in_sim[q2 - 1][w - 8]++;

                                    bins_prot[0] = pipP;
                                    bins_prot[1] = pip_pim;
                                    bins_prot[2] = theta;
                                    // bins_prot[3] = phi;
                                    bins_prot[3] = alpha;

                                    // if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot) > 0.)
                                    // {

                                    //     eff_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot));
                                    //     ///// 2nd hist cd(2)
                                    //     d_eff_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins_prot));

                                    //     eff_threshold_cut_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins_prot) / (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot)));

                                    //     deff_vs_eff_before->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot),
                                    //                              acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins_prot) / (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins_prot)));

                                    //     // eff_threshold_cut_after->Fill(sqrt((h_th_prot_evt[no_w_bins]->GetBinContent(bins_prot) - h_rec_prot_evt[no_w_bins]->GetBinContent(bins_prot)) *
                                    //     //                                    (h_rec_prot_evt[no_w_bins]->GetBinContent(bins_prot)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins_prot)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins_prot)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins_prot))) /
                                    //     //                               ((h_rec_prot_evt[no_w_bins]->GetBinContent(bins_prot)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins_prot))));
                                    // }

                                    if (acceptance_corrected_7D_simulation_prot[no_w_bins]->GetBinContent(bins_prot) > 0.)
                                    {
                                        filled_bins_in_sim[q2 - 1][w - 8]++;
                                        bin_content_sum_acc_corrected_simu[0] += acceptance_corrected_7D_simulation_prot[no_w_bins]->GetBinContent(bins_prot);
                                        bin_content_sum_acc_corrected_exp[0] += acceptance_corrected_7D_prot[no_w_bins]->GetBinContent(bins_prot);
                                    }
                                    else
                                    {
                                        holes_in_sim[q2 - 1][w - 8]++;
                                    }
                                    // // if (h_exp_prot[no_w_bins]->GetBinContent(bins_prot) != 0.)
                                    // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins_prot)) << std::endl;
                                    // how_many_bins = how_many_bins + 1;
                                    if (h_exp_prot[no_w_bins]->GetBinContent(bins_prot) == 0.)
                                        holes_in_exp[q2 - 1][w - 8] = holes_in_exp[q2 - 1][w - 8] + 1;
                                }
                            }
                        }
                    }
                }

                holes_fraction_sim[q2 - 1][w - 8] = holes_in_sim[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8];
                holes_fraction_exp[q2 - 1][w - 8] = holes_in_exp[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8];

                scale_factor[0] = (bin_content_sum_acc_corrected_exp[0] / bin_content_sum_acc_corrected_simu[0]);

                hole_yield_exp_prot[no_w_bins] =
                    (THnSparseD *)hole_yield_simulation_prot[no_w_bins]->Clone(
                        "hole_yield_exp_prot");
                hole_yield_exp_prot[no_w_bins]->Scale(scale_factor[0]);

                hole_yield_exp_prot[no_w_bins]->Scale(twopeg_W_scale_factors[q2 - 1][no_w_bins]);
                std::cout << " w " << no_w_bins << "  q2 " << q2 << "  w scale factor  " << twopeg_W_scale_factors[q2 - 1][no_w_bins] << std::endl;
                total_yield_exp_prot[no_w_bins] =
                    (THnSparseD *)acceptance_corrected_7D_prot[no_w_bins]->Clone(
                        "total_yield_exp_prot");

                total_yield_exp_prot[no_w_bins]->Add(hole_yield_exp_prot[no_w_bins], 1);
                ///  // total_yield_exp_prot[no_w_bins]->Sumw2();

                // // 3, 4 Normalization for luminosity, flux
                acceptance_corrected_7D_prot[no_w_bins]->Scale(0.755314965e-12);

                acceptance_corrected_7D_prot[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                total_yield_exp_prot[no_w_bins]->Scale(0.755314965e-12);
                total_yield_exp_prot[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));
                // // // std::cout << " flux  : " << flux(w_bin_for_flux, q2_mid_value) << "\n";
                // double integral = 0.0;
                // double binContentint = 0.0;
                // int no_of_5d_bins = 0;

                // for (int i = 1; i <= total_yield_exp_prot[no_w_bins]->GetNbins(); ++i)
                // {
                //     binContentint = total_yield_exp_prot[no_w_bins]->GetBinContent(i) / (w_bin_size * q2_bin_size);
                //     integral += binContentint;
                //     no_of_5d_bins = no_of_5d_bins + 1;
                // }

                // std::cout << "no of 5D bins: " << no_of_5d_bins << std::endl;
                // std::cout << "Integral 5D before bc: " << integral << std::endl;
                // // 5 Projection and Normalization : 3 factors

                TH1D *acceptance_corrected_inv_Ppip = acceptance_corrected_7D_prot[no_w_bins]->Projection(0);
                TH1D *acceptance_corrected_inv_pip_pim = acceptance_corrected_7D_prot[no_w_bins]->Projection(1);
                TH1D *acceptance_corrected_theta_prot = acceptance_corrected_7D_prot[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_prot = acceptance_corrected_7D_prot[no_w_bins]->Projection(3);

                // std::cout << "   no fo bins exp  " << h_exp_prot->GetNbinsX() << std::endl;

                Float_t factor_inv_mass = acceptance_corrected_inv_Ppip->GetBinWidth(5);
                Float_t factor_inv_mass_pip_pim = acceptance_corrected_inv_pip_pim->GetBinWidth(5);
                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_prot->GetBinWidth(5) / 180;

                acceptance_corrected_inv_Ppip->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_inv_pip_pim->Scale(1. / (w_bin_size * q2_bin_size));

                Int_1_acc_corr[w - 8] = acceptance_corrected_inv_Ppip->Integral();
                acceptance_corrected_inv_Ppip->IntegralAndError(1, acceptance_corrected_inv_Ppip->GetNbinsX(), Int_err_1_acc_corr[w - 8]);
                Int_2_acc_corr[w - 8] = acceptance_corrected_inv_pip_pim->Integral();
                acceptance_corrected_inv_pip_pim->IntegralAndError(1, acceptance_corrected_inv_pip_pim->GetNbinsX(), Int_err_2_acc_corr[w - 8]);

                std::cout << " Int_1_acc_corr before bc " << Int_1_acc_corr[w - 8] << "\n";
                // std::cout << " Int_2_acc_corr .......... " << Int_2_acc_corr[w - 8] << "\n";

                acceptance_corrected_inv_Ppip->Scale(1. / factor_inv_mass);
                acceptance_corrected_inv_pip_pim->Scale(1. / factor_inv_mass_pip_pim);
                acceptance_corrected_alpha_prot->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                // std::cout << " Int_1_acc_corr/factor_inv_mass .......... " << Int_1_acc_corr[w - 8] / factor_inv_mass << "\n";
                // std::cout << " Int_2_acc_corr/factor_inv_mass_pip_pim .......... " << Int_2_acc_corr[w - 8] / factor_inv_mass_pip_pim << "\n";

                TH1D *hnew = new TH1D("hnew", "#Theta_{p'}", 10, 0, 180.);
                float cosine_value;
                for (int i = 1; i <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); i++)
                {
                    cosine_value = -1 / cos(acceptance_corrected_theta_prot->GetBinContent(i));
                    hnew->SetBinContent(i, abs(cosine_value * acceptance_corrected_theta_prot->GetBinContent(i)));
                }
                TH1D *h_cos_th_prot;
                Double_t temp_prot;
                // Int_t n_theta_bins;
                h_cos_th_prot = new TH1D("h_cos_th_prot", "h_cos_th_prot", acceptance_corrected_theta_prot->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); j++)
                {
                    temp_prot = cos((acceptance_corrected_theta_prot->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (acceptance_corrected_theta_prot->GetBinLowEdge(j) + acceptance_corrected_theta_prot->GetBinWidth(j)));
                    h_cos_th_prot->SetBinContent(j, temp_prot);
                    h_cos_th_prot->SetBinError(j, 0.);
                }
                acceptance_corrected_theta_prot->Divide(h_cos_th_prot);
                acceptance_corrected_theta_prot->Scale(1. / (w_bin_size * q2_bin_size));

                TH1D *total_yield_with_hole_filled_inv_Ppip = total_yield_exp_prot[no_w_bins]->Projection(0);
                TH1D *total_yield_with_hole_filled_inv_pip_pim = total_yield_exp_prot[no_w_bins]->Projection(1);

                TH1D *total_yield_with_hole_filled_theta_prot = total_yield_exp_prot[no_w_bins]->Projection(2);
                TH1D *total_yield_with_hole_filled_alpha_prot = total_yield_exp_prot[no_w_bins]->Projection(3);

                total_yield_with_hole_filled_inv_Ppip->Scale(1. / w_bin_size / q2_bin_size);
                total_yield_with_hole_filled_inv_pip_pim->Scale(1. / w_bin_size / q2_bin_size);

                Int_1[w - 8] = total_yield_with_hole_filled_inv_Ppip->Integral();
                total_yield_with_hole_filled_inv_Ppip->IntegralAndError(1, total_yield_with_hole_filled_inv_Ppip->GetNbinsX(), Int_err_1[w - 8]);
                // std::cout << " Int_1 final bin " << total_yield_with_hole_filled_inv_Ppip->GetNbinsX() << "\n";
                std::cout << " Int_1  " << Int_1[w - 8] << "\n";
                // std::cout << " Int_1 err  " << Int_err_1[w - 8] << "\n";

                Int_2[w - 8] = total_yield_with_hole_filled_inv_pip_pim->Integral();
                total_yield_with_hole_filled_inv_pip_pim->IntegralAndError(1, total_yield_with_hole_filled_inv_pip_pim->GetNbinsX(), Int_err_2[w - 8]);
                // std::cout << " Int_2 " << Int_2[w - 8] << "\n";

                total_yield_with_hole_filled_theta_prot->Scale(1. / (w_bin_size * q2_bin_size));
                total_yield_with_hole_filled_alpha_prot->Scale(1. / (w_bin_size * q2_bin_size));

                Int_1_theta[w - 8] = total_yield_with_hole_filled_theta_prot->Integral();
                total_yield_with_hole_filled_theta_prot->IntegralAndError(1, total_yield_with_hole_filled_theta_prot->GetNbinsX(), Int_err_1_theta[w - 8]);
                Int_1_alpha[w - 8] = total_yield_with_hole_filled_alpha_prot->Integral();
                total_yield_with_hole_filled_alpha_prot->IntegralAndError(1, total_yield_with_hole_filled_alpha_prot->GetNbinsX(), Int_err_1_alpha[w - 8]);

                total_yield_with_hole_filled_theta_prot->Divide(h_cos_th_prot);
                total_yield_with_hole_filled_inv_Ppip->Scale(1. / factor_inv_mass);
                total_yield_with_hole_filled_inv_pip_pim->Scale(1. / factor_inv_mass);
                total_yield_with_hole_filled_alpha_prot->Scale(1. / factor_alpha_angle);

                /////////////////////////////////////////////////  CANVAS ///////////////////////////////////
                can1->cd(1);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // histogram.GetXaxis()->SetRangeUser(1., 5.);
                // h->GetXaxis()->SetRange(0, h->GetNbinsX() + 1);

                // // // ///////////////////////////////  Bin centering corrections  m_pPip ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  m_pPip ////////////////////////

                TH1D *h_bin_cent_corr_pPip;
                Double_t temp_bin_cent_corr_pPip;
                h_bin_cent_corr_pPip = new TH1D("h_bin_cent_corr_pPip", "h_bin_cent_corr_pPip", acceptance_corrected_inv_Ppip->GetXaxis()->GetNbins(), xmin_5D[0], xmax_5D[0]);
                for (Int_t j = 1; j <= acceptance_corrected_inv_Ppip->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_pPip = bin_centering_corr_w_q2[q2 - 1][w - 8];

                    // if (j >= 5 && j <= 18)
                    // {
                    //     // temp_bin_cent_corr_pPip = bin_centering_corr_m_pPip[q2 - 1][w - 8][j - 5];
                    //     temp_bin_cent_corr_pPip = bin_centering_corr_w_q2[q2 - 1][w - 8];
                    //     // temp_bin_cent_corr_pPip = bin_centering_corr_m_pPip[q2 - 1][w - 8][j - ] * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    //     // std::cout << " for  bin no = " << j << " bin content inv_Ppip  before " << acceptance_corrected_inv_Ppip->GetBinContent(j) << "   corr is  :  " << temp_bin_cent_corr_pPip << std::endl;

                    //     // std::cout << "  w is " << w_bin_for_flux << "  q2 is "
                    //     //           << q2_mid_value << "  inv mass bin j is " << j << "   m_pPip_corr, w_corr, q2_corr, are : " << bin_centering_corr_m_pPip[q2 - 1][w - 8][j - 3] << " , " << (bin_centering_corr_w[q2 - 1][w - 8])
                    //     //           << " , " << (bin_centering_corr_q2[q2 - 1][w - 8]) << std::flush;
                    // }
                    // else
                    //     temp_bin_cent_corr_pPip = 1.0;
                    // // std::cout << "   total bin centering corr " << temp_bin_cent_corr_pPip << std::endl;

                    h_bin_cent_corr_pPip->SetBinContent(j, temp_bin_cent_corr_pPip);
                    h_bin_cent_corr_pPip->SetBinError(j, 0.);
                }
                double integral_after_bc = 0.0;
                double binContentint_after_bc = 0.0;
                int no_of_5d_bins_after_bc = 0;
                float w_q2_bc_scle = bin_centering_corr_w_q2[q2 - 1][w - 8];
                total_yield_exp_prot[no_w_bins]->Scale(w_q2_bc_scle);
                for (int i = 1; i <= total_yield_exp_prot[no_w_bins]->GetNbins(); ++i)
                {
                    binContentint_after_bc = total_yield_exp_prot[no_w_bins]->GetBinContent(i) / (w_bin_size * q2_bin_size);
                    integral_after_bc += binContentint_after_bc;
                    no_of_5d_bins_after_bc = no_of_5d_bins_after_bc + 1;
                }
                std::cout << "no of 5D after bins: " << no_of_5d_bins_after_bc << std::endl;
                std::cout << "Integral 5D after bc: " << integral_after_bc << std::endl;
                // Clone the histogram
                // h_bin_cent_corr_pPip->Draw("same");
                TH1D *total_yield_with_hole_filled_inv_Ppip_modified = (TH1D *)total_yield_with_hole_filled_inv_Ppip->Clone();
                // // Modify the cloned histogram
                // total_yield_with_hole_filled_inv_Ppip_modified->Multiply(h_bin_cent_corr_pPip);
                TH1D *acceptance_corrected_inv_Ppip_modified = (TH1D *)acceptance_corrected_inv_Ppip->Clone();

                acceptance_corrected_inv_Ppip_modified->Multiply(h_bin_cent_corr_pPip);

                // Loop over bins and store data
                for (int bin = 3; bin <= 9; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_inv_Ppip_modified->GetBinContent(bin);
                    double binErr = total_yield_with_hole_filled_inv_Ppip_modified->GetBinError(bin);

                    double inv_pPip_mid = (total_yield_with_hole_filled_inv_Ppip_modified->GetXaxis()->GetBinLowEdge(bin));
                    //  +
                    //                        total_yield_with_hole_filled_inv_Ppip_modified->GetXaxis()->GetBinUpEdge(bin)) /
                    //                       2.0;

                    double binContent_acc = acceptance_corrected_inv_Ppip->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_inv_Ppip->GetBinContent(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_inv_Ppip_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_inv_Ppip_modified->SetBinError(bin, new_bin_err);

                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pPip" << "," << inv_pPip_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";

                    //          ///////////////////// TO incluse eff err cut systematics /////////////////
                    // int bin = h_w_int_bc_corr->FindBin(w_bin_for_flux);
                    // double original_error = Int_err_bc_corr[w - 8];
                    // double empty_cell_contribution = h_empty_cell_contribution->GetBinContent(bin);
                    // double int_hole_error = 0.5 * empty_cell_contribution;
                    // // Compute the total error using quadrature sum
                    // double total_error = sqrt(original_error * original_error + int_hole_error * int_hole_error);

                    // ///////////////////// dome incluse eff err cut systematics /////////////////

                    // // h_w_int_bc_corr->SetBinError(h_w_int_bc_corr->FindBin(w_bin_for_flux), Int_err_bc_corr[w - 8]);
                    // // Set the computed error to the corresponding bin
                    // h_w_int_bc_corr->SetBinError(bin, total_error);
                    //         // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pPip" << "," << inv_pPip_mid << "," << bin << "," << binContent << "\n";
                }
                acceptance_corrected_inv_Ppip_modified->SetMarkerStyle(20);
                acceptance_corrected_inv_Ppip_modified->SetMarkerColor(7);
                acceptance_corrected_inv_Ppip_modified->GetXaxis()->SetRange(5, 18);
                acceptance_corrected_inv_Ppip_modified->SetLineColor(7);

                // Draw the modified histogram
                acceptance_corrected_inv_Ppip_modified->SetTitle("");
                // total_yield_with_hole_filled_inv_Ppip_modified->SetTitle(
                //     "M(#pi^{+}p')");
                acceptance_corrected_inv_Ppip_modified->SetMinimum(0.);
                acceptance_corrected_inv_Ppip_modified->GetXaxis()->SetRange(5, 18);
                acceptance_corrected_inv_Ppip_modified->SetXTitle("M#pi^{+}p'(GeV)");
                acceptance_corrected_inv_Ppip_modified->SetYTitle("#Delta#sigma/#DeltaM_{#pi^{+}p'}[#mub/GeV]");
                // acceptance_corrected_inv_Ppip_modified->Draw("E ");
                acceptance_corrected_inv_Ppip_modified->SetMaximum(1.7 * total_yield_with_hole_filled_inv_Ppip_modified->GetMaximum());
                acceptance_corrected_inv_Ppip_modified->SetMinimum(0);
                acceptance_corrected_inv_Ppip_modified->Draw("Z ");

                total_yield_with_hole_filled_inv_Ppip_modified->SetMarkerStyle(20);
                // total_yield_with_hole_filled_inv_Ppip_modified->GetXaxis()->SetRange(5, 18);

                total_yield_with_hole_filled_inv_Ppip_modified->SetMarkerColor(4);
                // Draw the modified histogram
                total_yield_with_hole_filled_inv_Ppip_modified->Draw("Z same");
                Int_1_bc_corr[w - 8] = total_yield_with_hole_filled_inv_Ppip_modified->Integral() * factor_inv_mass;
                total_yield_with_hole_filled_inv_Ppip_modified->IntegralAndError(1, total_yield_with_hole_filled_inv_Ppip_modified->GetNbinsX(), Int_err_1_bc_corr[w - 8]);
                nine_1d_syst[w - 8][0] = total_yield_with_hole_filled_inv_Ppip_modified->Integral();
                // acceptance_corrected_inv_Ppip_modified->SetName("acceptance_corrected_inv_Ppip_modified");
                // Modify the cloned histogram

                std::cout << "    Int_1_bc_corr " << Int_1_bc_corr[w - 8] << std::endl;
                // total_yield_with_hole_filled_inv_Ppip->SetMarkerStyle(24);
                // total_yield_with_hole_filled_inv_Ppip->GetXaxis()->SetRange(5, 18);
                // total_yield_with_hole_filled_inv_Ppip->SetMarkerColor(4);
                // total_yield_with_hole_filled_inv_Ppip->Draw("Z same ");
                // // // // /////////////////////////// Done! Bin centering corrections  m_pPip ////////////////////////
                // // // // /////////////////////////// Done! Bin centering corrections  m_pPip ////////////////////////

                // // // //         can1->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/CS_measurement/bin_centering_corr/mPim_50_MeV_w_bins_with_bc_corr_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV.png",
                // // // //                           q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));
                // // // //     }
                // // // // }

                auto legend = new TLegend(0.7, 0.7, 0.95, 0.95);
                legend->SetNColumns(1); // Set the legend to have 2 columns
                legend->AddEntry(total_yield_with_hole_filled_inv_Ppip_modified, "Hole Filled", "ep");
                legend->AddEntry(acceptance_corrected_inv_Ppip_modified, "With Hole", "ep");
                // legend->AddEntry(total_yield_with_hole_filled_inv_Ppip, "Without BC Corr", "ep");

                // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path = w_path_clas6 + "/" + cs_files_clas6[0]; // Adjust W directory logic
                    CrossSectionData cs_data = readCrossSections(cs_file_path);
                    // Create TGraphErrors
                    TGraphErrors *graph = new TGraphErrors(7);
                    for (int i = 0; i < 7; ++i)
                    {
                        graph->SetPoint(i, cs_data.w_values[i], cs_data.cross_sections[i]);
                        graph->SetPointError(i, 0, cs_data.errors[i]);
                    }

                    graph->SetMarkerStyle(20);
                    graph->SetMarkerColor(6);
                    graph->SetLineColor(6);
                    graph->Draw("P same");
                    // Add legend entry
                    legend->AddEntry(graph, "CLAS6", "ep");
                }

                // legend->AddEntry(graph, "Syst", "L");}
                if (q2 < 0)
                {
                    std::string cs_file_path = w_path + "/" + cs_files[0]; // Adjust W directory logic
                    CrossSectionData cs_data = readCrossSections(cs_file_path);
                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_inv_Ppip->GetXaxis()->GetNbins(), xmin_5D[0], xmax_5D[0]);
                    for (Int_t j = 1; j <= acceptance_corrected_inv_Ppip->GetXaxis()->GetNbins(); j++)
                    {
                        // std::cout << " for  bin no = " << j << " cs_data.cross_sections[j - 5]  " << cs_data.cross_sections[j - 5] << std::endl;

                        if (j >= 5 && j <= 18)
                        {
                            temp_val = cs_data.cross_sections[j - 5];
                            // std::cout << " for  bin no = " << j << " cs_data.cross_sections[j - 5]  " << cs_data.cross_sections[j - 5] << std::endl;
                        }
                        else
                            temp_val = 10.0;

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                    legend->AddEntry(h_1d_final_syst_err, "Tot. syst.", "L");
                }
                legend->Draw();
                // for (int i = 0; i < 15; i++)
                // {
                //     std::cout << "Bin " << i << "   " << (total_yield_with_hole_filled_inv_Ppip_modified->GetBinContent(i))
                //               << "   " << (total_yield_with_hole_filled_inv_Ppip_modified->GetBinError(i))
                //               << "   " << (total_yield_with_hole_filled_inv_Ppip_modified->GetBinError(i)) / (total_yield_with_hole_filled_inv_Ppip_modified->GetBinContent(i)) * 100
                //               << std::endl;
                // }

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                can1->cd(3);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // // ///////////////////////////////  Bin centering corrections  m_pipPim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  m_pipPim ////////////////////////

                TH1D *h_bin_cent_corr_pipPim;
                Double_t temp_bin_cent_corr_pipPim;
                h_bin_cent_corr_pipPim = new TH1D("h_bin_cent_corr_pipPim", "h_bin_cent_corr_pipPim", acceptance_corrected_inv_pip_pim->GetXaxis()->GetNbins(), xmin_5D[1], xmax_5D[1]);
                for (Int_t j = 1; j <= acceptance_corrected_inv_pip_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_pipPim = (bin_centering_corr_w_q2[q2 - 1][w - 8]);

                    // if (j >= 5 && j <= 18)
                    //     temp_bin_cent_corr_pipPim = (bin_centering_corr_m_pipPim[q2 - 1][w - 8][j - 5]); //// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    // else
                    //     temp_bin_cent_corr_pipPim = 1.0;

                    h_bin_cent_corr_pipPim->SetBinContent(j, temp_bin_cent_corr_pipPim);
                    h_bin_cent_corr_pipPim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_pipPim->Draw("same");
                TH1D *total_yield_with_hole_filled_inv_pip_pim_modified = (TH1D *)total_yield_with_hole_filled_inv_pip_pim->Clone();
                // Modify the cloned histogram
                total_yield_with_hole_filled_inv_pip_pim_modified->Multiply(h_bin_cent_corr_pipPim);
                TH1D *acceptance_corrected_inv_pip_pim_modified = (TH1D *)acceptance_corrected_inv_pip_pim->Clone();
                acceptance_corrected_inv_pip_pim_modified->Multiply(h_bin_cent_corr_pipPim);

                // Loop over bins and store data
                for (int bin = 3; bin <= 9; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_inv_pip_pim_modified->GetBinContent(bin);
                    double inv_pipPim_mid = (total_yield_with_hole_filled_inv_pip_pim_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                                 //  total_yield_with_hole_filled_inv_pip_pim_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                                 // 2.0;

                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pipPim" << "," << inv_pipPim_mid << "," << bin << "," << binContent << "\n";

                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pipPim" << "," << bin << "," << binContent << "\n";

                    double binContent_acc = acceptance_corrected_inv_pip_pim->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_inv_pip_pim->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_inv_pip_pim_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_inv_pip_pim_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_inv_pip_pim_modified->SetBinError(bin, new_bin_err);

                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pipPim" << "," << inv_pipPim_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                }

                acceptance_corrected_inv_pip_pim_modified->SetMaximum(1.7 * total_yield_with_hole_filled_inv_pip_pim->GetMaximum());
                acceptance_corrected_inv_pip_pim_modified->SetMinimum(0);

                acceptance_corrected_inv_pip_pim_modified->SetMarkerStyle(20);
                acceptance_corrected_inv_pip_pim_modified->SetMarkerColor(7);
                // Draw the modified histogram
                acceptance_corrected_inv_pip_pim_modified->SetLineColor(7);
                acceptance_corrected_inv_pip_pim_modified->GetXaxis()->SetRange(5, 18);
                acceptance_corrected_inv_pip_pim_modified->SetTitle("");
                // "M(#pi^{+}#pi^{-})");
                // total_yield_with_hole_filled_inv_pip_pim_modified->SetStats(0);
                acceptance_corrected_inv_pip_pim_modified->SetYTitle("#Delta#sigma/#DeltaM_{#pi^{+}#pi^{-}}[#mub/GeV]");

                acceptance_corrected_inv_pip_pim_modified->SetXTitle(
                    "M#pi^{+}#pi^{-} (GeV)");
                // acceptance_corrected_inv_pip_pim->Fit("pol4");
                acceptance_corrected_inv_pip_pim_modified->SetMinimum(0.);
                acceptance_corrected_inv_pip_pim_modified->Draw("Z");
                total_yield_with_hole_filled_inv_pip_pim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_inv_pip_pim_modified->SetMarkerColor(4);

                // total_yield_with_hole_filled_inv_pip_pim_modified->GetXaxis()->SetRange(5, 18);

                total_yield_with_hole_filled_inv_pip_pim_modified->Draw("Z same");

                // total_yield_with_hole_filled_inv_pip_pim->SetMarkerStyle(24);
                // total_yield_with_hole_filled_inv_pip_pim->GetXaxis()->SetRange(5, 18);
                // total_yield_with_hole_filled_inv_pip_pim->SetMarkerColor(4);
                // total_yield_with_hole_filled_inv_pip_pim->Draw("Z same ");
                // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_pip_pim = w_path_clas6 + "/" + cs_files_clas6[2]; // Adjust W directory logic
                    CrossSectionData cs_data_pip_pim = readCrossSections(cs_file_path_pip_pim);

                    // // Create TGraphErrors
                    TGraphErrors *graph_pip_pim = new TGraphErrors(7);
                    for (int i = 0; i < 7; ++i)
                    {
                        graph_pip_pim->SetPoint(i, cs_data_pip_pim.w_values[i], cs_data_pip_pim.cross_sections[i]);
                        graph_pip_pim->SetPointError(i, 0, cs_data_pip_pim.errors[i]);
                    }

                    graph_pip_pim->SetMarkerStyle(20);
                    graph_pip_pim->SetMarkerColor(6);
                    graph_pip_pim->SetLineColor(6);
                    graph_pip_pim->Draw("P same");
                }
                if (q2 < 0)
                {
                    std::string cs_file_path_pip_pim = w_path + "/" + cs_files[2]; // Adjust W directory logic
                    CrossSectionData cs_data_pip_pim = readCrossSections(cs_file_path_pip_pim);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_inv_pip_pim->GetXaxis()->GetNbins(), xmin_5D[1], xmax_5D[1]);
                    for (Int_t j = 1; j <= acceptance_corrected_inv_pip_pim->GetXaxis()->GetNbins(); j++)
                    {

                        if (j >= 5 && j <= 18)
                        {
                            temp_val = cs_data_pip_pim.cross_sections[j - 5];
                        }
                        else
                            temp_val = 10.0;

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }

                // Draw the modified histogram
                Int_2_bc_corr[w - 8] = total_yield_with_hole_filled_inv_pip_pim_modified->Integral() * factor_inv_mass;
                total_yield_with_hole_filled_inv_pip_pim_modified->IntegralAndError(1, total_yield_with_hole_filled_inv_pip_pim_modified->GetNbinsX(), Int_err_2_bc_corr[w - 8]); /// this is prolom
                nine_1d_syst[w - 8][1] = total_yield_with_hole_filled_inv_pip_pim_modified->Integral();

                // int nBins = total_yield_with_hole_filled_inv_pip_pim_modified->GetNbinsX(); // Get number of bins

                // acceptance_corrected_inv_Ppip_modified->SetName("acceptance_corrected_inv_Ppip_modified");
                // Modify the cloned histogram

                // // // float estimate = 0;
                // // // estimate = total_yield_with_hole_filled_inv_pip_pim->Integral(0, -1);
                // // // std::cout << " total inv_pim_pim " << estimate << "\n";
                can1->cd(6);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // // ///////////////////////////////  Bin centering corrections  th_prot ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  th_prot ////////////////////////

                TH1D *h_bin_cent_corr_th_prot;
                Double_t temp_bin_cent_corr_th_prot;
                h_bin_cent_corr_th_prot = new TH1D("h_bin_cent_corr_th_prot", "h_bin_cent_corr_th_prot", acceptance_corrected_theta_prot->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                for (Int_t j = 1; j <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_th_prot = (bin_centering_corr_w_q2[q2 - 1][w - 8]);
                    // temp_bin_cent_corr_th_prot = (bin_centering_corr_th_prot[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_th_prot->SetBinContent(j, temp_bin_cent_corr_th_prot);
                    h_bin_cent_corr_th_prot->SetBinError(j, 0.);
                    // std::cout << "  w is " << w_bin_for_flux << "  q2 is "
                    //           << q2_mid_value << "  inv mass bin j is " << j << "   m_pPip_corr, w_corr, q2_corr, are : " << bin_centering_corr_th_prot[q2 - 1][w - 8][j] << " , " << (bin_centering_corr_w[q2 - 1][w - 8])
                    //           << " , " << (bin_centering_corr_q2[q2 - 1][w - 8]) << " total is :  " << temp_bin_cent_corr_th_prot << std::endl;
                }
                // Clone the histogram
                // h_bin_cent_corr_th_prot->Draw("same");

                TH1D *total_yield_with_hole_filled_theta_prot_modified = (TH1D *)total_yield_with_hole_filled_theta_prot->Clone();
                total_yield_with_hole_filled_theta_prot_modified->Multiply(h_bin_cent_corr_th_prot);
                nine_1d_syst[w - 8][3] = total_yield_with_hole_filled_theta_prot_modified->Integral();
                TH1D *acceptance_corrected_theta_prot_modified = (TH1D *)acceptance_corrected_theta_prot->Clone();
                acceptance_corrected_theta_prot_modified->Multiply(h_bin_cent_corr_th_prot);

                // Loop over bins and store data
                for (int bin = 1; bin <= 10; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_theta_prot_modified->GetBinContent(bin);
                    double theta_prot_mid = (total_yield_with_hole_filled_theta_prot_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                                //  total_yield_with_hole_filled_theta_prot_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                                // 2.0;
                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaP" << "," << theta_prot_mid << "," << bin << "," << binContent << "\n";

                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaP" << "," << bin << "," << binContent << "\n";

                    double binContent_acc = acceptance_corrected_theta_prot->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_theta_prot->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_theta_prot_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_theta_prot_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_theta_prot_modified->SetBinError(bin, new_bin_err);

                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaP" << "," << theta_prot_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                }

                acceptance_corrected_theta_prot_modified->SetTitle("");
                // total_yield_with_hole_filled_theta_prot_modified->SetTitle("#Theta_{p'}");
                acceptance_corrected_theta_prot_modified->SetXTitle("#Theta_{p'}(deg)");
                // acceptance_corrected_theta_prot->Fit("pol4");
                // total_yield_with_hole_filled_theta_prot_modified->SetStats(0);

                acceptance_corrected_theta_prot_modified->SetYTitle("#Delta#sigma/d(-cos#theta_{p'})[#mub/rad]"); //("Yield/d(-cos#theta)");
                acceptance_corrected_theta_prot_modified->SetLineColor(7);

                acceptance_corrected_theta_prot_modified->SetMarkerStyle(20);
                acceptance_corrected_theta_prot_modified->SetMarkerColor(7);
                acceptance_corrected_theta_prot_modified->Draw("Z");
                acceptance_corrected_theta_prot_modified->SetMaximum(1.7 * total_yield_with_hole_filled_theta_prot->GetMaximum());
                acceptance_corrected_theta_prot_modified->SetMinimum(0);

                total_yield_with_hole_filled_theta_prot_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_theta_prot_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_theta_prot_modified->SetMinimum(0.);
                total_yield_with_hole_filled_theta_prot_modified->Draw("Z same");

                // total_yield_with_hole_filled_theta_prot->SetMarkerStyle(24);
                // total_yield_with_hole_filled_theta_prot->SetMarkerColor(4);
                // total_yield_with_hole_filled_theta_prot->Draw("Z same ");
                // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_th_prot = w_path_clas6 + "/" + cs_files_clas6[5]; // Adjust W directory logic
                    CrossSectionData cs_data_th_prot = readCrossSections(cs_file_path_th_prot);

                    // Create TGraphErrors
                    TGraphErrors *graph_th_prot = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_th_prot->SetPoint(i, cs_data_th_prot.w_values[i], cs_data_th_prot.cross_sections[i]);
                        graph_th_prot->SetPointError(i, 0, cs_data_th_prot.errors[i]);
                    }

                    graph_th_prot->SetMarkerStyle(20);
                    graph_th_prot->SetMarkerColor(6);
                    graph_th_prot->SetLineColor(6);
                    graph_th_prot->Draw("P same");
                }
                if (q2 < 0)
                {
                    std::string cs_file_path_th_prot = w_path + "/" + cs_files[5]; // Adjust W directory logic
                    CrossSectionData cs_data_th_prot = readCrossSections(cs_file_path_th_prot);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_theta_prot->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                    for (Int_t j = 1; j <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); j++)
                    {

                        temp_val = cs_data_th_prot.cross_sections[j - 1];

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }

                can1->cd(9);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // // ///////////////////////////////  Bin centering corrections  alpha_prot ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  alpha_prot ////////////////////////

                TH1D *h_bin_cent_corr_alpha_prot;
                Double_t temp_bin_cent_corr_alpha_prot;
                h_bin_cent_corr_alpha_prot = new TH1D("h_bin_cent_corr_alpha_prot", "h_bin_cent_corr_alpha_prot", acceptance_corrected_alpha_prot->GetXaxis()->GetNbins(), xmin_5D[3], xmax_5D[3]);
                for (Int_t j = 1; j <= acceptance_corrected_alpha_prot->GetXaxis()->GetNbins(); j++)
                {
                    // temp_bin_cent_corr_alpha_prot = (bin_centering_corr_alpha_prot[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    temp_bin_cent_corr_alpha_prot = (bin_centering_corr_w_q2[q2 - 1][w - 8]);

                    h_bin_cent_corr_alpha_prot->SetBinContent(j, temp_bin_cent_corr_alpha_prot);
                    h_bin_cent_corr_alpha_prot->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_alpha_prot->Draw("same");
                TH1D *total_yield_with_hole_filled_alpha_prot_modified = (TH1D *)total_yield_with_hole_filled_alpha_prot->Clone();
                total_yield_with_hole_filled_alpha_prot_modified->Multiply(h_bin_cent_corr_alpha_prot);

                TH1D *acceptance_corrected_alpha_prot_modified = (TH1D *)acceptance_corrected_alpha_prot->Clone();
                acceptance_corrected_alpha_prot_modified->Multiply(h_bin_cent_corr_alpha_prot);

                // Loop over bins and store data
                for (int bin = 1; bin <= 10; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_alpha_prot_modified->GetBinContent(bin);
                    double alpha_prot_mid = (total_yield_with_hole_filled_alpha_prot_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                                //  total_yield_with_hole_filled_alpha_prot_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                                // 2.0;
                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "alphaP" << "," << alpha_prot_mid << "," << bin << "," << binContent << "\n";
                    double binContent_acc = acceptance_corrected_alpha_prot->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_alpha_prot->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_alpha_prot_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_alpha_prot_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_alpha_prot_modified->SetBinError(bin, new_bin_err);
                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "alphaP" << "," << alpha_prot_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                }
                acceptance_corrected_alpha_prot_modified->SetTitle("");
                acceptance_corrected_alpha_prot_modified->SetYTitle("#Delta#sigma/d#alpha_{p'}[#mub/rad]");
                acceptance_corrected_alpha_prot_modified->SetLineColor(7);
                acceptance_corrected_alpha_prot_modified->SetMarkerStyle(20);
                acceptance_corrected_alpha_prot_modified->SetMarkerColor(7);
                acceptance_corrected_alpha_prot_modified->SetXTitle("#alpha_{p'}(deg)");

                acceptance_corrected_alpha_prot_modified->Draw("Z");
                total_yield_with_hole_filled_alpha_prot_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_alpha_prot_modified->SetMarkerColor(4);

                // total_yield_with_hole_filled_alpha_prot_modified->SetTitle(
                //     "#alpha_{p'}");
                // total_yield_with_hole_filled_alpha_prot_modified->SetStats(0);
                // acceptance_corrected_alpha_prot->Fit("pol4");
                total_yield_with_hole_filled_alpha_prot_modified->Draw("Z same");

                acceptance_corrected_alpha_prot_modified->SetMaximum(1.7 * total_yield_with_hole_filled_alpha_prot_modified->GetMaximum());
                acceptance_corrected_alpha_prot_modified->SetMinimum(0);

                // Int_1_alpha[w - 8] = total_yield_with_hole_filled_alpha_prot_modified->Integral() * factor_alpha_angle;
                // total_yield_with_hole_filled_alpha_prot_modified->IntegralAndError(1, total_yield_with_hole_filled_alpha_prot_modified->GetNbinsX(), Int_err_1_alpha[w - 8]);
                nine_1d_syst[w - 8][6] = total_yield_with_hole_filled_alpha_prot_modified->Integral();

                // total_yield_with_hole_filled_alpha_prot->SetMarkerStyle(24);
                // total_yield_with_hole_filled_alpha_prot->SetMarkerColor(4);
                // total_yield_with_hole_filled_alpha_prot->Draw("Z same ");
                // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_al_prot = w_path_clas6 + "/" + cs_files_clas6[8]; // Adjust W directory logic
                    CrossSectionData cs_data_al_prot = readCrossSections(cs_file_path_al_prot);

                    // Create TGraphErrors
                    TGraphErrors *graph_al_prot = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_al_prot->SetPoint(i, cs_data_al_prot.w_values[i], cs_data_al_prot.cross_sections[i]);
                        graph_al_prot->SetPointError(i, 0, cs_data_al_prot.errors[i]);
                    }

                    graph_al_prot->SetMarkerStyle(20);
                    graph_al_prot->SetMarkerColor(6);
                    graph_al_prot->SetLineColor(6);
                    graph_al_prot->Draw("P same");
                }
                if (q2 < 0)
                {
                    std::string cs_file_path_al_prot = w_path + "/" + cs_files[8]; // Adjust W directory logic
                    CrossSectionData cs_data_al_prot = readCrossSections(cs_file_path_al_prot);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_alpha_prot->GetXaxis()->GetNbins(), xmin_5D[3], xmax_5D[3]);
                    for (Int_t j = 1; j <= acceptance_corrected_alpha_prot->GetXaxis()->GetNbins(); j++)
                    {
                        // std::cout << " for  bin no = " << j << " cs_data.cross_sections[j - 5]  " << cs_data_al_prot.cross_sections[j] << std::endl;

                        temp_val = cs_data_al_prot.cross_sections[j - 1];

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }
                // // // float estimate2 = 0;
                // // // estimate2 = total_yield_with_hole_filled_alpha_prot->Integral(0, -1);
                // // // std::cout << " total from alpha_prot: " << estimate2 << "\n";
            }

            {
                h_exp_pip[no_w_bins]->Add(h_exp_pip_background[no_w_bins], -1.);

                // faraday cup charge
                // h_exp_pip[no_w_bins]->Scale(1. * 0.99034 / 0.029113878);

                h_exp_pip[no_w_bins]->Scale(1. * 0.99397 / 0.029113878); // from valerii
                // h_exp_pip[no_w_bins]->Scale(1. / 0.0290267);   // this is my analysis output and correcting beam blocker issues
                // h_exp_pip[no_w_bins]->Scale(1. / 0.02788674);  // this is using clas12 root and correcting beam blocker issues

                // faraday cup charge = 0.00240...C
                h_empty_pip[no_w_bins]->Scale(1. / 0.0024075358);

                // SUBTRUCT EMPTY TARGET
                h_exp_pip[no_w_bins]->Add(h_empty_pip[no_w_bins], -1.);

                /////////// for cold hydrogen during empty taregt run ///////
                h_exp_pip[no_w_bins]->Scale(1.0485443);

                // radiative effects correction factors
                h_exp_pip[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);

                ////////  // /// for bin centering w-q2
                ////////// // h_exp_pip[no_w_bins]->Scale(1 / ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])));

                acceptance_corrected_7D_pip[no_w_bins] =
                    (THnSparseD *)h_exp_pip[no_w_bins]->Clone(
                        "Accepatnce_corrected_inv_7D_pip");
                acceptance_corrected_7D_pip[no_w_bins]->Divide(acceptance_7D_hist_pip[no_w_bins]);

                acceptance_corrected_7D_simulation_pip[no_w_bins] =
                    (THnSparseD *)h_simu_pip[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_pip_simulation_pip");
                acceptance_corrected_7D_simulation_pip[no_w_bins]->Divide(acceptance_7D_hist_pip[no_w_bins]);

                hole_yield_simulation_pip[no_w_bins] =
                    (THnSparseD *)h_th_pip[no_w_bins]->Clone(
                        "hole_yield_simulation_pip");
                hole_yield_simulation_pip[no_w_bins]->Add(acceptance_corrected_7D_simulation_pip[no_w_bins], -1);
                hole_yield_simulation_pip[no_w_bins]->Scale(ff_scale);

                Int_t *bins_pip = new Int_t[4];

                for (Int_t pimP = 5; pimP <= pimP_max - 4; pimP++)
                {
                    for (Int_t pip_pim = 3; pip_pim <= pip_pim_max - 2; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            // for (Int_t phi = 1; phi <= phi_max; phi++)
                            // {
                            for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                            {
                                bins_pip[0] = pimP;
                                bins_pip[1] = pip_pim;
                                bins_pip[2] = theta;
                                // bins_pip[3] = phi;
                                bins_pip[3] = alpha;
                                if (acceptance_corrected_7D_simulation_pip[no_w_bins]->GetBinContent(bins_pip) > 0.)
                                {
                                    bin_content_sum_acc_corrected_simu[1] += acceptance_corrected_7D_simulation_pip[no_w_bins]->GetBinContent(bins_pip);

                                    bin_content_sum_acc_corrected_exp[1] += acceptance_corrected_7D_pip[no_w_bins]->GetBinContent(bins_pip);
                                }
                                // }
                            }
                        }
                    }
                }
                scale_factor[1] = (bin_content_sum_acc_corrected_exp[1] / bin_content_sum_acc_corrected_simu[1]);
                hole_yield_exp_pip[no_w_bins] =
                    (THnSparseD *)hole_yield_simulation_pip[no_w_bins]->Clone(
                        "hole_yield_exp_pip");
                hole_yield_exp_pip[no_w_bins]->Scale(scale_factor[1]);

                hole_yield_exp_pip[no_w_bins]->Scale(twopeg_W_scale_factors[q2 - 1][no_w_bins]);

                total_yield_exp_pip[no_w_bins] =
                    (THnSparseD *)acceptance_corrected_7D_pip[no_w_bins]->Clone(
                        "total_yield_exp_pip");
                total_yield_exp_pip[no_w_bins]->Add(hole_yield_exp_pip[no_w_bins], 1);

                // here i am trying to scale for luminosity
                acceptance_corrected_7D_pip[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_pip[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                TH1D *acceptance_corrected_inv_Ppim = acceptance_corrected_7D_pip[no_w_bins]->Projection(0);
                TH1D *acceptance_corrected_theta_pip = acceptance_corrected_7D_pip[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_pip = acceptance_corrected_7D_pip[no_w_bins]->Projection(3);

                total_yield_exp_pip[no_w_bins]->Scale(0.755314965e-12);
                total_yield_exp_pip[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                Float_t factor_inv_mass = acceptance_corrected_inv_Ppim->GetBinWidth(5);
                // std::cout << "scale factor inv mass: " << factor_inv_mass << std::endl;

                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_pip->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle pip : " << factor_alpha_angle << std::endl;

                TH1D *total_yield_with_hole_filled_inv_Ppim = total_yield_exp_pip[no_w_bins]->Projection(0);
                TH1D *total_yield_with_hole_filled_theta_pip = total_yield_exp_pip[no_w_bins]->Projection(2);
                TH1D *total_yield_with_hole_filled_alpha_pip = total_yield_exp_pip[no_w_bins]->Projection(3);

                TH1D *h_cos_th_pip;
                Double_t temp_pip;
                // Int_t n_theta_bins;
                h_cos_th_pip = new TH1D("h_cos_th_pip", "h_cos_th_pip", total_yield_with_hole_filled_theta_pip->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= total_yield_with_hole_filled_theta_pip->GetXaxis()->GetNbins(); j++)
                {
                    temp_pip = cos((total_yield_with_hole_filled_theta_pip->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (total_yield_with_hole_filled_theta_pip->GetBinLowEdge(j) + total_yield_with_hole_filled_theta_pip->GetBinWidth(j)));
                    h_cos_th_pip->SetBinContent(j, temp_pip);
                    h_cos_th_pip->SetBinError(j, 0.);
                }
                total_yield_with_hole_filled_inv_Ppim->Scale(1. / (w_bin_size * q2_bin_size));
                Int_3[w - 8] = total_yield_with_hole_filled_inv_Ppim->Integral();
                total_yield_with_hole_filled_inv_Ppim->IntegralAndError(1, total_yield_with_hole_filled_inv_Ppim->GetNbinsX(), Int_err_3[w - 8]);

                total_yield_with_hole_filled_inv_Ppim->Scale(1. / factor_inv_mass);

                total_yield_with_hole_filled_theta_pip->Scale(1. / (w_bin_size * q2_bin_size));
                total_yield_with_hole_filled_alpha_pip->Scale(1. / (w_bin_size * q2_bin_size));

                Int_2_theta[w - 8] = total_yield_with_hole_filled_theta_pip->Integral();
                total_yield_with_hole_filled_theta_pip->IntegralAndError(1, total_yield_with_hole_filled_theta_pip->GetNbinsX(), Int_err_2_theta[w - 8]);

                Int_2_alpha[w - 8] = total_yield_with_hole_filled_alpha_pip->Integral();
                total_yield_with_hole_filled_alpha_pip->IntegralAndError(1, total_yield_with_hole_filled_alpha_pip->GetNbinsX(), Int_err_2_alpha[w - 8]);

                total_yield_with_hole_filled_theta_pip->Divide(h_cos_th_pip);

                acceptance_corrected_inv_Ppim->Scale(1. / (w_bin_size * q2_bin_size));
                Int_3_acc_corr[w - 8] = acceptance_corrected_inv_Ppim->Integral();
                acceptance_corrected_inv_Ppim->IntegralAndError(1, acceptance_corrected_inv_Ppim->GetNbinsX(), Int_err_3_acc_corr[w - 8]);
                // std::cout << " Int_3_acc_corr .......... " << Int_3_acc_corr[w - 8] << "\n";

                total_yield_with_hole_filled_alpha_pip->Scale(1. / factor_alpha_angle);
                acceptance_corrected_inv_Ppim->Scale(1. / factor_inv_mass);
                acceptance_corrected_theta_pip->Divide(h_cos_th_pip);
                acceptance_corrected_theta_pip->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_alpha_pip->Scale(1. / factor_alpha_angle);
                acceptance_corrected_alpha_pip->Scale(1. / (w_bin_size * q2_bin_size));

                can1->cd(2);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // // ///////////////////////////////  Bin centering corrections  m_pPim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  m_pPim ////////////////////////

                TH1D *h_bin_cent_corr_pPim;
                Double_t temp_bin_cent_corr_pPim;
                h_bin_cent_corr_pPim = new TH1D("h_bin_cent_corr_pPim", "h_bin_cent_corr_pPim", acceptance_corrected_inv_Ppim->GetXaxis()->GetNbins(), xmin_5D[0], xmax_5D[0]);
                for (Int_t j = 1; j <= acceptance_corrected_inv_Ppim->GetXaxis()->GetNbins(); j++)
                {
                    // if (j >= 5 && j <= 18)
                    //     temp_bin_cent_corr_pPim = (bin_centering_corr_m_pPim[q2 - 1][w - 8][j - 5]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    temp_bin_cent_corr_pPim = (bin_centering_corr_w_q2[q2 - 1][w - 8]);
                    // else
                    //     temp_bin_cent_corr_pPim = 1.0;
                    h_bin_cent_corr_pPim->SetBinContent(j, temp_bin_cent_corr_pPim);
                    h_bin_cent_corr_pPim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_pPim->Draw("same");
                TH1D *total_yield_with_hole_filled_inv_pPim_modified = (TH1D *)total_yield_with_hole_filled_inv_Ppim->Clone();
                // Modify the cloned histogram
                total_yield_with_hole_filled_inv_pPim_modified->Multiply(h_bin_cent_corr_pPim);

                TH1D *acceptance_corrected_inv_pPim_modified = (TH1D *)acceptance_corrected_inv_Ppim->Clone();
                // Modify the cloned histogram
                acceptance_corrected_inv_pPim_modified->Multiply(h_bin_cent_corr_pPim);

                for (int bin = 3; bin <= 9; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_inv_pPim_modified->GetBinContent(bin);
                    double inv_pPim_mid = (total_yield_with_hole_filled_inv_pPim_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                            //    total_yield_with_hole_filled_inv_pPim_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                            //   2.0;
                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pPim" << "," << inv_pPim_mid << "," << bin << "," << binContent << "\n";
                    double binContent_acc = acceptance_corrected_inv_Ppim->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_inv_Ppim->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_inv_pPim_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_inv_pPim_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_inv_pPim_modified->SetBinError(bin, new_bin_err);
                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "pPim" << "," << inv_pPim_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                }
                acceptance_corrected_inv_pPim_modified->SetLineColor(7);
                acceptance_corrected_inv_pPim_modified->SetTitle("");
                // total_yield_with_hole_filled_inv_Ppim->SetTitle("M(#pi^{-}p')");
                acceptance_corrected_inv_pPim_modified->SetStats(0);
                acceptance_corrected_inv_pPim_modified->SetMinimum(0.);
                acceptance_corrected_inv_pPim_modified->SetXTitle("M#pi^{-}p'(GeV)");
                acceptance_corrected_inv_pPim_modified->SetMarkerStyle(20);
                acceptance_corrected_inv_pPim_modified->SetMarkerColor(7);
                acceptance_corrected_inv_pPim_modified->SetYTitle("#Delta#sigma/#DeltaM_{#pi^{-}p'}[#mub/GeV]");

                // Draw the modified histogram
                acceptance_corrected_inv_pPim_modified->GetXaxis()->SetRange(5, 18);
                acceptance_corrected_inv_pPim_modified->Draw("Z");
                total_yield_with_hole_filled_inv_pPim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_inv_pPim_modified->SetMarkerColor(4);

                // acceptance_corrected_inv_Ppim_modified->Fit("pol4");
                // acceptance_corrected_inv_pPim_modified->GetXaxis()->SetRange(5, 18);
                total_yield_with_hole_filled_inv_pPim_modified->Draw("Z same");
                Int_3_bc_corr[w - 8] = total_yield_with_hole_filled_inv_pPim_modified->Integral() * factor_inv_mass;
                total_yield_with_hole_filled_inv_pPim_modified->IntegralAndError(1, total_yield_with_hole_filled_inv_pPim_modified->GetNbinsX(), Int_err_3_bc_corr[w - 8]);
                nine_1d_syst[w - 8][2] = total_yield_with_hole_filled_inv_pPim_modified->Integral();
                // Loop over bins and store data
                std::cout << "int 3 bc corr : " << Int_3_bc_corr[w - 8] << std::endl;

                acceptance_corrected_inv_pPim_modified->SetMaximum(1.7 * total_yield_with_hole_filled_inv_pPim_modified->GetMaximum());
                acceptance_corrected_inv_pPim_modified->SetMinimum(0);

                // total_yield_with_hole_filled_inv_Ppim->SetMarkerStyle(24);
                // total_yield_with_hole_filled_inv_Ppim->GetXaxis()->SetRange(5, 18);
                // total_yield_with_hole_filled_inv_Ppim->SetMarkerColor(4);
                // total_yield_with_hole_filled_inv_Ppim->Draw("Z same ");
                // // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path = w_path_clas6 + "/" + cs_files_clas6[1]; // Adjust W directory logic
                    CrossSectionData cs_data_pPim = readCrossSections(cs_file_path);

                    // Create TGraphErrors
                    TGraphErrors *graph = new TGraphErrors(7);
                    for (int i = 0; i < 7; ++i)
                    {
                        graph->SetPoint(i, cs_data_pPim.w_values[i], cs_data_pPim.cross_sections[i]);
                        graph->SetPointError(i, 0, cs_data_pPim.errors[i]);
                    }

                    graph->SetMarkerStyle(20);
                    graph->SetMarkerColor(6);
                    graph->SetLineColor(6);
                    graph->Draw("P same");
                }
                if (q2 < 0)
                {
                    std::string cs_file_path = w_path + "/" + cs_files[1]; // Adjust W directory logic
                    CrossSectionData cs_data_pPim = readCrossSections(cs_file_path);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_inv_Ppim->GetXaxis()->GetNbins(), xmin_5D[0], xmax_5D[0]);
                    for (Int_t j = 1; j <= acceptance_corrected_inv_Ppim->GetXaxis()->GetNbins(); j++)
                    {

                        if (j >= 5 && j <= 18)
                        {
                            temp_val = cs_data_pPim.cross_sections[j - 5];
                        }
                        else
                            temp_val = 10.0;

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }

                can1->cd(5);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // ///////////////////////////////  Bin centering corrections  th_pip ////////////////////////
                // // ///////////////////////////////  Bin centering corrections  th_pip ////////////////////////

                TH1D *h_bin_cent_corr_th_pip;
                Double_t temp_bin_cent_corr_th_pip;
                h_bin_cent_corr_th_pip = new TH1D("h_bin_cent_corr_th_pip", "h_bin_cent_corr_th_pip", acceptance_corrected_theta_pip->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                for (Int_t j = 1; j <= acceptance_corrected_theta_pip->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_th_pip = (bin_centering_corr_w_q2[q2 - 1][w - 8]);

                    // temp_bin_cent_corr_th_pip = (bin_centering_corr_th_pip[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_th_pip->SetBinContent(j, temp_bin_cent_corr_th_pip);
                    h_bin_cent_corr_th_pip->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_th_pip->Draw("same");
                TH1D *total_yield_with_hole_filled_theta_pip_modified = (TH1D *)total_yield_with_hole_filled_theta_pip->Clone();
                total_yield_with_hole_filled_theta_pip_modified->Multiply(h_bin_cent_corr_th_pip);
                TH1D *acceptance_corrected_theta_pip_modified = (TH1D *)acceptance_corrected_theta_pip->Clone();
                acceptance_corrected_theta_pip_modified->Multiply(h_bin_cent_corr_th_pip);

                nine_1d_syst[w - 8][4] = total_yield_with_hole_filled_theta_pip_modified->Integral();
                for (int bin = 1; bin <= 10; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_theta_pip_modified->GetBinContent(bin);
                    double theta_pip_mid = (total_yield_with_hole_filled_theta_pip_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                              // total_yield_with_hole_filled_theta_pip_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                              //    2.0;
                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaPip" << "," << theta_pip_mid << "," << bin << "," << binContent << "\n";
                    double binContent_acc = acceptance_corrected_theta_pip->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_theta_pip->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_theta_pip_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_theta_pip_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_theta_pip_modified->SetBinError(bin, new_bin_err);
                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaPip" << "," << theta_pip_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                }

                acceptance_corrected_theta_pip_modified->SetMarkerStyle(20);
                acceptance_corrected_theta_pip_modified->SetMarkerColor(7);
                acceptance_corrected_theta_pip_modified->SetLineColor(7);

                acceptance_corrected_theta_pip_modified->Draw("Z ");
                acceptance_corrected_theta_pip_modified->SetYTitle("#Delta#sigma/d(-cos#theta_{#pi^{+}})[#mub/rad]");

                acceptance_corrected_theta_pip_modified->SetMaximum(1.7 * total_yield_with_hole_filled_theta_pip_modified->GetMaximum());
                acceptance_corrected_theta_pip_modified->SetMinimum(0);
                acceptance_corrected_theta_pip_modified->SetTitle("");
                // total_yield_with_hole_filled_theta_pip_modified->SetTitle(
                //     "#Theta_{#pi^{+}}");
                acceptance_corrected_theta_pip_modified->SetStats(0);
                acceptance_corrected_theta_pip_modified->SetXTitle("#Theta_{#pi^{+}}(deg)");

                total_yield_with_hole_filled_theta_pip_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_theta_pip_modified->SetMarkerColor(4);

                total_yield_with_hole_filled_theta_pip_modified->Draw("Z same");

                // total_yield_with_hole_filled_theta_pip->SetMarkerStyle(24);
                // total_yield_with_hole_filled_theta_pip->SetMarkerColor(4);
                // total_yield_with_hole_filled_theta_pip->Draw("Z same ");
                // // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_th_pip = w_path_clas6 + "/" + cs_files_clas6[4]; // Adjust W directory logic
                    CrossSectionData cs_data_th_pip = readCrossSections(cs_file_path_th_pip);

                    // Create TGraphErrors
                    TGraphErrors *graph_th_pip = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_th_pip->SetPoint(i, cs_data_th_pip.w_values[i], cs_data_th_pip.cross_sections[i]);
                        graph_th_pip->SetPointError(i, 0, cs_data_th_pip.errors[i]);
                    }

                    graph_th_pip->SetMarkerStyle(20);
                    graph_th_pip->SetMarkerColor(6);
                    graph_th_pip->SetLineColor(6);
                    graph_th_pip->Draw("P same");
                }

                /////////////// Syst //////////////////
                if (q2 < 0)
                {
                    std::string cs_file_path_th_pip = w_path + "/" + cs_files[4]; // Adjust W directory logic
                    CrossSectionData cs_data_th_pip = readCrossSections(cs_file_path_th_pip);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_theta_pip->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                    for (Int_t j = 1; j <= acceptance_corrected_theta_pip->GetXaxis()->GetNbins(); j++)
                    {

                        temp_val = cs_data_th_pip.cross_sections[j - 1];

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }

                can1->cd(8);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // ///////////////////////////////  Bin centering corrections  alpha_pip ////////////////////////
                // // ///////////////////////////////  Bin centering corrections  alpha_pip ////////////////////////

                TH1D *h_bin_cent_corr_alpha_pip;
                Double_t temp_bin_cent_corr_alpha_pip;
                h_bin_cent_corr_alpha_pip = new TH1D("h_bin_cent_corr_alpha_pip", "h_bin_cent_corr_alpha_pip", acceptance_corrected_alpha_pip->GetXaxis()->GetNbins(), xmin_5D[3], xmax_5D[3]);
                for (Int_t j = 1; j <= acceptance_corrected_alpha_pip->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_alpha_pip = (bin_centering_corr_w_q2[q2 - 1][w - 8]);

                    // temp_bin_cent_corr_alpha_pip = (bin_centering_corr_alpha_pip[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    // std::cout << "  alpha corr val for bin centering is : " << 1 / (bin_centering_corr_alpha_pip[q2 - 1][w - 8][j]) * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])) << std::endl;
                    h_bin_cent_corr_alpha_pip->SetBinContent(j, temp_bin_cent_corr_alpha_pip);
                    h_bin_cent_corr_alpha_pip->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_alpha_pip->Draw("same");
                TH1D *total_yield_with_hole_filled_alpha_pip_modified = (TH1D *)total_yield_with_hole_filled_alpha_pip->Clone();
                total_yield_with_hole_filled_alpha_pip_modified->Multiply(h_bin_cent_corr_alpha_pip); //// multiply.............?????
                TH1D *acceptance_corrected_alpha_pip_modified = (TH1D *)acceptance_corrected_alpha_pip->Clone();
                acceptance_corrected_alpha_pip_modified->Multiply(h_bin_cent_corr_alpha_pip);

                for (int bin = 1; bin <= 10; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_alpha_pip_modified->GetBinContent(bin);
                    double alpha_pip_mid = (total_yield_with_hole_filled_alpha_pip_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                              // total_yield_with_hole_filled_alpha_pip_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                              //    2.0;
                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "alphaPip" << "," << alpha_pip_mid << "," << bin << "," << binContent << "\n";
                    double binContent_acc = acceptance_corrected_alpha_pip->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_alpha_pip->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_alpha_pip_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_alpha_pip_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_alpha_pip_modified->SetBinError(bin, new_bin_err);

                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "alphaPip" << "," << alpha_pip_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                }
                acceptance_corrected_alpha_pip_modified->SetLineColor(7);
                acceptance_corrected_alpha_pip_modified->SetMarkerStyle(20);
                acceptance_corrected_alpha_pip_modified->SetMarkerColor(7);
                acceptance_corrected_alpha_pip_modified->SetMaximum(1.7 * total_yield_with_hole_filled_alpha_pip->GetMaximum());
                acceptance_corrected_alpha_pip_modified->SetMinimum(0);
                acceptance_corrected_alpha_pip_modified->SetTitle("");
                // total_yield_with_hole_filled_alpha_pip->SetTitle(
                //     "#alpha_{#pi^{+}}");
                acceptance_corrected_alpha_pip_modified->SetStats(0);
                acceptance_corrected_alpha_pip_modified->SetYTitle("#Delta#sigma/d#alpha_{#pi^{+}}[#mub/rad]");
                acceptance_corrected_alpha_pip_modified->SetXTitle(" #alpha_{#pi^{+}}(deg)");

                acceptance_corrected_alpha_pip_modified->Draw("Z");
                total_yield_with_hole_filled_alpha_pip_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_alpha_pip_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_alpha_pip_modified->Draw("Z same");

                // Int_2_alpha[w - 8] = total_yield_with_hole_filled_alpha_pip_modified->Integral() * factor_alpha_angle;
                // total_yield_with_hole_filled_alpha_pip_modified->IntegralAndError(1, total_yield_with_hole_filled_alpha_pip_modified->GetNbinsX(), Int_err_2_alpha[w - 8]);
                nine_1d_syst[w - 8][7] = total_yield_with_hole_filled_alpha_pip_modified->Integral();

                // total_yield_with_hole_filled_alpha_pip->SetMarkerStyle(24);
                // total_yield_with_hole_filled_alpha_pip->SetMarkerColor(4);
                // total_yield_with_hole_filled_alpha_pip->Draw("Z same ");

                // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_al_pip = w_path_clas6 + "/" + cs_files_clas6[7]; // Adjust W directory logic
                    CrossSectionData cs_data_al_pip = readCrossSections(cs_file_path_al_pip);

                    // Create TGraphErrors
                    TGraphErrors *graph_al_pip = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_al_pip->SetPoint(i, cs_data_al_pip.w_values[i], cs_data_al_pip.cross_sections[i]);
                        graph_al_pip->SetPointError(i, 0, cs_data_al_pip.errors[i]);
                    }

                    graph_al_pip->SetMarkerStyle(20);
                    graph_al_pip->SetMarkerColor(6);
                    graph_al_pip->SetLineColor(6);
                    graph_al_pip->Draw("P same");
                }

                /////////////// Syst //////////////////
                if (q2 < 0)
                {
                    std::string cs_file_path_al_pip = w_path + "/" + cs_files[7]; // Adjust W directory logic
                    CrossSectionData cs_data_al_pip = readCrossSections(cs_file_path_al_pip);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_alpha_pip->GetXaxis()->GetNbins(), xmin_5D[3], xmax_5D[3]);
                    for (Int_t j = 1; j <= acceptance_corrected_alpha_pip->GetXaxis()->GetNbins(); j++)
                    {

                        temp_val = cs_data_al_pip.cross_sections[j - 1];

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }
            }
            {

                h_exp_pim[no_w_bins]->Add(h_exp_pim_background[no_w_bins], -1.);

                // // // // faraday cup charge
                // h_exp_pim[no_w_bins]->Scale(1. * 0.99034 / 0.029113878);
                h_exp_pim[no_w_bins]->Scale(1. * 0.99397 / 0.029113878); // from valerii
                // // // // h_exp_pim[no_w_bins]->Scale(1. / 0.0290267); // this is my analysis output and correcting beam blocker issues
                // // // // h_exp_pim[no_w_bins]->Scale(1. / 0.02788674); // this is using clas12 root and correcting beam blocker issues

                // // faraday cup charge = 0.00240...C
                h_empty_pim[no_w_bins]->Scale(1. / 0.0024075358);

                // // // SUBTRUCT EMPTY TARGET
                h_exp_pim[no_w_bins]->Add(h_empty_pim[no_w_bins], -1.);
                /////////// for cold hydrogen during empty taregt run ///////

                h_exp_pim[no_w_bins]->Scale(1.0485443);

                // radiative effects correction factors
                h_exp_pim[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);
                //////////  // /// for bin centering w-q2
                ////////// // h_exp_pim[no_w_bins]->Scale(1 / ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])));

                acceptance_corrected_7D_pim[no_w_bins] =
                    (THnSparseD *)h_exp_pim[no_w_bins]->Clone(
                        "Accepatnce_corrected_inv_7D_pim");

                acceptance_corrected_7D_pim[no_w_bins]->Divide(acceptance_7D_hist_pim[no_w_bins]);

                acceptance_corrected_7D_simulation_pim[no_w_bins] =
                    (THnSparseD *)h_simu_pim[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_pim_simulation_pim");
                acceptance_corrected_7D_simulation_pim[no_w_bins]->Divide(acceptance_7D_hist_pim[no_w_bins]);

                hole_yield_simulation_pim[no_w_bins] =
                    (THnSparseD *)h_th_pim[no_w_bins]->Clone(
                        "hole_yield_simulation_pim");
                hole_yield_simulation_pim[no_w_bins]->Add(acceptance_corrected_7D_simulation_pim[no_w_bins], -1);
                hole_yield_simulation_pim[no_w_bins]->Scale(ff_scale);

                Int_t *bins_pim = new Int_t[4];
                // for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                // {
                for (Int_t pimP = 3; pimP <= pimP_max - 2; pimP++)
                {
                    for (Int_t pip_pim = 3; pip_pim <= pip_pim_max - 2; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            for (Int_t phi = 1; phi <= phi_max; phi++)
                            {
                                for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                {

                                    bins_pim[0] = pimP;
                                    bins_pim[1] = pip_pim;
                                    bins_pim[2] = theta;
                                    // bins_pim[3] = phi;
                                    bins_pim[3] = alpha;

                                    if (acceptance_corrected_7D_simulation_pim[no_w_bins]->GetBinContent(bins_pim) > 0.)
                                    {

                                        bin_content_sum_acc_corrected_simu[2] += acceptance_corrected_7D_simulation_pim[no_w_bins]->GetBinContent(bins_pim);
                                        bin_content_sum_acc_corrected_exp[2] += acceptance_corrected_7D_pim[no_w_bins]->GetBinContent(bins_pim);
                                    }
                                }
                            }
                        }
                    }
                }

                scale_factor[2] = (bin_content_sum_acc_corrected_exp[2] / bin_content_sum_acc_corrected_simu[2]);

                hole_yield_exp_pim[no_w_bins] =
                    (THnSparseD *)hole_yield_simulation_pim[no_w_bins]->Clone(
                        "hole_yield_exp_pim");
                hole_yield_exp_pim[no_w_bins]->Scale(scale_factor[2]);

                hole_yield_exp_pim[no_w_bins]->Scale(twopeg_W_scale_factors[q2 - 1][no_w_bins]);

                total_yield_exp_pim[no_w_bins] =
                    (THnSparseD *)acceptance_corrected_7D_pim[no_w_bins]->Clone(
                        "total_yield_exp_pim");
                total_yield_exp_pim[no_w_bins]->Add(hole_yield_exp_pim[no_w_bins], 1);

                // here i am trying to scale for luminosity
                acceptance_corrected_7D_pim[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_pim[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                total_yield_exp_pim[no_w_bins]->Scale(0.755314965e-12);
                total_yield_exp_pim[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                TH1D *acceptance_corrected_theta_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(3);

                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_pim->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle : " << factor_alpha_angle << std::endl;

                TH1D *total_yield_with_hole_filled_theta_pim = total_yield_exp_pim[no_w_bins]->Projection(2);
                TH1D *total_yield_with_hole_filled_alpha_pim = total_yield_exp_pim[no_w_bins]->Projection(3);

                TH1D *h_cos_th_pim;
                Double_t temp_pim;
                // Int_t n_theta_bins;
                h_cos_th_pim = new TH1D("h_cos_th_pim", "h_cos_th_pim", total_yield_with_hole_filled_theta_pim->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= total_yield_with_hole_filled_theta_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_pim = cos((total_yield_with_hole_filled_theta_pim->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (total_yield_with_hole_filled_theta_pim->GetBinLowEdge(j) + total_yield_with_hole_filled_theta_pim->GetBinWidth(j)));
                    h_cos_th_pim->SetBinContent(j, temp_pim);
                    h_cos_th_pim->SetBinError(j, 0.);
                }
                total_yield_with_hole_filled_theta_pim->Scale(1. / (w_bin_size * q2_bin_size));
                total_yield_with_hole_filled_alpha_pim->Scale(1. / (w_bin_size * q2_bin_size));

                Int_3_theta[w - 8] = total_yield_with_hole_filled_theta_pim->Integral();
                total_yield_with_hole_filled_theta_pim->IntegralAndError(1, total_yield_with_hole_filled_theta_pim->GetNbinsX(), Int_err_3_theta[w - 8]);

                Int_3_alpha[w - 8] = total_yield_with_hole_filled_alpha_pim->Integral();
                total_yield_with_hole_filled_alpha_pim->IntegralAndError(1, total_yield_with_hole_filled_alpha_pim->GetNbinsX(), Int_err_3_alpha[w - 8]);

                total_yield_with_hole_filled_theta_pim->Divide(h_cos_th_pim);
                total_yield_with_hole_filled_alpha_pim->Scale(1. / factor_alpha_angle);

                acceptance_corrected_theta_pim->Divide(h_cos_th_pim);
                acceptance_corrected_theta_pim->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_alpha_pim->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                can1->cd(4);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // // ///////////////////////////////  Bin centering corrections  th_pim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  th_pim ////////////////////////

                TH1D *h_bin_cent_corr_th_pim;
                Double_t temp_bin_cent_corr_th_pim;
                h_bin_cent_corr_th_pim = new TH1D("h_bin_cent_corr_th_pim", "h_bin_cent_corr_th_pim", acceptance_corrected_theta_pim->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                for (Int_t j = 1; j <= acceptance_corrected_theta_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_th_pim = (bin_centering_corr_w_q2[q2 - 1][w - 8]);
                    // temp_bin_cent_corr_th_pim = (bin_centering_corr_th_pim[q2 - 1][w - 8][j]); ////// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_th_pim->SetBinContent(j, temp_bin_cent_corr_th_pim);
                    h_bin_cent_corr_th_pim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_th_pim->Draw("same");
                TH1D *total_yield_with_hole_filled_theta_pim_modified = (TH1D *)total_yield_with_hole_filled_theta_pim->Clone();
                total_yield_with_hole_filled_theta_pim_modified->Multiply(h_bin_cent_corr_th_pim);
                nine_1d_syst[w - 8][5] = total_yield_with_hole_filled_theta_pim_modified->Integral();
                TH1D *acceptance_corrected_theta_pim_modified = (TH1D *)acceptance_corrected_theta_pim->Clone();
                acceptance_corrected_theta_pim_modified->Multiply(h_bin_cent_corr_th_pim);
                for (int bin = 1; bin <= 10; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_theta_pim_modified->GetBinContent(bin);
                    double theta_mid = (total_yield_with_hole_filled_theta_pim_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                          // total_yield_with_hole_filled_theta_pim_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                          //    2.0;

                    double binContent_acc = acceptance_corrected_theta_pim->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_theta_pim->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_theta_pim_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_theta_pim_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_theta_pim_modified->SetBinError(bin, new_bin_err);

                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaPim" << "," << theta_mid << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";

                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "thetaPim" << "," << theta_mid << "," << bin << "," << binContent << "\n";
                }
                acceptance_corrected_theta_pim_modified->SetLineColor(7);
                acceptance_corrected_theta_pim_modified->SetMarkerStyle(20);
                acceptance_corrected_theta_pim_modified->SetMarkerColor(7);
                acceptance_corrected_theta_pim_modified->Draw("Z ");

                acceptance_corrected_theta_pim_modified->SetYTitle("#Delta#sigma/d(-cos#theta_{#pi^{-}})[#mub/rad])");

                acceptance_corrected_theta_pim_modified->SetMaximum(1.7 * total_yield_with_hole_filled_theta_pim->GetMaximum());
                acceptance_corrected_theta_pim_modified->SetMinimum(0);
                acceptance_corrected_theta_pim_modified->SetTitle("");
                acceptance_corrected_theta_pim_modified->SetStats(0);
                acceptance_corrected_theta_pim_modified->SetXTitle("#Theta_{#pi^{-}}(deg)");

                total_yield_with_hole_filled_theta_pim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_theta_pim_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_theta_pim_modified->Draw("Z same");

                // total_yield_with_hole_filled_theta_pim->SetMarkerStyle(24);
                // total_yield_with_hole_filled_theta_pim->SetMarkerColor(4);
                // total_yield_with_hole_filled_theta_pim->Draw("Z same ");
                // // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_th_pim = w_path_clas6 + "/" + cs_files_clas6[3]; // Adjust W directory logic
                    CrossSectionData cs_data_th_pim = readCrossSections(cs_file_path_th_pim);

                    // Create TGraphErrors
                    TGraphErrors *graph_th_pim = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_th_pim->SetPoint(i, cs_data_th_pim.w_values[i], cs_data_th_pim.cross_sections[i]);
                        graph_th_pim->SetPointError(i, 0, cs_data_th_pim.errors[i]);
                    }

                    graph_th_pim->SetMarkerStyle(20);
                    graph_th_pim->SetMarkerColor(6);
                    graph_th_pim->SetLineColor(6);
                    graph_th_pim->Draw("P same");
                }
                /////////////// Syst //////////////////
                if (q2 < 0)
                {
                    std::string cs_file_path_th_pim = w_path + "/" + cs_files[3]; // Adjust W directory logic
                    CrossSectionData cs_data_th_pim = readCrossSections(cs_file_path_th_pim);

                    TH1D *h_1d_final_syst_err;
                    Double_t temp_val;
                    h_1d_final_syst_err = new TH1D("h_1d_final_syst_err", "h_1d_final_syst_err", acceptance_corrected_theta_pim->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                    for (Int_t j = 1; j <= acceptance_corrected_theta_pim->GetXaxis()->GetNbins(); j++)
                    {

                        temp_val = cs_data_th_pim.cross_sections[j - 1];

                        h_1d_final_syst_err->SetBinContent(j, temp_val);
                        h_1d_final_syst_err->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err->Draw("same");
                }
                // // // // // float estimate_theta_pim = 0;
                // // // // // estimate_theta_pim = total_yield_with_hole_filled_theta_pim->Integral(0, -1);
                // // // // // std::cout << " total from theta-pim: " << estimate_theta_pim << "\n";
                can1->cd(7);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                // // // ///////////////////////////////  Bin centering corrections  alpha_pim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  alpha_pim ////////////////////////

                TH1D *h_bin_cent_corr_alpha_pim;
                Double_t temp_bin_cent_corr_alpha_pim;
                h_bin_cent_corr_alpha_pim = new TH1D("h_bin_cent_corr_alpha_pim", "h_bin_cent_corr_alpha_pim", acceptance_corrected_alpha_pim->GetXaxis()->GetNbins(), xmin_5D[3], xmax_5D[3]);
                for (Int_t j = 1; j <= acceptance_corrected_alpha_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_alpha_pim = (bin_centering_corr_w_q2[q2 - 1][w - 8]);
                    // temp_bin_cent_corr_alpha_pim = (bin_centering_corr_alpha_pim[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_alpha_pim->SetBinContent(j, temp_bin_cent_corr_alpha_pim);
                    h_bin_cent_corr_alpha_pim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_alpha_pim->Draw("same");
                TH1D *total_yield_with_hole_filled_alpha_pim_modified = (TH1D *)total_yield_with_hole_filled_alpha_pim->Clone();
                total_yield_with_hole_filled_alpha_pim_modified->Multiply(h_bin_cent_corr_alpha_pim);

                TH1D *acceptance_corrected_alpha_pim_modified = (TH1D *)acceptance_corrected_alpha_pim->Clone();
                acceptance_corrected_alpha_pim_modified->Multiply(h_bin_cent_corr_alpha_pim);
                for (int bin = 1; bin <= 10; ++bin)
                {
                    double binContent = total_yield_with_hole_filled_alpha_pim_modified->GetBinContent(bin);
                    double alpha_mid = (total_yield_with_hole_filled_alpha_pim_modified->GetXaxis()->GetBinLowEdge(bin)); // +
                                                                                                                          // total_yield_with_hole_filled_alpha_pim_modified->GetXaxis()->GetBinUpEdge(bin)) /
                                                                                                                          //    2.0;
                    double binContent_acc = acceptance_corrected_alpha_pim->GetBinContent(bin);
                    double binContent_hole_filled = total_yield_with_hole_filled_alpha_pim->GetBinContent(bin);

                    double binErr = total_yield_with_hole_filled_alpha_pim_modified->GetBinError(bin);
                    double hole_err = (binContent_hole_filled - binContent_acc) / 2.0;
                    float new_bin_err = sqrt(hole_err * hole_err + binErr * binErr);
                    total_yield_with_hole_filled_alpha_pim_modified->SetBinError(bin, new_bin_err);
                    // acceptance_corrected_alpha_pim_modified->SetBinError(bin, new_bin_err);

                    file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "alphaPim" << alpha_mid << "," << "," << bin << "," << binContent << "," << (binContent_hole_filled - binContent_acc) / 2.0 << "," << (binContent_hole_filled - binContent_acc) / (2.0 * binContent) * 100 << "\n";
                    // file_1d_bin << w * 0.05 + 1.025 << "," << q2_mid_value << "," << "alphaPim" << "," << alpha_mid << "," << bin << "," << binContent << "\n";
                }
                acceptance_corrected_alpha_pim_modified->SetLineColor(7);
                acceptance_corrected_alpha_pim_modified->SetMarkerStyle(20);
                acceptance_corrected_alpha_pim_modified->SetMarkerColor(7);
                acceptance_corrected_alpha_pim_modified->SetMaximum(1.7 * total_yield_with_hole_filled_alpha_pim->GetMaximum());
                acceptance_corrected_alpha_pim_modified->SetTitle("");
                acceptance_corrected_alpha_pim_modified->SetStats(0);
                acceptance_corrected_alpha_pim_modified->SetXTitle(" #alpha_{#pi^{-}}(deg)");
                acceptance_corrected_alpha_pim_modified->SetYTitle("#Delta#sigma/d#alpha_{#pi^{-}}[#mub/rad]");
                acceptance_corrected_alpha_pim_modified->SetMinimum(0);

                acceptance_corrected_alpha_pim_modified->Draw("Z");

                total_yield_with_hole_filled_alpha_pim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_alpha_pim_modified->SetMarkerColor(4);

                total_yield_with_hole_filled_alpha_pim_modified->Draw("Z same");

                // Int_3_alpha[w - 8] = total_yield_with_hole_filled_alpha_pim_modified->Integral() * factor_alpha_angle;
                // total_yield_with_hole_filled_alpha_pim_modified->IntegralAndError(1, total_yield_with_hole_filled_alpha_pim_modified->GetNbinsX(), Int_err_3_alpha[w - 8]);
                nine_1d_syst[w - 8][8] = total_yield_with_hole_filled_alpha_pim_modified->Integral();

                // total_yield_with_hole_filled_alpha_pim->SetMarkerStyle(24);
                // total_yield_with_hole_filled_alpha_pim->SetMarkerColor(4);
                // total_yield_with_hole_filled_alpha_pim->Draw("Z same ");
                // /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_al_pim = w_path_clas6 + "/" + cs_files_clas6[6]; // Adjust W directory logic
                    CrossSectionData cs_data_al_pim = readCrossSections(cs_file_path_al_pim);

                    // Create TGraphErrors
                    TGraphErrors *graph_al_pim = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_al_pim->SetPoint(i, cs_data_al_pim.w_values[i], cs_data_al_pim.cross_sections[i]);
                        graph_al_pim->SetPointError(i, 0, cs_data_al_pim.errors[i]);
                    }

                    graph_al_pim->SetMarkerStyle(20);
                    graph_al_pim->SetMarkerColor(6);
                    graph_al_pim->SetLineColor(6);
                    graph_al_pim->Draw("P same");
                }

                /////////////// Syst //////////////////
                if (q2 < 0)
                {
                    std::string cs_file_path_al_pim = w_path + "/" + cs_files[6]; // Adjust W directory logic
                    CrossSectionData cs_data_al_pim = readCrossSections(cs_file_path_al_pim);

                    TH1D *h_1d_final_syst_err_al_pim;
                    Double_t temp_val;
                    h_1d_final_syst_err_al_pim = new TH1D("h_1d_final_syst_err_al_pim", "h_1d_final_syst_err_al_pim", acceptance_corrected_alpha_pim->GetXaxis()->GetNbins(), xmin_5D[3], xmax_5D[3]);
                    for (Int_t j = 1; j <= acceptance_corrected_alpha_pim->GetXaxis()->GetNbins(); j++)
                    {

                        temp_val = cs_data_al_pim.cross_sections[j - 1];

                        h_1d_final_syst_err_al_pim->SetBinContent(j, temp_val);
                        h_1d_final_syst_err_al_pim->SetBinError(j, 0.);
                    }

                    // Set histogram color and style
                    h_1d_final_syst_err_al_pim->SetFillColor(kGray);  // Gray fill color
                    h_1d_final_syst_err_al_pim->SetFillStyle(3001);   // Semi-transparent fill
                    h_1d_final_syst_err_al_pim->SetLineColor(kBlack); // Black outline

                    // Draw the histogram
                    h_1d_final_syst_err_al_pim->Draw("same");
                }
            }
            // }

            Int[w - 8] = (Int_1[w - 8] + Int_2[w - 8] + Int_3[w - 8]) / 3.;
            Int_err[w - 8] = (Int_err_1[w - 8] + Int_err_2[w - 8] + Int_err_3[w - 8]) / 3;
            // Int_err[w - 8] = sqrt(pow(Int_err_1[w - 8], 2) + pow(Int_err_2[w - 8], 2) + pow(Int_err_3[w - 8], 2));

            // //std::cout << " err: " << sqrt(pow(2, 4)) << "\n";
            Int_bc_corr[w - 8] = (Int_1_bc_corr[w - 8] + Int_2_bc_corr[w - 8] + Int_3_bc_corr[w - 8]) / 3.;
            //// Int_err_bc_corr[w - 8] = sqrt(pow(Int_err_1_bc_corr[w - 8], 2) + pow(Int_err_2_bc_corr[w - 8], 2) + pow(Int_err_3_bc_corr[w - 8], 2));
            Int_err_bc_corr[w - 8] = sqrt(pow(Int_err_1[w - 8], 2) + pow(Int_err_2[w - 8], 2) + pow(Int_err_3[w - 8], 2));

            Int_acc_corr[w - 8] = (Int_1_acc_corr[w - 8] + Int_2_acc_corr[w - 8] + Int_3_acc_corr[w - 8]) / 3.;
            Int_err_acc_corr[w - 8] = (Int_err_1_acc_corr[w - 8] + Int_err_2_acc_corr[w - 8] + Int_err_3_acc_corr[w - 8]) / 3;
            //// Int_err_acc_corr[w - 8] = sqrt(pow(Int_err_1_acc_corr[w - 8], 2) + pow(Int_err_2_acc_corr[w - 8], 2) + pow(Int_err_3_acc_corr[w - 8], 2));

            Int_theta[w - 8] = (Int_1_theta[w - 8] + Int_2_theta[w - 8] + Int_3_theta[w - 8]) / 3.;
            Int_err_theta[w - 8] = (Int_err_1_theta[w - 8] + Int_err_2_theta[w - 8] + Int_err_3_theta[w - 8]) / 3.;

            Int_alpha[w - 8] = (Int_1_alpha[w - 8] + Int_2_alpha[w - 8] + Int_3_alpha[w - 8]) / 3.;
            Int_err_alpha[w - 8] = (Int_err_1_alpha[w - 8] + Int_err_2_alpha[w - 8] + Int_err_3_alpha[w - 8]) / 3.;

            // // // // // // // // // Construct the full path where you want to save the files
            can1->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/1_D_CS/merged_7_inv_bins_final_nine_1D_cs_with_syst%s_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV.png", mod_folder.c_str(),
                              q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));
            // // delete can1;
            file << w * 0.05 + 1.025 << ","
                 << q2_mid_value << ","
                 << Int_bc_corr[w - 8] << ","
                 << Int[w - 8] << ","
                 << Int_theta[w - 8] << ","
                 << Int_alpha[w - 8] << ","
                 << (Int[w - 8] - Int_acc_corr[w - 8]) / 2.0 << ","
                 << (Int[w - 8] - Int_acc_corr[w - 8]) / (2.0 * Int[w - 8]) * 100 << "\n"; ///// for hole filling syst
            // ","
            //  << Int_err_bc_corr[w - 8] << ","
            //  << clas6_cs[q2 - 1][w - 8] << ","
            //  << clas6_cs_err[q2 - 1][w - 8] << ","
            //  << Int_theta[w - 8] << ","
            //  << Int_err_theta[w - 8] << ","
            //  << Int_alpha[w - 8] << ","
            //  << Int_err_alpha[w - 8] <<
            //  "\n";
            // // file_1d << w * 0.05 + 1.025 << ","
            // //         << q2_mid_value << ","
            // //         << nine_1d_syst[w - 8][0] << ","
            // //         << nine_1d_syst[w - 8][1] << ","
            // //         << nine_1d_syst[w - 8][2] << ","
            // //         << nine_1d_syst[w - 8][3] << ","
            // //         << nine_1d_syst[w - 8][4] << ","
            // //         << nine_1d_syst[w - 8][5] << ","
            // //         << nine_1d_syst[w - 8][6] << ","
            // //         << nine_1d_syst[w - 8][7] << ","
            // //         << nine_1d_syst[w - 8][8] << ","
            // //         << "\n";
        }

        for (short w = 8; w < 22; w++)
        {
            float const w_bin_for_flux = 1.0 + w * 0.05 + 0.05 / 2;

            h_w_int->Fill(w_bin_for_flux, Int[w - 8]);
            h_w_int->SetBinError(h_w_int->FindBin(w_bin_for_flux), Int_err[w - 8]);

            h_w_int_acc_corr->Fill(w_bin_for_flux, Int_acc_corr[w - 8]);
            h_w_int_acc_corr->SetBinError(h_w_int_acc_corr->FindBin(w_bin_for_flux), Int_err_acc_corr[w - 8]);

            ///////////////////// dome incluse eff err cut systematics /////////////////

            // h_w_int_bc_corr->SetBinError(h_w_int_bc_corr->FindBin(w_bin_for_flux), Int_err_bc_corr[w - 8]);
            // Set the computed error to the corresponding bin
            // h_w_int_bc_corr->SetBinError(bin, total_error);

            h_w_int_bc_corr->Fill(w_bin_for_flux, Int_bc_corr[w - 8]);

            // h_empty_cell_contribution->Fill(w_bin_for_flux, empty_cell_contribution[w - 8]);
            // h_empty_cell_contribution->SetBinError(h_empty_cell_contribution->FindBin(w_bin_for_flux), empty_cell_contribution_err[w - 8]);

            h_empty_cell_contribution = (TH1F *)h_w_int->Clone("Empty cell contribution");
            h_empty_cell_contribution->Add(h_w_int_acc_corr, -1.);

            h_syst_err_contribution->Fill(w_bin_for_flux, Final_syst_val[q2 - 1][w - 8]);
            std::cout << "  int cs " << Int[w - 8] << "  syst " << Final_syst_val[q2 - 1][w - 8] << "  syst % is  " << Final_syst_val[q2 - 1][w - 8] / Int[w - 8] * 100 << std::endl;

            ///////////////////// TO incluse eff err cut systematics /////////////////
            int bin = h_w_int->FindBin(w_bin_for_flux);
            double original_error = Int_err_bc_corr[w - 8];
            double empty_cell_contribution = h_empty_cell_contribution->GetBinContent(bin);
            double int_hole_error = 0.5 * empty_cell_contribution;
            // Compute the total error using quadrature sum
            double total_error = sqrt(original_error * original_error + int_hole_error * int_hole_error);
            h_w_int->SetBinError(bin, total_error);

            ///////////////////// TO incluse eff err cut systematics /////////////////
            int bin1 = h_w_int_bc_corr->FindBin(w_bin_for_flux);
            double original_error1 = Int_err_acc_corr[w - 8];
            double empty_cell_contribution1 = h_empty_cell_contribution->GetBinContent(bin1);
            double int_hole_error1 = 0.5 * empty_cell_contribution1;
            // Compute the total error using quadrature sum
            double total_error1 = sqrt(original_error1 * original_error1 + int_hole_error1 * int_hole_error1);
            h_w_int_bc_corr->SetBinError(bin, total_error1);

            ///////////////////// done incluse eff err cut systematics /////////////////

            // h_w_int_bc_corr->SetBinError(h_w_int_bc_corr->FindBin(w_bin_for_flux), Int_err_bc_corr[w - 8]);
            // Set the computed error to the corresponding bin

            h_w_int_clas6->Fill(w_bin_for_flux, clas6_cs[q2 - 1][w - 8]);
            h_w_int_clas6->SetBinError(h_w_int_clas6->FindBin(w_bin_for_flux), clas6_cs_err[q2 - 1][w - 8]);

            // h_w_int_diff = (TH1F *)h_w_int_clas6->Clone("clas6 -clas12"); // is it thr rigth thing to do????????????
            // h_w_int_diff->Add(h_w_int, -1.);

            // h_w_int_theta->Fill(w_bin_for_flux, Int_theta[w - 8]);
            // h_w_int_theta->SetBinError(h_w_int_theta->FindBin(w_bin_for_flux), Int_err_theta[w - 8]);

            // h_w_int_alpha->Fill(w_bin_for_flux, Int_alpha[w - 8]);
            // h_w_int_alpha->SetBinError(h_w_int_alpha->FindBin(w_bin_for_flux), Int_err_alpha[w - 8]);

            //         // // TDirectory *output_png = RootOutputFile->mkdir("output_png");
            //         // // output_png->cd();
            // std::cout << w * 0.05 + 1.025 << " " << q2_mid_value << " " << Int[w - 8] << " " << Int_err[w - 8] << " " << clas6_cs[q2 - 1][w - 8] << " " << clas6_cs_err[q2 - 1][w - 8] << "\n";
            // std::cout << w * 0.05 + 1.025 << " " << q2_mid_value << " " << Int[w - 8] << " " << Int_err[w - 8] << " " << clas6_cs[q2 - 1][w - 8] << " " << clas6_cs_err[q2 - 1][w - 8] << " " Int_theta[w - 8] << " " << Int_err_theta[w - 8] << " " << Int_alpha[w - 8] << " " << Int_err_alpha[w - 8] << "\n";
        }

        file.close();
        std::cout << "Data has been written to " << filename.str() << std::endl;
        // file_1d.close();
        // std::cout << "Data has been written to " << filename_1d.str() << std::endl;
        file_1d_bin.close();
        std::cout << "Data has been written to " << filename_1d_bin.str() << std::endl;

        // // Writing the header
        // file << "W_bin,Q2_mid,Int,Int_err,Int_bc,Int_bc_err,CLAS6_CS,CLAS6_CS_err,Int_theta,Int_err_theta,Int_alpha,Int_err_alpha\n";

        // for (short w = 8; w < 22; w++)
        // {
        //     file << w * 0.05 + 1.025 << ","
        //          << q2_mid_value << ","
        //          << Int[w - 8] << ","
        //          << Int_err[w - 8] << ","
        //          << Int_bc_corr[w - 8] << ","
        //          << Int_err_bc_corr[w - 8] << ","
        //          << clas6_cs[q2 - 1][w - 8] << ","
        //          << clas6_cs_err[q2 - 1][w - 8] << ","
        //          << Int_theta[w - 8] << ","
        //          << Int_err_theta[w - 8] << ","
        //          << Int_alpha[w - 8] << ","
        //          << Int_err_alpha[w - 8] << "\n";
        // }

        ///////////////////////////////////////////////////////////////////////////////////
        // define and set style
        gStyle->SetTitleSize(0.08, "t");
        gStyle->SetOptStat(0);
        gStyle->SetStatColor(0);
        // gStyle->SetPaperSize(18, 24);
        gStyle->SetLabelSize(0.055, "Y");
        gStyle->SetLabelSize(0.055, "X");
        gStyle->SetTitleOffset(0.9, "X"); // Adjust title offset for better spacing
        gStyle->SetTitleOffset(0.9, "Y");
        gStyle->SetTitleSize(0.09, "XY");
        gStyle->SetStatFontSize(0.06);
        gStyle->SetTitleFont(22, "XY");
        gStyle->SetLabelFont(22, "XY");
        gStyle->SetTextFont(22);
        gStyle->SetLabelOffset(0.02, "X"); // Increase X label spacing
        gStyle->SetLabelOffset(0.02, "Y"); // Increase Y label spacing
        gStyle->SetLegendFont(22);
        gStyle->SetLegendTextSize(0.025);
        gStyle->SetMarkerStyle(20);
        gStyle->SetMarkerSize(1.9);
        // gStyle->SetMarkerColor(4);
        gStyle->SetErrorX(0);
        TCanvas *can2 = new TCanvas("int_cs", "int_cs", 1400, 1000);
        can2->SetGrid(); // Add grid to the canvas

        std::cout << "\n holes_fraction_sim_" << q2_low_values[q2] << "_" << q2_up_values[q2] << std::endl;

        for (short w = 8; w < 22; w++)
        {
            std::cout << holes_fraction_sim[q2 - 1][w - 8] << "  , " << std::flush;
        }

        // std::cout << "\n holes_fraction_exp_" << q2_low_values[q2] << "_" << q2_up_values[q2] << std::endl;

        // for (short w = 8; w < 22; w++)
        // {
        //     std::cout << holes_fraction_exp[q2 - 1][w - 8] << "  , " << std::flush;
        // }

        // std::cout << std::endl;
        for (short w = 8; w < 22; w++)
        {
            float w_value = 1.0 + w * 0.05 + 0.05 / 2;
            // std::cout << "w value  " << w_value << "\n";
            // std::cout << Int_err[w - 8] << ", " << std::flush;
            // h_w_int->SetLineColor(2);
            // h_w_int->SetLineWidth(2);

            h_w_int->SetMarkerStyle(20);
            h_w_int->SetMarkerColor(2);
            h_w_int->GetXaxis()->SetTitle("W, GeV");
            // h_w_int->GetXaxis()->SetNdivisions(16);
            h_w_int->GetXaxis()->SetLabelSize(0.04);
            h_w_int->GetYaxis()->SetLabelSize(0.04);
            h_w_int->SetAxisRange(0.0, int_cs_up_lim[q2 - 1], "Y");
            // h_w_int->SetAxisRange(-0.0, 10, "Y");

            h_w_int->SetAxisRange(1.35, 2.15, "X");
            // h_w_int->SetTitle("Integrated Cross-Sections #sigma RGA Fall 2018");
            h_w_int->SetTitle(Form("Integrated Cross-Sections #sigma %.1f<=Q2<%.1fGeV^{2}", q2_lower_lim, q2_upper_lim));
            h_w_int->GetYaxis()->SetTitle("#sigma, #mub");
            // h_w_int->Draw("e1pX0");
            h_w_int->Draw("e1pX0");
            h_w_int_acc_corr->SetMarkerStyle(20);
            h_w_int_acc_corr->SetMarkerColor(7);
            // h_w_int_acc_corr->GetXaxis()->SetNdivisions(24);
            // h_w_int_acc_corr->SetAxisRange(1.4, 1.9, "X");
            h_w_int_acc_corr->Draw("e1pX0 same");
            // h_w_int_acc_corr->SetLineColor(7);
            // h_w_int->SetMaximum((h_w_int->GetMaximum()) / 0.97);
            // h_w_int->SetMinimum(0.0);

            // std::cout << "max of hist is  " << h_w_int->GetMaximum() << std::endl;
            // h_empty_cell_contribution->SetMarkerStyle(20);
            // h_empty_cell_contribution->SetLineColor(14); // Set line color to red
            // // h_empty_cell_contribution->SetMarkerColor(14);         // Set marker color to red
            // h_empty_cell_contribution->SetFillColorAlpha(14, 0.5); // Set fill color to red with 50% transparency
            // h_empty_cell_contribution->SetLineWidth(2);            // Increase the line width
            // // h_empty_cell_contribution->GetXaxis()->SetNdivisions(24);
            // // h_empty_cell_contribution->SetAxisRange(1.4, 1.9, "X");
            // // Draw the histogram with both line, fill, and marker
            // // h_empty_cell_contribution->SetAxisRange(0.0, int_cs_up_lim[q2 - 1], "Y");
            // h_empty_cell_contribution->Draw("hist same ");
            // // h_empty_cell_contribution->Draw("p same"); // Draw markers

            h_syst_err_contribution->SetMarkerStyle(20);
            h_syst_err_contribution->SetLineColor(14); // Set line color to red
            // h_syst_err_contribution->SetMarkerColor(14);         // Set marker color to red
            h_syst_err_contribution->SetFillColorAlpha(14, 0.5); // Set fill color to red with 50% transparency
            h_syst_err_contribution->SetLineWidth(2);            // Increase the line width
            // h_syst_err_contribution->GetXaxis()->SetNdivisions(24);
            // h_syst_err_contribution->SetAxisRange(1.4, 1.9, "X");
            // Draw the histogram with both line, fill, and marker
            // h_empty_cell_contribution->SetAxisRange(0.0, int_cs_up_lim[q2 - 1], "Y");
            h_syst_err_contribution->Draw("hist same ");
            // h_syst_err_contribution->Draw("p same"); // Draw markers

            // h_w_int_bc_corr->SetLineWidth(4);
            h_w_int_bc_corr->SetMarkerStyle(20);
            h_w_int_bc_corr->SetMarkerColor(kBlue);
            h_w_int_bc_corr->SetLineColor(kBlue);
            h_w_int_bc_corr->Draw("e1pX0 same");

            if (q2 <= 5)
            {
                // h_w_int_clas6->SetLineWidth(4);
                h_w_int_clas6->SetMarkerStyle(20);
                h_w_int_clas6->SetMarkerColor(3);
                // h_w_int_clas6->SetLineColor(3);

                h_w_int_clas6->Draw("e1pX0 same");
            }
            // // h_w_int_clas6->Draw("hist same");

            // h_w_int_diff->SetMarkerStyle(21);
            // h_w_int_diff->SetLineWidth(2);
            // h_w_int_diff->SetMarkerColor(2);
            // h_w_int_diff->SetLineColor(kRed);
            // h_w_int_diff->SetMarkerColor(kRed);
            // h_w_int_diff->Draw("p same");
            // h_w_int_diff->Draw("hist same");

            // // TLine *l =
            // //     new TLine(w_value, 0, w_value, h_w_int->GetMaximum() );
            // // l->Draw("SAME");

            // h_w_int_theta->SetMarkerStyle(20);
            // h_w_int_theta->SetMarkerColor(4);
            // // h_w_int_theta->GetXaxis()->SetNdivisions(24);
            // // h_w_int_theta->SetAxisRange(1.4, 2.1, "X");
            // h_w_int_theta->Draw("e1pX0 same");

            // h_w_int_alpha->SetMarkerStyle(20);
            // h_w_int_alpha->SetMarkerColor(6);
            // // h_w_int_alpha->GetXaxis()->SetNdivisions(24);
            // // h_w_int_alpha->SetAxisRange(1.4, 2.1, "X");
            // h_w_int_alpha->Draw("e1pX0 same");

            auto legend = new TLegend(0.1, 0.65, 0.3, 0.9);
            if (q2 <= 5)
                legend->AddEntry(h_w_int_clas6, "CLAS6", "ep");
            legend->AddEntry(h_w_int_bc_corr, "CLAS12 BC Corr ", "ep");
            legend->AddEntry(h_w_int, "CLAS12 ", "ep");
            legend->AddEntry(h_w_int_acc_corr, "CLAS12 With holes ", "ep");
            // legend->AddEntry(h_empty_cell_contribution, "Holes contribution", "L");
            legend->AddEntry(h_syst_err_contribution, "Systematic Error ", "L");

            // legend->AddEntry(h_w_int_diff, "Diff CL6-CL12", "epL");
            // legend->AddEntry(h_w_int_theta, "Int theta", "ep");
            // legend->AddEntry(h_w_int_alpha, "Int alpha", "ep");

            legend->Draw();

            // std::cout << " cs_out  " << Int[w - 8] << "  clas6_cs  " << clas6_cs[q2 - 1][w - 8] << "  diff " << clas6_cs[q2 - 1][w - 8] - Int[w - 8] << " acc_corr  " << Int_acc_corr[w - 8] << " hole_contribution  " << Int[w - 8] - Int_acc_corr[w - 8] << " ff scale is = " << ff_scale << "\n";
            // std::cout << Int_err[w - 8] << "," << std::flush;

            // // std::cout << "w: " << w * 0.05 + 1.0125 << " acc_corr " << Int_acc_corr[w -8] << " inv_mass: " << Int[w -8] << " theta " << Int_theta[w -8] << " alpha " << Int_alpha[w -8] << " clas6:  " << clas6_cs[w -8] << "\n";
            // std::cout << "w: " << w * 0.05 + 1.0125 << " " << Int_acc_corr[w -8] << " " << Int_err_acc_corr[w -8] << " " << Int[w -8] << " " << Int_err[w -8]
            //           // << " theta " << Int_err_theta[w -8] << " alpha " << Int_err_alpha[w -8] << " clas6:  " << clas6_cs_err[q2-1][w -8]
            //           << "\n";
        }
        can2->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/CS_measurement/merged_inv_7_bins_final_int_cs_with_syst%s_%.1f<=Q2<=%.1f_GeV2.png", mod_folder.c_str(),
                          q2_lower_lim, q2_upper_lim));

        // delete h_w_int;
        // delete h_empty_cell_contribution;
        // delete h_w_int_bc_corr;
        // delete h_w_int_acc_corr;
        // delete can2;
        // }
    }

    return 0;
}

// The subroutine sets errors to data, empt.targ., fermicorr and model histograms
void set_all_errors(int no_w_bins)
{
    Int_t *bins = new Int_t[4];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 3))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        // bins[3] = t;
                        bins[3] = y;
                        // how_many_bins = how_many_bins + 1;

                        // // Setting errors to data hists
                        if (h_exp_prot[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_prot[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot[no_w_bins]->GetBinContent(bins))));
                            // h_exp_prot[no_w_bins]->SetBinError(bins, (0.0));

                            // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins)) << "  Bin err is: " << (h_exp_prot[no_w_bins]->GetBinError(bins)) << std::endl;

                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) == 1.)
                            //     how_many_ones = how_many_ones + 1;
                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) > 0.)
                            //     how_many_highers = how_many_highers + 1;
                        }
                        else
                        {
                            h_exp_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_prot[no_w_bins]->SetBinContent(bins, 0.0);
                            // h_exp_prot[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot[no_w_bins]->GetBinContent(bins))));
                            // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins)) << "  Bin err is: " << (h_exp_prot[no_w_bins]->GetBinError(bins)) << std::endl;

                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) == 0.)
                            //     how_many_zeros = how_many_zeros + 1;
                            // h_exp_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_exp_pip[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pip[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pip[no_w_bins]->GetBinContent(bins))));
                            // h_exp_pip[no_w_bins]->SetBinError(bins, (0.0));
                        }
                        else
                        {
                            h_exp_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_pip[no_w_bins]->SetBinContent(bins, 0.0);
                        };

                        if (h_exp_pim[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pim[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pim[no_w_bins]->GetBinContent(bins))));
                            // h_exp_pim[no_w_bins]->SetBinError(bins, (0.0));

                            // eff_threshold_cut->Fill(h_exp_pim[no_w_bins]->GetBinContent(bins)); /// this is only checking for
                            // the yield filling this is not for the threshold cut histogram beware of that.
                        }
                        else
                        {
                            h_exp_pim[no_w_bins]->SetBinError(bins, 0.);
                            // h_exp_pim[no_w_bins]->SetBinContent(bins, 0.0);
                        };

                        // Setting errors to empty target hists
                        if (h_empty_prot[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_prot[no_w_bins]->SetBinError(bins, (sqrt(h_empty_prot[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_empty_pip[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_pip[no_w_bins]->SetBinError(bins, (sqrt(h_empty_pip[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_pip[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_empty_pim[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_pim[no_w_bins]->SetBinError(bins, (sqrt(h_empty_pim[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        // Setting errors to h_exp_background hists
                        if (h_exp_prot_background[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_prot_background[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot_background[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_prot_background[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_prot_background[no_w_bins]->SetBinContent(bins, 0.);
                        };

                        if (h_exp_pip_background[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pip_background[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pip_background[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_pip_background[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_pip_background[no_w_bins]->SetBinContent(bins, 0.);
                        };

                        if (h_exp_pim_background[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pim_background[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pim_background[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_pim_background[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_pim_background[no_w_bins]->SetBinContent(bins, 0.);
                        };

                        // // Setting errors to simu hist hists
                        // if (h_simu_prot[no_w_bins]->GetBinContent(bins) <= 0.)

                        // {
                        //     h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        // };

                        // if (h_simu_pip[no_w_bins]->GetBinContent(bins) <= 0.)

                        // {
                        //     h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        // };

                        // if (h_simu_pim[no_w_bins]->GetBinContent(bins) <= 0.)

                        // {
                        //     h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        // };
                        // // // //Setting errors to model hists
                        // // // h_model_1[i]->SetBinError(bins, 0.);
                        // // // h_model_2[i]->SetBinError(bins, 0.);
                        // // // h_model_3[i]->SetBinError(bins, 0.);
                    };
                };
            };
        };
    };

    // std::cout << "no of Bin: " << how_many_bins << std::endl;
    // std::cout << "no of Zero: " << how_many_zeros << "  \% of zeros " << how_many_zeros / float(how_many_bins) << std::endl;
    // // std::cout << "no of One: " << how_many_ones << std::endl;
    // std::cout << "no of non-Zero: " << how_many_highers << "  \% of non-zeros " << how_many_highers / float(how_many_bins) << std::endl;
};

// The subroutine sets correct errors to the efficiency histograms
void set_eff_errors(float eff_err_threshold, int no_w_bins)
{
    Int_t *bins = new Int_t[4];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 1))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 0; o <= o_max; o++)
    {
        for (Int_t p = 0; p <= p_max; p++)
        {
            for (Int_t r = 0; r <= r_max; r++)
            {
                for (Int_t t = 0; t <= t_max; t++)
                {
                    for (Int_t y = 0; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        // bins[3] = t;
                        bins[3] = y;

                        /*Long64_t tmp_rec1_bin = h_simu_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec2_bin = h_simu_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec3_bin = h_simu_pim[no_w_bins]->GetBin(bins);

                    Long64_t tmp_gen1_bin = h_th_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_gen2_bin = h_th_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_gen3_bin = h_th_pim[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff1_bin = acceptance_7D_hist_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_eff2_bin = acceptance_7D_hist_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_eff3_bin = acceptance_7D_hist_pim[no_w_bins]->GetBin(bins);*/

                        Double_t err1, err2, err3;
                        Double_t a1, a2, a3, b1, b2, b3;
                        Double_t err1_new, err2_new, err3_new;

                        a1 = (h_simu_prot[no_w_bins]->GetBinContent(bins));
                        a2 = (h_simu_pim[no_w_bins]->GetBinContent(bins));
                        a3 = (h_simu_pip[no_w_bins]->GetBinContent(bins));
                        // std::cout << "Bin content sim is : " << a1 << " ," << a2 << " , " << a3 << std::endl;

                        b1 = (h_th_prot[no_w_bins]->GetBinContent(bins));
                        b2 = (h_th_pim[no_w_bins]->GetBinContent(bins));
                        b3 = (h_th_pip[no_w_bins]->GetBinContent(bins));
                        // std::cout << "Bin content th is : " << b1 << " ," << b2 << " , " << b3 << std::endl;

                        // // //------------------------------------------------
                        // // // err1 = (a1 * (b1 - a1)) / b1 / b1 / b1; // for weight = 1 histograms
                        err1 = (b1 - 2 * a1) / b1 / b1 / b1 * h_rec_prot_sig2[no_w_bins]->GetBinContent(bins) + a1 * a1 / b1 / b1 / b1 / b1 * h_th_prot_sig2[no_w_bins]->GetBinContent(bins);

                        err1_new = acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins) / acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins);

                        if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) > 0.0 && (err1 > 0.) && err1_new < eff_err_threshold && acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) > eff_acc_threshold)
                        // if (err1_new > 0.0 && err1_new < 0.3)
                        {
                            // std::cout << " err1 is : " << err1 << std::endl;

                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, sqrt(err1));
                        }

                        // if (err1 < 0. || err1 > 0.3 || err1_new > 0.3 || acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) < 0.00)
                        // if (err1_new > 0.3 || acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) < 0.00)
                        else
                        {
                            // std::cout << " err1 less than zero is : " << err1 << std::endl;

                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        // ///// first hist cd(1)
                        // eff->Fill(h_simu_prot[no_w_bins]->GetBinContent(bins) / h_th_prot[no_w_bins]->GetBinContent(bins));
                        // ///// 2nd hist cd(2)
                        // d_eff->Fill(err1);
                        // ///// 4th hist cd(4)
                        // deff_vs_eff->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins),
                        //                   acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins) / acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins));

                        // if (a1 / b1 > 0.01)
                        // eff_threshold_cut->Fill(a1 / b1);

                        // // //---------------------------------------------------------

                        err2 = (b2 - 2 * a2) / b2 / b2 / b2 * (h_rec_pim_sig2[no_w_bins]->GetBinContent(bins)) + a2 * a2 / b2 / b2 / b2 / b2 * (h_th_pim_sig2[no_w_bins]->GetBinContent(bins));

                        err2_new = acceptance_7D_hist_pim[no_w_bins]->GetBinError(bins) / acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins);

                        if ((acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) > 0.0) && (err2 > 0.0) && err2_new < eff_err_threshold && acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) > eff_acc_threshold)
                        // if (err2_new > 0.0 && err2_new < 0.3)
                        {
                            // std::cout << " err2 is : " << err2 << std::endl;
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, sqrt(err2));
                        }
                        // if (err2 < 0. || err2 > 0.3 || err2_new > 0.3 || (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) < 0.00))
                        // if (err2_new > 0.3 || (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) < 0.00))
                        else
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        // //-------------------------------------

                        err3 = (b3 - 2 * a3) / b3 / b3 / b3 * (h_rec_pip_sig2[no_w_bins]->GetBinContent(bins)) + a3 * a3 / b3 / b3 / b3 / b3 * (h_th_pip_sig2[no_w_bins]->GetBinContent(bins));

                        err3_new = acceptance_7D_hist_pip[no_w_bins]->GetBinError(bins) / acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins);

                        if (acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) > 0.0 && (err3 > 0.) && err3_new < eff_err_threshold && acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) > eff_acc_threshold)
                        // if (err3_new > 0.0 && err3_new < 0.3)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, sqrt(err3));
                        }

                        // if (err3 < 0. || err3 > 0.3 || err3_new > 0.3 || acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) < 0.000)
                        // if (err3_new > 0.3 || acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) < 0.000)
                        else
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                    };
                };
            };
        };
    };
};
/*
// The subroutine performs the efficiency error cut
void eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins)
{

    Int_t *bins = new Int_t[4];

    Int_t o_max = pipP_max ;
    Int_t p_max = pipP_max ;
    Int_t r_max = theta_max ;
    Int_t t_max = phi_max ;
    Int_t y_max = alpha_max ;

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;

Double_t err1_evt, err2_evt, err3_evt;
Double_t n_rec1, n_rec2, n_rec3, n_gen1, n_gen2, n_gen3;

n_rec1 = (h_rec_prot_evt[no_w_bins]->GetBinContent(bins));
n_rec2 = (h_rec_pim_evt[no_w_bins]->GetBinContent(bins));
n_rec3 = (h_rec_pip_evt[no_w_bins]->GetBinContent(bins));

n_gen1 = (h_th_prot_evt[no_w_bins]->GetBinContent(bins));
n_gen2 = (h_th_pim_evt[no_w_bins]->GetBinContent(bins));
n_gen3 = (h_th_pip_evt[no_w_bins]->GetBinContent(bins));
// std::cout << "   n gen3 : " << (h_th_pim_evt[no_w_bins]->GetBinContent(bins)) << std::endl;

err1_evt = (n_gen1 - n_rec1) * n_rec1 / n_gen1 / n_gen1 / n_gen1;
err2_evt = (n_gen2 - n_rec2) * n_rec2 / n_gen2 / n_gen2 / n_gen2;
err3_evt = (n_gen3 - n_rec3) * n_rec3 / n_gen3 / n_gen3 / n_gen3;

// eff_threshold_cut->Fill(sqrt(err1_evt) / ((n_rec1) / (n_gen1)));

// if (err1_evt > 0)
//     std::cout << " hey   " << " (n_gen1 - n_rec1) * n_rec1  is:  " << ((n_gen1 - n_rec1) * n_rec1) << " err1 is: " << (err1_evt) << std::endl;
// if (sqrt(err1_evt) / n_rec1 * n_gen1 > 0)
//     std::cout << "  threshold  " << (sqrt(err1_evt) / n_rec1 * n_gen1) << "  acc before " << acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) << std::endl;
if ((sqrt(err1_evt) / n_rec1 * n_gen1) > eff_err_threshold)
{
    // std::cout << " acc after  " << acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) << std::endl;
    acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
    h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
    h_rec_prot_evt[no_w_bins]->SetBinContent(bins, 0.);
    h_rec_prot_evt[no_w_bins]->SetBinError(bins, 0.);
};
// // if ((sqrt(err1_evt) / n_rec1 * n_gen1) < eff_err_threshold)
// eff_threshold_cut->Fill(sqrt((h_th_prot_evt[no_w_bins]->GetBinContent(bins) - h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) *
//                              (h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins))) /
//                         ((h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins))));

if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) < eff_threshold)
{
    acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
    h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
};

if (h_simu_prot[no_w_bins]->GetBinContent(bins) < rec_threshold)
{
    acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
    h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
};

if (sqrt(err2_evt) / n_rec2 * n_gen2 > eff_err_threshold)
{
    acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);

    h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_pim[no_w_bins]->SetBinError(bins, 0.);

    h_rec_pim_evt[no_w_bins]->SetBinContent(bins, 0.);
    h_rec_pim_evt[no_w_bins]->SetBinError(bins, 0.);
};
if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) < eff_threshold)
{
    acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
    h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
};
if (h_simu_pim[no_w_bins]->GetBinContent(bins) < rec_threshold)
{
    acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
    h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
};

if (sqrt(err3_evt) / n_rec3 * n_gen3 > eff_err_threshold && sqrt(err3_evt) / n_rec3 * n_gen3 < 0.0000000001)
{
    acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
    h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_pip[no_w_bins]->SetBinError(bins, 0.);

    h_rec_pip_evt[no_w_bins]->SetBinContent(bins, 0.);
    h_rec_pip_evt[no_w_bins]->SetBinError(bins, 0.);
};
if (acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) < eff_threshold)
{
    acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
    h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
};
if (h_simu_pip[no_w_bins]->GetBinContent(bins) < rec_threshold)
{
    acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
    acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
    h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
    h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
};
}
;
}
;
}
;
}
;
}
;
}
;
*/
