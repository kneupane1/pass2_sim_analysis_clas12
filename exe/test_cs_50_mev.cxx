#include <fstream>
#include <string>
#include <sstream>
#include <iostream>
#include <vector>
#include "TCanvas.h"
#include "TF1.h"
#include "TFile.h"
#include "TGraph.h"
#include "TMultiGraph.h"
#include "TH1.h"
#include "TH2.h"
#include "THnSparse.h"
#include "TLegend.h"
#include "TLorentzVector.h"
#include "TPaveStats.h"
#include "TROOT.h"
#include "TStyle.h"
#include "TThread.h"
// #include "colors.hpp"
// #include "constants.hpp"
// #include "cuts.hpp"
// #include "deltat.hpp"
// #include "reaction.hpp"
#include <mutex>
#include "TMath.h"
#include <TLine.h>
#include <TGraphErrors.h>

static const double PI = TMath::Pi();
static const float INV_SQRT_2PI = TMath::Sqrt(2 * TMath::Pi());
static const double DEG2RAD = PI / 180.0;
static const double RAD2DEG = 180.0 / PI;
static const double MASS_P = 0.93827203;
static const double MASS_E = 0.000511;
static const double MASS_PIP = 0.13957018;
static const double MASS_PIM = 0.13957018;

static const int W_bins_no = 16;

int how_many_bins = 0;
int how_many_zeros = 0;
int how_many_ones = 0;
int how_many_highers = 0;

float q2_low_values[11] = {1.0, 2.0, 2.40, 3.0, 3.5, 4.2, 5.0, 6.0, 7.0, 8.0};  //,7.4, 8.6, 9.8};
float q2_up_values[11] = {2.0, 2.40, 3.0, 3.5, 4.2, 5.0, 6.0, 7.0, 8.0, 9.0};   // 7.4, 8.6, 9.8, 12.0};
float q2_binning_size[11] = {1.0, 0.4, 0.6, 0.5, 0.7, 0.8, 1.0, 1.0, 1.0, 1.0}; // 1.2, 1.2, 1.2, 2.2};
float int_cs_up_lim[11] = {11.0, 8.0, 7.0, 5.0, 2.5, 1.5, 1.5, 1.0, 0.75, 0.25, 0.2};
// float int_cs_up_lim[11] = {5.0, 3.50, 2.5, 1.9, 1.4, 0.9, 0.5, 0.4, 0.3, 0.15, 0.1};
float clas6_cs[5][15] = {{2.725756, 4.852575, 5.0990245, 4.6721295, 5.106538, 7.0651055, 8.429394, 6.525802, 6.223883, 6.3364275, 5.9183335,
                          5.7539805, 5.2653895, 4.683386, 2.135029},
                         {1.4476705, 2.590003, 3.077267, 2.769741, 3.176183, 4.5701105, 5.9731865, 4.688401, 4.4450535, 4.576323,
                          4.502663, 4.183355, 3.7979225, 3.44356, 1.4590885},
                         {1.1238195, 1.7796845, 2.0453735, 1.9403505, 2.3354175, 3.208187, 4.205703, 3.295571, 3.0479955, 3.2959955,
                          3.228516, 3.008253, 2.7967935, 2.386234, 1.0799665},
                         {0.761862, 1.2134075, 1.5208325, 1.38785, 1.6605295, 2.367107, 3.0871605, 2.4123735, 2.281772, 2.3162375, 2.158334,
                          2.047865, 1.852682, 1.6532595, 0.745882},
                         {0.493681, 0.779317, 0.8595405, 0.757254, 1.0147405, 1.400192, 1.851965, 1.4762505, 1.3603165, 1.431174, 1.435816,
                          1.4042675, 1.263922, 1.1651405, 0.5058135}};

float clas6_cs_err[5][15] = {{0.091695, 0.179970, 0.164874, 0.157349, 0.172448, 0.229728, 0.248475, 0.210523, 0.192848, 0.199844, 0.191500, 0.179232, 0.178550, 0.149039, 0.098633},
                             {0.064233, 0.110023, 0.115035, 0.106971, 0.118113, 0.147337, 0.176895, 0.159153, 0.137897, 0.147557, 0.143553, 0.131361, 0.126433, 0.113169, 0.061420},
                             {0.066089193624979, 0.110563133322098, 0.103631219948431, 0.10442156570843, 0.117685666064309, 0.167605262650073, 0.168652491959058, 0.14732291163631, 0.142434399275596, 0.158139247630055, 0.140297298224164, 0.128925042164042, 0.132381316072171, 0.12115672419639, 0.06553},
                             {0.067934, 0.100759, 0.093753, 0.079652, 0.094911, 0.119790, 0.133423, 0.109225, 0.112129, 0.119372, 0.116963, 0.104061, 0.085313, 0.079077, 0.050086},
                             {0.0282695, 0.050223, 0.048597, 0.047022, 0.04949, 0.0632065, 0.0749885, 0.059791, 0.0587005, 0.061277, 0.079192, 0.070863, 0.070452, 0.059122, 0.034278}};
// wide range simulations
// float rad_corr_factor[10] = {1.42702, 1.40908, 1.41135, 1.40509, 1.40151, 1.37086, 1.35081, 1.34144, 1.32594, 1.26831, 1.25362, 1.25586, 1.24384, 1.27349, 1.25435, 1.27085, 1.25168, 1.21468, 1.17431, 1.16223, 1.15737, 1.13599, 1.13964, 1.13751};

// from only one q2 bin simulation 25 mev
// float rad_corr_factor[10] = {1.39047, 1.37839, 1.35447, 1.35067, 1.31858, 1.27496, 1.25344, 1.25131, 1.24169, 1.2636, 1.25875, 1.27143, 1.25846, 1.21249, 1.18035, 1.16335};
// from all q2 bin simulation 50 mev ///x410^8 events

/// 8x10^8 events hoina NEW PASS2 WITH 3*10^8 events
//// Now about 6*10^8 events
float rad_corr_factor[9][14] = {
    // {1.167, 1.141, 1.098, 1.062, 1.0625, 1.07, 1.047, 0.993, 0.9756, 0.9644, 0.9556, 0.945, 0.9233, 0.917},
    //                             {1.171, 1.1455, 1.1, 1.068, 1.067, 1.072, 1.049, 0.997, 0.9805, 0.971, 0.9604, 0.9487, 0.9287, 0.9204},
    //                             {1.179, 1.15, 1.106, 1.069, 1.068, 1.081, 1.056, 0.998, 0.981, 0.973, 0.965, 0.9497, 0.937, 0.9277},
    //                             {1.183, 1.156, 1.108, 1.069, 1.07, 1.082, 1.058, 1.002, 0.9883, 0.9775, 0.9673, 0.957, 0.937, 0.9316},
    //                             {1.185, 1.159, 1.107, 1.071, 1.075, 1.087, 1.06, 1.005, 0.988, 0.9795, 0.9688, 0.9575, 0.9404, 0.931},
    //                             {1.186, 1.163, 1.109, 1.074, 1.074, 1.089, 1.063, 1.004, 0.9927, 0.9824, 0.975, 0.961, 0.942, 0.932},
    //                             {1.1875, 1.162, 1.11, 1.073, 1.073, 1.091, 1.065, 1.007, 0.996, 0.983, 0.9766, 0.9634, 0.9434, 0.9336},
    //                             {1.262, 1.222, 1.167, 1.124, 1.124, 1.142, 1.121, 1.052, 1.043, 1.031, 1.026, 1.013, 0.9873, 0.9756},
    //                             {1.297, 1.168, 1.111, 1.074, 1.07, 1.091, 1.066, 1.003, 0.995, 0.9834, 0.9785, 0.964, 0.9385, 0.929}};

    {1.17, 1.145, 1.102, 1.062, 1.0625, 1.071, 1.05, 0.9927, 0.9756, 0.965, 0.956, 0.946, 0.925, 0.916},
    {1.174, 1.15, 1.1045, 1.067, 1.065, 1.073, 1.051, 0.997, 0.981, 0.97, 0.9595, 0.95, 0.9297, 0.923},
    {1.181, 1.153, 1.107, 1.068, 1.068, 1.079, 1.057, 0.999, 0.983, 0.9717, 0.965, 0.9526, 0.9365, 0.926},
    {1.184, 1.156, 1.111, 1.069, 1.069, 1.082, 1.062, 1.003, 0.9883, 0.977, 0.9673, 0.957, 0.938, 0.9307},
    {1.186, 1.161, 1.111, 1.072, 1.073, 1.085, 1.062, 1.006, 0.9893, 0.9795, 0.97, 0.9604, 0.941, 0.9307},
    {1.1875, 1.162, 1.112, 1.074, 1.073, 1.088, 1.065, 1.004, 0.9927, 0.9834, 0.9746, 0.962, 0.942, 0.9336},
    {1.188, 1.164, 1.113, 1.074, 1.072, 1.092, 1.066, 1.007, 0.9946, 0.9834, 0.9775, 0.9634, 0.943, 0.9326},
    {1.203, 1.167, 1.112, 1.073, 1.07, 1.093, 1.069, 1.006, 0.9946, 0.986, 0.9775, 0.9624, 0.944, 0.9336},
    {1.304, 1.17, 1.114, 1.074, 1.069, 1.092, 1.068, 1.003, 0.992, 0.986, 0.9785, 0.9614, 0.94, 0.9297}};

//// For W hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_w[7][16] = {{0.982714, 0.987143, 1.00094, 0.992125, 0.990467, 0.99054, 1.01228, 0.993493, 0.999654, 1.00105, 0.999625, 0.999021, 0.999842, 1.00045, 1.00235, 0.998844},
                                     {0.981023, 0.986906, 1.00135, 0.993472, 0.989872, 0.989376, 1.01167, 0.993863, 0.999429, 1.00195, 0.999244, 0.998247, 0.999066, 1.00016, 1.00112, 0.998856},
                                     {0.979786, 0.985924, 1.00106, 0.992847, 0.989229, 0.989491, 1.01214, 0.993445, 1.00051, 1.00226, 0.998548, 0.998867, 0.999017, 0.998949, 1.00084, 0.998615},
                                     {0.980012, 0.986718, 1.00147, 0.992812, 0.989275, 0.989898, 1.0127, 0.993184, 0.999318, 1.00148, 0.999757, 0.999779, 0.99858, 0.999586, 1.00064, 1.00068},
                                     {0.979529, 0.986427, 1.00138, 0.993453, 0.987524, 0.989852, 1.01293, 0.993917, 0.9998, 1.00088, 0.999532, 0.99984, 0.998954, 0.999259, 1.00077, 1.00042},
                                     {0.979639, 0.986798, 1.00061, 0.993792, 0.985645, 0.989735, 1.01399, 0.993472, 0.998971, 1.00022, 1.00031, 0.999574, 0.998022, 0.999152, 1.00066, 0.999584},
                                     {0.981539, 0.987975, 1.00021, 0.994806, 0.983396, 0.989321, 1.01396, 0.993675, 0.998437, 0.999283, 1.00159, 0.999882, 0.999002, 0.999271, 1.00078, 1.00019}};

//// For Q2 hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_q2[7][16] = {{0.974946, 0.974848, 0.974157, 0.976999, 0.976488, 0.977138, 0.977828, 0.978622, 0.979324, 0.979380, 0.979493, 0.980405, 0.979954, 0.981692, 0.980635, 0.980829},
                                      {0.957131, 0.958902, 0.960504, 0.961224, 0.962847, 0.962530, 0.963868, 0.964148, 0.964738, 0.965974, 0.966348, 0.966346, 0.967800, 0.967987, 0.968873, 0.968718},
                                      {0.978359, 0.979463, 0.979155, 0.979556, 0.979680, 0.980556, 0.981541, 0.982238, 0.982634, 0.982142, 0.983014, 0.982489, 0.981940, 0.982987, 0.983330, 0.983570},
                                      {0.967750, 0.967844, 0.969391, 0.969340, 0.969472, 0.970410, 0.971589, 0.972088, 0.971552, 0.972408, 0.973259, 0.973728, 0.974159, 0.973615, 0.974521, 0.974009},
                                      {0.968526, 0.969075, 0.969872, 0.969935, 0.970178, 0.971229, 0.972349, 0.973014, 0.972315, 0.974097, 0.973934, 0.974604, 0.974651, 0.975013, 0.975275, 0.975584},
                                      {0.948711, 0.950965, 0.951408, 0.952030, 0.951910, 0.954474, 0.955512, 0.955267, 0.955928, 0.957258, 0.957915, 0.957669, 0.958665, 0.958890, 0.959190, 0.960317},
                                      {0.849843, 0.849452, 0.850676, 0.851694, 0.850893, 0.856553, 0.860586, 0.860401, 0.861822, 0.865837, 0.868462, 0.869297, 0.869627, 0.869802, 0.870937, 0.871561}};

//// For M_pPip hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
///// [7][16][7] --> inner [7] is for invariant mass, middle w and outer [7] is q2 ie; [q2][w][m_pPip]
float bin_centering_corr_m_pPip[9][14][7] = {{{0.788914, 0.873836, 0.976112, 1.001647, 1.013384, 0.975696, 0.763007},
                                              {0.960163, 0.934514, 0.971063, 1.004873, 0.959756, 0.939357, 0.775318},
                                              {0.926158, 0.921293, 0.998154, 1.005269, 0.964261, 0.929595, 0.878408},
                                              {0.906112, 0.889900, 1.013634, 0.968921, 0.967257, 0.993117, 0.838320},
                                              {0.940632, 0.881911, 1.016963, 0.957491, 0.950653, 0.969033, 0.873567},
                                              {0.953195, 0.940200, 0.999016, 0.934917, 0.962731, 1.012901, 0.872547},
                                              {0.950653, 1.039954, 1.007549, 0.952488, 0.975192, 1.022599, 0.975990},
                                              {0.928641, 1.089914, 0.962051, 0.938424, 0.967656, 0.978899, 0.906330},
                                              {0.941910, 1.101462, 0.950466, 0.958649, 0.984834, 1.035515, 0.786699},
                                              {0.944138, 1.065794, 0.949785, 0.972210, 0.989266, 0.993074, 0.767130},
                                              {0.910280, 1.065626, 0.960753, 0.972559, 0.974747, 1.017355, 0.760538},
                                              {0.926837, 1.002504, 0.947433, 0.965890, 0.989553, 1.046325, 0.777149},
                                              {0.930990, 0.983305, 0.969110, 0.986745, 0.992983, 1.043802, 0.760891},
                                              {0.929791, 0.971462, 0.961285, 0.988772, 0.973419, 1.050428, 0.785745}},
                                             {{0.775610, 0.864844, 0.953354, 0.985084, 0.990178, 0.956460, 0.745278},
                                              {0.955170, 0.926021, 0.950592, 0.994093, 0.945587, 0.922993, 0.762843},
                                              {0.909574, 0.901046, 0.987485, 0.994782, 0.956689, 0.920053, 0.871499},
                                              {0.887015, 0.872871, 0.998457, 0.952867, 0.952281, 0.980553, 0.818496},
                                              {0.919077, 0.865782, 0.995809, 0.939033, 0.935607, 0.955853, 0.845686},
                                              {0.936407, 0.930885, 0.988093, 0.922121, 0.948366, 0.994495, 0.867166},
                                              {0.944387, 1.023814, 0.990850, 0.940245, 0.961424, 0.999878, 0.963876},
                                              {0.920673, 1.074325, 0.945647, 0.920551, 0.952691, 0.973590, 0.879987},
                                              {0.926800, 1.093298, 0.938404, 0.942888, 0.970574, 1.023185, 0.781116},
                                              {0.928827, 1.049818, 0.936481, 0.953357, 0.983429, 0.984812, 0.754653},
                                              {0.914678, 1.049353, 0.951628, 0.962061, 0.971809, 1.010264, 0.739867},
                                              {0.918701, 0.983435, 0.930916, 0.955054, 0.972625, 1.032996, 0.774609},
                                              {0.914322, 0.973505, 0.957360, 0.975869, 0.984364, 1.026298, 0.751791},
                                              {0.911066, 0.960991, 0.957256, 0.968759, 0.965885, 1.026962, 0.760744}},
                                             {{0.792616, 0.887261, 0.974685, 1.010216, 1.011780, 0.969988, 0.761809},
                                              {0.963933, 0.944331, 0.975187, 1.002570, 0.963591, 0.943898, 0.772034},
                                              {0.932830, 0.922928, 1.001062, 1.010954, 0.968940, 0.936346, 0.881192},
                                              {0.908578, 0.890568, 1.015884, 0.973795, 0.977649, 1.010213, 0.840179},
                                              {0.937603, 0.884700, 1.012249, 0.953599, 0.946603, 0.969734, 0.868707},
                                              {0.945168, 0.943880, 1.003898, 0.937850, 0.961655, 1.009382, 0.879998},
                                              {0.947434, 1.050611, 1.013453, 0.952434, 0.979988, 1.021764, 0.980082},
                                              {0.934620, 1.090093, 0.963730, 0.938091, 0.972071, 0.976473, 0.897109},
                                              {0.944708, 1.108432, 0.952868, 0.958564, 0.988313, 1.038919, 0.791217},
                                              {0.944306, 1.072100, 0.950735, 0.965360, 0.995384, 1.001786, 0.772694},
                                              {0.921856, 1.067842, 0.969750, 0.973162, 0.986389, 1.019816, 0.749425},
                                              {0.929514, 1.006252, 0.951153, 0.969500, 0.992137, 1.044249, 0.780239},
                                              {0.933191, 0.980635, 0.962205, 0.992699, 0.990830, 1.041760, 0.761114},
                                              {0.932655, 0.974482, 0.962936, 0.982935, 0.976208, 1.057137, 0.788557}},
                                             {{0.796049, 0.877599, 0.967528, 0.988939, 0.995226, 0.953643, 0.747800},
                                              {0.958850, 0.931891, 0.966512, 0.999120, 0.953060, 0.928248, 0.765914},
                                              {0.920212, 0.912253, 0.998209, 0.998135, 0.961456, 0.922053, 0.878021},
                                              {0.896876, 0.879081, 1.009989, 0.961656, 0.961578, 0.992816, 0.828111},
                                              {0.920035, 0.877177, 1.003532, 0.944862, 0.941237, 0.963186, 0.856053},
                                              {0.935110, 0.942573, 0.996760, 0.929256, 0.956312, 1.002234, 0.871937},
                                              {0.942348, 1.040284, 1.001677, 0.946592, 0.970675, 1.010317, 0.974456},
                                              {0.917773, 1.082298, 0.951434, 0.931722, 0.962155, 0.977299, 0.888997},
                                              {0.933275, 1.101583, 0.944723, 0.951398, 0.980632, 1.033165, 0.778479},
                                              {0.932333, 1.061445, 0.940489, 0.964114, 0.986351, 0.991293, 0.759291},
                                              {0.905861, 1.062674, 0.959782, 0.968501, 0.984563, 1.011828, 0.740039},
                                              {0.916844, 0.992405, 0.937808, 0.957006, 0.983412, 1.031440, 0.768491},
                                              {0.908267, 0.980536, 0.959901, 0.982516, 0.981461, 1.029607, 0.751773},
                                              {0.926699, 0.966993, 0.956915, 0.975340, 0.969811, 1.032756, 0.771494}},
                                             {{0.804137, 0.883402, 0.967071, 0.990624, 0.998907, 0.949870, 0.753590},
                                              {0.956697, 0.931294, 0.964059, 1.003599, 0.955213, 0.932134, 0.765423},
                                              {0.923325, 0.912275, 0.996937, 0.997701, 0.966029, 0.924024, 0.876143},
                                              {0.893134, 0.880393, 1.008780, 0.962761, 0.965479, 1.001880, 0.825600},
                                              {0.921001, 0.877878, 1.007803, 0.945139, 0.939193, 0.959711, 0.853847},
                                              {0.930230, 0.941321, 0.994309, 0.930747, 0.955947, 1.006930, 0.863344},
                                              {0.944908, 1.041749, 1.000270, 0.950305, 0.972795, 1.012882, 0.965440},
                                              {0.921807, 1.085148, 0.957399, 0.931275, 0.959322, 0.976756, 0.896726},
                                              {0.931942, 1.103191, 0.939842, 0.952847, 0.978932, 1.031850, 0.787751},
                                              {0.925854, 1.063964, 0.941271, 0.959589, 0.986867, 1.000570, 0.759726},
                                              {0.911999, 1.063097, 0.958259, 0.970717, 0.978106, 1.016612, 0.744415},
                                              {0.920582, 0.994293, 0.941258, 0.963645, 0.985634, 1.026008, 0.770937},
                                              {0.913874, 0.974450, 0.957542, 0.977730, 0.991959, 1.030596, 0.755804},
                                              {0.920609, 0.967375, 0.954842, 0.975169, 0.971184, 1.042396, 0.774673}},
                                             {{0.819560, 0.876396, 0.961485, 0.985911, 0.989064, 0.949355, 0.738193},
                                              {0.955704, 0.929180, 0.963349, 0.998853, 0.951580, 0.922765, 0.764096},
                                              {0.916868, 0.910528, 0.990508, 0.994786, 0.956087, 0.919627, 0.872981},
                                              {0.888992, 0.877579, 1.004118, 0.956095, 0.964263, 1.004912, 0.820365},
                                              {0.914962, 0.871736, 0.998596, 0.935676, 0.933111, 0.952125, 0.840521},
                                              {0.921008, 0.935409, 0.994893, 0.926202, 0.949161, 0.999971, 0.869993},
                                              {0.935130, 1.039196, 1.001005, 0.938090, 0.967279, 1.004298, 0.967320},
                                              {0.903737, 1.080223, 0.949489, 0.924348, 0.957587, 0.970119, 0.878445},
                                              {0.921683, 1.098606, 0.940464, 0.948200, 0.977034, 1.027137, 0.774779},
                                              {0.925909, 1.059443, 0.940363, 0.958849, 0.986070, 0.986769, 0.754198},
                                              {0.903135, 1.060527, 0.952922, 0.962412, 0.979754, 1.011704, 0.744733},
                                              {0.914156, 0.992574, 0.933849, 0.958513, 0.983534, 1.029632, 0.762464},
                                              {0.911423, 0.972096, 0.957514, 0.979876, 0.982752, 1.025697, 0.749331},
                                              {0.916106, 0.964319, 0.947205, 0.967352, 0.966866, 1.041601, 0.774610}},
                                             {{0.725138, 0.907694, 0.974392, 0.994922, 0.996991, 0.952687, 0.747801},
                                              {0.973026, 0.930072, 0.968620, 1.006662, 0.955327, 0.934442, 0.768502},
                                              {0.947886, 0.914017, 0.999785, 0.999899, 0.965878, 0.932657, 0.880213},
                                              {0.916176, 0.887841, 1.011228, 0.963904, 0.973919, 1.002792, 0.835239},
                                              {0.914020, 0.880021, 1.003193, 0.946369, 0.941981, 0.956713, 0.848360},
                                              {0.922934, 0.946571, 0.998220, 0.937262, 0.957643, 1.006973, 0.870018},
                                              {0.934585, 1.046600, 1.005231, 0.947990, 0.975959, 1.017664, 0.979250},
                                              {0.905248, 1.089897, 0.960014, 0.932873, 0.961947, 0.980492, 0.890867},
                                              {0.929654, 1.109232, 0.940426, 0.953637, 0.984818, 1.040168, 0.776731},
                                              {0.923492, 1.071847, 0.943042, 0.968158, 0.992005, 0.997624, 0.757289},
                                              {0.910497, 1.068994, 0.962002, 0.970045, 0.986532, 1.014756, 0.740886},
                                              {0.928186, 1.000576, 0.942121, 0.967009, 0.991550, 1.040654, 0.764690},
                                              {0.919404, 0.983529, 0.958202, 0.985987, 0.989160, 1.036878, 0.750374},
                                              {0.923903, 0.968759, 0.955666, 0.975024, 0.972024, 1.045041, 0.774797}},
                                             {{0.449959, 0.874328, 1.007440, 1.013171, 1.006404, 0.968020, 0.728390},
                                              {0.872924, 0.964224, 0.972465, 1.014060, 0.962177, 0.933048, 0.770328},
                                              {0.846721, 0.920182, 1.004502, 1.010178, 0.972484, 0.929673, 0.878234},
                                              {0.814975, 0.889847, 1.020099, 0.969559, 0.979326, 1.016512, 0.823032},
                                              {0.927725, 0.889410, 1.012173, 0.951872, 0.945303, 0.960531, 0.842172},
                                              {0.924193, 0.951104, 1.005153, 0.939942, 0.964977, 1.010268, 0.882313},
                                              {0.941874, 1.054933, 1.009587, 0.951918, 0.978861, 1.020823, 0.983636},
                                              {0.911035, 1.097042, 0.963594, 0.936943, 0.967353, 0.984288, 0.893901},
                                              {0.925925, 1.119549, 0.949900, 0.960652, 0.989549, 1.039203, 0.776268},
                                              {0.923646, 1.075045, 0.947796, 0.968487, 0.996919, 1.004159, 0.761473},
                                              {0.916498, 1.079057, 0.965052, 0.979448, 0.991205, 1.023499, 0.744050},
                                              {0.924161, 1.006094, 0.944529, 0.973300, 0.995895, 1.046684, 0.769800},
                                              {0.926868, 0.984302, 0.960970, 0.989469, 0.999803, 1.037185, 0.757286},
                                              {0.935652, 0.973001, 0.959478, 0.978599, 0.977867, 1.055024, 0.782303}},
                                             {{0.273865, 0.573501, 0.958441, 1.028850, 1.045471, 0.985992, 0.428221},
                                              {0.629410, 0.949883, 0.993167, 1.013518, 0.965822, 0.974833, 0.730387},
                                              {0.706931, 0.938393, 1.013263, 1.011009, 0.975105, 0.949768, 0.886215},
                                              {0.623412, 0.912455, 1.023267, 0.977435, 0.980592, 1.018022, 0.751432},
                                              {0.901089, 0.883624, 1.013699, 0.950124, 0.950271, 0.966051, 0.804390},
                                              {0.934890, 0.958496, 1.009955, 0.941735, 0.970866, 1.018771, 0.876122},
                                              {0.941223, 1.057082, 1.018062, 0.955805, 0.979292, 1.034233, 0.990162},
                                              {0.908693, 1.102838, 0.966937, 0.943414, 0.970807, 0.989590, 0.901769},
                                              {0.923010, 1.126933, 0.950567, 0.962457, 0.989894, 1.047849, 0.773710},
                                              {0.923399, 1.085019, 0.951817, 0.979270, 0.998426, 1.008452, 0.765592},
                                              {0.915151, 1.085170, 0.971587, 0.983335, 0.989513, 1.025560, 0.749235},
                                              {0.934863, 1.011481, 0.950186, 0.976920, 0.997935, 1.047336, 0.775973},
                                              {0.930369, 0.989232, 0.964845, 0.992187, 1.002319, 1.044182, 0.757743},
                                              {0.939365, 0.978924, 0.957747, 0.981958, 0.982859, 1.056456, 0.781501}}};
float bin_centering_corr_m_pPim[9][14][7] = {{{0.924590, 1.032956, 1.035252, 0.969523, 0.890305, 0.857519, 0.770826},
                                              {0.955481, 0.941792, 0.995122, 1.005291, 0.957488, 0.900556, 0.813475},
                                              {0.965488, 0.926241, 0.971098, 1.011166, 1.006444, 0.953341, 0.859803},
                                              {0.924097, 0.925880, 0.976601, 0.995861, 1.002930, 0.968230, 0.742026},
                                              {0.943029, 0.963082, 0.975625, 0.995227, 0.993116, 0.992775, 0.837843},
                                              {0.946475, 0.972944, 0.965395, 0.970475, 0.996979, 1.002608, 0.930361},
                                              {0.912400, 0.998541, 0.970989, 0.980536, 1.013116, 1.030614, 0.987101},
                                              {0.913425, 1.023915, 0.944405, 0.954010, 0.987326, 1.015728, 0.970198},
                                              {0.875494, 1.038486, 0.954881, 0.955025, 0.954803, 1.008985, 1.037674},
                                              {0.945861, 1.031737, 0.955084, 0.947313, 0.969251, 1.060694, 0.949498},
                                              {0.962216, 1.030761, 0.969807, 0.967279, 0.978010, 1.024181, 0.915952},
                                              {0.993234, 1.038272, 0.972316, 0.961304, 0.951002, 1.024884, 0.931468},
                                              {0.993424, 1.022973, 0.981333, 0.963042, 0.971600, 1.017919, 0.956588},
                                              {0.986845, 1.030254, 0.957369, 0.942265, 1.002446, 0.981851, 0.993435}},
                                             {{0.912357, 1.007144, 1.016251, 0.954671, 0.872809, 0.839544, 0.763038},
                                              {0.941170, 0.926162, 0.984148, 0.986435, 0.950565, 0.888901, 0.798601},
                                              {0.949343, 0.914602, 0.964449, 1.001651, 0.983458, 0.938641, 0.837376},
                                              {0.907717, 0.911154, 0.965000, 0.982435, 0.991421, 0.956131, 0.720905},
                                              {0.933996, 0.940004, 0.961086, 0.976960, 0.977961, 0.971245, 0.819707},
                                              {0.930733, 0.957580, 0.954848, 0.952807, 0.988218, 0.984240, 0.920285},
                                              {0.903179, 0.980239, 0.961455, 0.967337, 1.001533, 1.013329, 0.966232},
                                              {0.898431, 1.014838, 0.925906, 0.932805, 0.966168, 1.000951, 0.962992},
                                              {0.867795, 1.022289, 0.943103, 0.938841, 0.940729, 0.989023, 1.014246},
                                              {0.918197, 1.021078, 0.939753, 0.941529, 0.954211, 1.042173, 0.931528},
                                              {0.946142, 1.023363, 0.958043, 0.952486, 0.956948, 1.026769, 0.906152},
                                              {0.990128, 1.029468, 0.958508, 0.943553, 0.934115, 1.011328, 0.918965},
                                              {0.972749, 1.007364, 0.967672, 0.948866, 0.962985, 0.996453, 0.953439},
                                              {0.960673, 1.011413, 0.950313, 0.929769, 0.991159, 0.973118, 0.984558}},
                                             {{0.933081, 1.028073, 1.040793, 0.973264, 0.894445, 0.858279, 0.766692},
                                              {0.955624, 0.947329, 0.995317, 1.001043, 0.967009, 0.899310, 0.800462},
                                              {0.965356, 0.927939, 0.980709, 1.016120, 1.004125, 0.952045, 0.861381},
                                              {0.923616, 0.930273, 0.984704, 1.005423, 1.006728, 0.968014, 0.744177},
                                              {0.950255, 0.960932, 0.973644, 0.985550, 0.992586, 0.994832, 0.833862},
                                              {0.944184, 0.971221, 0.965722, 0.980740, 1.000830, 1.001197, 0.921363},
                                              {0.919606, 1.002016, 0.974729, 0.982886, 1.024585, 1.035752, 0.984767},
                                              {0.907690, 1.028055, 0.945844, 0.952926, 0.982273, 1.015991, 0.975685},
                                              {0.871153, 1.043162, 0.964929, 0.953992, 0.964074, 1.011537, 1.039158},
                                              {0.947229, 1.031367, 0.952767, 0.960467, 0.976700, 1.063321, 0.946016},
                                              {0.958859, 1.036606, 0.973130, 0.967570, 0.978577, 1.032378, 0.917969},
                                              {1.006105, 1.041261, 0.983912, 0.963735, 0.951902, 1.029417, 0.931851},
                                              {0.991510, 1.028138, 0.978163, 0.962263, 0.968990, 1.004361, 0.963869},
                                              {0.986787, 1.025676, 0.968433, 0.945982, 0.999360, 0.986885, 1.003377}},
                                             {{0.922193, 1.007757, 1.025842, 0.961300, 0.881897, 0.848949, 0.752842},
                                              {0.947380, 0.939740, 0.990207, 0.989675, 0.956824, 0.891284, 0.786510},
                                              {0.955886, 0.920639, 0.972820, 1.007740, 0.999069, 0.945919, 0.847138},
                                              {0.915716, 0.916469, 0.971547, 0.991024, 0.994107, 0.957295, 0.730166},
                                              {0.934089, 0.948813, 0.970150, 0.975291, 0.989067, 0.981855, 0.814898},
                                              {0.939374, 0.962554, 0.954943, 0.966853, 0.987277, 0.991787, 0.919170},
                                              {0.908136, 0.998379, 0.965219, 0.977196, 1.012914, 1.025985, 0.972025},
                                              {0.902324, 1.015857, 0.935009, 0.947700, 0.976165, 1.002573, 0.967724},
                                              {0.870230, 1.033855, 0.952746, 0.948022, 0.958676, 1.000337, 1.016484},
                                              {0.935557, 1.022191, 0.948571, 0.944719, 0.967312, 1.055217, 0.931200},
                                              {0.944918, 1.025991, 0.961877, 0.962869, 0.970477, 1.023702, 0.909149},
                                              {0.981262, 1.031630, 0.971550, 0.952383, 0.940522, 1.013203, 0.923141},
                                              {0.980285, 1.015813, 0.971642, 0.951873, 0.968443, 1.000574, 0.956863},
                                              {0.975574, 1.011243, 0.957694, 0.936546, 0.992292, 0.980099, 0.991795}},
                                             {{0.922920, 1.012204, 1.019482, 0.963194, 0.888987, 0.846545, 0.752571},
                                              {0.944762, 0.942621, 0.995361, 0.993398, 0.956036, 0.884215, 0.778237},
                                              {0.955177, 0.919321, 0.974021, 1.006312, 0.993163, 0.947374, 0.843149},
                                              {0.913721, 0.921242, 0.980132, 0.991210, 0.995017, 0.956271, 0.727423},
                                              {0.937675, 0.951201, 0.964931, 0.980417, 0.986902, 0.980553, 0.810740},
                                              {0.935061, 0.966039, 0.960055, 0.966112, 0.988323, 0.995309, 0.906585},
                                              {0.910675, 0.995984, 0.970082, 0.977042, 1.010690, 1.026067, 0.969126},
                                              {0.909755, 1.016225, 0.938296, 0.945770, 0.976610, 1.011604, 0.966779},
                                              {0.874432, 1.033353, 0.952640, 0.950701, 0.951469, 0.998734, 1.012836},
                                              {0.939390, 1.025400, 0.948515, 0.950517, 0.964868, 1.049420, 0.932853},
                                              {0.952126, 1.024389, 0.962834, 0.964026, 0.970794, 1.026842, 0.913753},
                                              {0.991963, 1.026273, 0.971004, 0.957322, 0.944837, 1.017400, 0.926610},
                                              {0.981030, 1.014695, 0.973165, 0.955424, 0.964528, 0.995593, 0.947440},
                                              {0.981384, 1.020109, 0.957964, 0.936811, 0.988881, 0.979962, 0.987186}},
                                             {{0.915941, 1.003782, 1.023658, 0.955064, 0.882072, 0.842424, 0.742541},
                                              {0.943027, 0.939495, 0.988730, 0.989565, 0.950626, 0.881003, 0.762849},
                                              {0.954187, 0.914131, 0.965714, 1.000779, 0.991552, 0.942284, 0.840691},
                                              {0.912169, 0.922765, 0.975571, 0.988862, 0.994854, 0.951684, 0.716940},
                                              {0.925547, 0.941931, 0.956757, 0.972903, 0.979897, 0.970734, 0.803467},
                                              {0.933344, 0.961031, 0.956006, 0.966480, 0.987474, 0.986347, 0.893066},
                                              {0.903430, 0.989622, 0.960533, 0.974550, 1.008996, 1.029478, 0.958664},
                                              {0.889207, 1.019696, 0.926410, 0.940976, 0.972196, 1.003263, 0.952524},
                                              {0.868914, 1.030709, 0.949489, 0.947210, 0.952709, 0.994254, 1.010155},
                                              {0.932646, 1.020768, 0.950677, 0.941488, 0.965183, 1.052141, 0.923174},
                                              {0.951874, 1.023814, 0.960151, 0.954519, 0.970282, 1.018015, 0.910574},
                                              {0.992049, 1.026270, 0.968584, 0.952479, 0.939858, 1.012406, 0.920113},
                                              {0.978532, 1.010579, 0.968668, 0.952470, 0.963196, 0.994371, 0.946043},
                                              {0.983875, 1.019225, 0.952686, 0.931681, 0.983611, 0.975723, 0.988387}},
                                             {{0.929298, 1.013347, 1.027712, 0.964800, 0.894097, 0.865700, 0.676337},
                                              {0.951343, 0.953253, 0.998435, 0.997406, 0.954985, 0.882277, 0.759174},
                                              {0.958344, 0.927327, 0.973832, 1.008685, 1.004980, 0.955195, 0.834414},
                                              {0.920342, 0.929330, 0.979827, 0.996461, 0.999886, 0.962591, 0.715247},
                                              {0.941677, 0.947748, 0.964653, 0.980284, 0.991113, 0.975817, 0.799895},
                                              {0.937770, 0.968136, 0.964022, 0.974273, 0.995481, 0.992167, 0.890817},
                                              {0.914123, 1.005263, 0.970546, 0.979267, 1.018555, 1.033162, 0.960256},
                                              {0.900589, 1.024318, 0.938502, 0.950395, 0.979008, 1.010306, 0.953843},
                                              {0.873785, 1.041158, 0.953167, 0.949976, 0.959058, 1.002308, 1.019740},
                                              {0.946687, 1.026406, 0.955832, 0.950006, 0.968847, 1.051648, 0.926098},
                                              {0.953470, 1.033115, 0.972986, 0.963421, 0.973515, 1.027615, 0.925528},
                                              {0.999826, 1.034688, 0.973421, 0.960637, 0.948309, 1.021165, 0.935378},
                                              {0.984215, 1.022471, 0.975628, 0.959406, 0.970070, 1.008060, 0.959107},
                                              {0.979675, 1.023594, 0.962468, 0.940542, 0.988061, 0.981684, 0.992487}},
                                             {{0.950843, 1.025374, 1.044437, 0.992083, 0.914640, 0.829107, 0.445548},
                                              {0.972030, 0.956826, 1.007309, 1.003448, 0.959609, 0.906262, 0.709862},
                                              {0.980361, 0.929593, 0.978312, 1.018235, 1.004173, 0.966576, 0.811188},
                                              {0.927661, 0.932933, 0.988910, 1.003656, 1.007290, 0.971809, 0.685216},
                                              {0.941986, 0.951440, 0.971699, 0.982868, 0.998863, 0.987957, 0.788101},
                                              {0.946662, 0.975029, 0.968602, 0.979577, 1.003515, 0.999633, 0.886318},
                                              {0.921139, 1.006582, 0.968655, 0.982711, 1.023041, 1.040238, 0.955782},
                                              {0.909272, 1.032514, 0.943173, 0.955794, 0.982410, 1.016460, 0.957649},
                                              {0.881641, 1.044534, 0.954460, 0.956631, 0.967000, 1.012549, 1.018097},
                                              {0.950719, 1.035217, 0.958315, 0.957685, 0.976959, 1.054979, 0.928385},
                                              {0.963331, 1.035004, 0.975297, 0.967461, 0.984609, 1.036618, 0.933090},
                                              {1.001542, 1.043839, 0.983209, 0.967791, 0.952610, 1.022997, 0.940195},
                                              {0.998169, 1.025866, 0.981044, 0.969427, 0.969219, 1.009770, 0.967421},
                                              {0.995666, 1.034144, 0.961802, 0.945874, 0.991370, 0.988660, 1.005817}},
                                             {{0.760686, 1.069885, 1.074502, 0.991385, 0.847686, 0.499292, 0.064168},
                                              {0.919150, 0.992379, 1.011659, 1.007979, 0.987992, 0.882804, 0.527920},
                                              {1.009423, 0.941228, 0.981570, 1.019819, 1.009713, 0.972504, 0.763328},
                                              {0.891942, 0.935488, 0.993553, 1.010570, 1.015695, 0.970809, 0.647797},
                                              {0.923165, 0.960091, 0.973926, 0.983036, 0.997569, 0.990839, 0.778843},
                                              {0.955906, 0.979331, 0.972616, 0.982263, 1.002023, 1.007861, 0.881980},
                                              {0.929826, 1.014294, 0.973953, 0.986829, 1.029231, 1.041439, 0.960084},
                                              {0.908454, 1.036039, 0.944930, 0.954736, 0.991895, 1.017944, 0.960527},
                                              {0.885551, 1.044689, 0.957114, 0.959782, 0.970342, 1.013623, 1.015567},
                                              {0.949094, 1.032637, 0.965611, 0.958914, 0.984473, 1.057020, 0.925981},
                                              {0.959954, 1.031933, 0.976174, 0.976659, 0.984401, 1.040405, 0.936742},
                                              {1.009203, 1.040811, 0.981756, 0.969254, 0.954307, 1.028990, 0.945238},
                                              {1.001064, 1.031790, 0.983413, 0.973056, 0.972369, 1.011738, 0.968864},
                                              {1.000458, 1.035209, 0.968806, 0.956510, 0.990537, 0.999391, 1.012692}}};
//// For M_pipPim hist bin centering correction the Q2 bins used are as follow (same as background estimation):     q2_bin_ranges = [2.2, 2.7, 3.25, 3.85, 4.6, 5.6, 7.6]
float bin_centering_corr_m_pipPim[9][14][7] = {{{1.008278, 1.006708, 0.959281, 0.931389, 0.936775, 1.027395, 0.878726},
                                                {0.956506, 0.976972, 0.978853, 0.984607, 0.967777, 0.996430, 0.843541},
                                                {0.943133, 0.978144, 0.986677, 0.973937, 0.982522, 0.993628, 0.919715},
                                                {0.944437, 0.983854, 0.972378, 0.967847, 0.966156, 0.991760, 0.973558},
                                                {0.932050, 0.967650, 0.971629, 0.977302, 0.971092, 0.981251, 1.004418},
                                                {0.904793, 0.975567, 0.968741, 0.986221, 0.960982, 0.971982, 0.986933},
                                                {0.874545, 0.988645, 0.991679, 1.001907, 0.988073, 1.003897, 1.075955},
                                                {0.858192, 0.973723, 0.972729, 0.977990, 0.968991, 0.995545, 1.055160},
                                                {0.866533, 0.984258, 0.992721, 1.005421, 0.956988, 0.998571, 0.979430},
                                                {0.892763, 0.985887, 0.963718, 0.933122, 1.017609, 1.044907, 0.951533},
                                                {0.902800, 0.981769, 0.968739, 0.949720, 1.024775, 0.967054, 0.927032},
                                                {0.930407, 0.988992, 0.976596, 0.974624, 1.031528, 0.964839, 0.900704},
                                                {0.941914, 1.000055, 0.961496, 0.922035, 1.030984, 1.008439, 0.959857},
                                                {0.972932, 0.993894, 0.972288, 0.978710, 0.976272, 0.979460, 0.966004}},
                                               {{0.979730, 0.989406, 0.936123, 0.920193, 0.925265, 1.008103, 0.857387},
                                                {0.935729, 0.959604, 0.962999, 0.968192, 0.950538, 0.978167, 0.843020},
                                                {0.935560, 0.965102, 0.967279, 0.966930, 0.966665, 0.983940, 0.915064},
                                                {0.940431, 0.964169, 0.947945, 0.953808, 0.950546, 0.967476, 0.959826},
                                                {0.913188, 0.951444, 0.949106, 0.956800, 0.959342, 0.963181, 0.975645},
                                                {0.891081, 0.955572, 0.962175, 0.966718, 0.961172, 0.963665, 0.976442},
                                                {0.863672, 0.967022, 0.973893, 0.978966, 0.974920, 0.990656, 1.059708},
                                                {0.832749, 0.947457, 0.966187, 0.965420, 0.955112, 0.977962, 1.030288},
                                                {0.843232, 0.975781, 0.980620, 0.986007, 0.940885, 0.988592, 0.969051},
                                                {0.855792, 0.969703, 0.955381, 0.922390, 0.998728, 1.036043, 0.941099},
                                                {0.890521, 0.964552, 0.953722, 0.936443, 1.015794, 0.959053, 0.923653},
                                                {0.902133, 0.972987, 0.960569, 0.959492, 1.021778, 0.949378, 0.891025},
                                                {0.932872, 0.980185, 0.956707, 0.920165, 1.011689, 0.997071, 0.948327},
                                                {0.967503, 0.977927, 0.963544, 0.967012, 0.963259, 0.962624, 0.961989}},
                                               {{1.001835, 1.009927, 0.958595, 0.938422, 0.946262, 1.032672, 0.877354},
                                                {0.961951, 0.969408, 0.979945, 0.976158, 0.973874, 0.997156, 0.858941},
                                                {0.955930, 0.977794, 0.981731, 0.986000, 0.984597, 1.000007, 0.923956},
                                                {0.949967, 0.980341, 0.974757, 0.968384, 0.970383, 0.988664, 0.982558},
                                                {0.920432, 0.973678, 0.965986, 0.981568, 0.969207, 0.981082, 0.990650},
                                                {0.900834, 0.974662, 0.979203, 0.986370, 0.969591, 0.973663, 1.000295},
                                                {0.881743, 0.986899, 0.997842, 1.003253, 0.994602, 1.007002, 1.072018},
                                                {0.842436, 0.967619, 0.982676, 0.980338, 0.968357, 0.999681, 1.051561},
                                                {0.851771, 0.992117, 0.999512, 0.998251, 0.962465, 1.006144, 0.985943},
                                                {0.874054, 0.987993, 0.967391, 0.932387, 1.018773, 1.055165, 0.955162},
                                                {0.903067, 0.985578, 0.970683, 0.946478, 1.036763, 0.969420, 0.927159},
                                                {0.923780, 0.996025, 0.978594, 0.969966, 1.040072, 0.974622, 0.915231},
                                                {0.935728, 0.994666, 0.964618, 0.927389, 1.024858, 1.011342, 0.959899},
                                                {0.971692, 0.995231, 0.979179, 0.986579, 0.979282, 0.976286, 0.966446}},
                                               {{0.987705, 0.982875, 0.947480, 0.931147, 0.932873, 1.015858, 0.870886},
                                                {0.944607, 0.965163, 0.967692, 0.975198, 0.961100, 0.992410, 0.855068},
                                                {0.954718, 0.976125, 0.972147, 0.974783, 0.975567, 0.985203, 0.915488},
                                                {0.943229, 0.967483, 0.967294, 0.967330, 0.959494, 0.976435, 0.968675},
                                                {0.921848, 0.960040, 0.959849, 0.964540, 0.965464, 0.974990, 0.977228},
                                                {0.901754, 0.969210, 0.965199, 0.978480, 0.963524, 0.966241, 0.979194},
                                                {0.877591, 0.982698, 0.985239, 0.990582, 0.990393, 1.006567, 1.060122},
                                                {0.844368, 0.957917, 0.963251, 0.969800, 0.965806, 0.986591, 1.039312},
                                                {0.843357, 0.983433, 0.986654, 0.994891, 0.950060, 1.003713, 0.971862},
                                                {0.866393, 0.977295, 0.954948, 0.922602, 1.008867, 1.045478, 0.939979},
                                                {0.893684, 0.978846, 0.959252, 0.941739, 1.018209, 0.966934, 0.924611},
                                                {0.914673, 0.972962, 0.966462, 0.959902, 1.023748, 0.955392, 0.903206},
                                                {0.934455, 0.992854, 0.962012, 0.922798, 1.012736, 0.996690, 0.952350},
                                                {0.961459, 0.979320, 0.969246, 0.970402, 0.969279, 0.973419, 0.971475}},
                                               {{0.984934, 0.987319, 0.948307, 0.930334, 0.939518, 1.017360, 0.867420},
                                                {0.947644, 0.971970, 0.972774, 0.969361, 0.969307, 0.993147, 0.850089},
                                                {0.947779, 0.974587, 0.974112, 0.972628, 0.975702, 0.985500, 0.915113},
                                                {0.949472, 0.972682, 0.961399, 0.965699, 0.959151, 0.980700, 0.970909},
                                                {0.921508, 0.962320, 0.963952, 0.965595, 0.963709, 0.967270, 0.977422},
                                                {0.897426, 0.971182, 0.965896, 0.976972, 0.959406, 0.967886, 0.987480},
                                                {0.879802, 0.980997, 0.991053, 0.991194, 0.991656, 1.001872, 1.070895},
                                                {0.841085, 0.967395, 0.971025, 0.968242, 0.968007, 0.987601, 1.039211},
                                                {0.850769, 0.983655, 0.985091, 0.993579, 0.951106, 0.999675, 0.970487},
                                                {0.860684, 0.977963, 0.962931, 0.921026, 1.006985, 1.045834, 0.941567},
                                                {0.900645, 0.983294, 0.964337, 0.946167, 1.018000, 0.964548, 0.920851},
                                                {0.917223, 0.984248, 0.973423, 0.962719, 1.029064, 0.955482, 0.902010},
                                                {0.927329, 0.989873, 0.954909, 0.921498, 1.014380, 0.993293, 0.956322},
                                                {0.960439, 0.979652, 0.970080, 0.973339, 0.972490, 0.967070, 0.954916}},
                                               {{0.973518, 0.982310, 0.943844, 0.930749, 0.933970, 1.014558, 0.866961},
                                                {0.941656, 0.965959, 0.964895, 0.969556, 0.963778, 0.988263, 0.845002},
                                                {0.939279, 0.967473, 0.970475, 0.967478, 0.972718, 0.982108, 0.906829},
                                                {0.941152, 0.968825, 0.962996, 0.957186, 0.962738, 0.974204, 0.968081},
                                                {0.912177, 0.953167, 0.950964, 0.959761, 0.959990, 0.961390, 0.970146},
                                                {0.898074, 0.967857, 0.964909, 0.971059, 0.954501, 0.963694, 0.978567},
                                                {0.875382, 0.969760, 0.985527, 0.987639, 0.989165, 0.995201, 1.062308},
                                                {0.839775, 0.948573, 0.968639, 0.966427, 0.957061, 0.980087, 1.039215},
                                                {0.838782, 0.983573, 0.985521, 0.988342, 0.945821, 0.995432, 0.969349},
                                                {0.855322, 0.973762, 0.954065, 0.918520, 1.003621, 1.047707, 0.936440},
                                                {0.886034, 0.977312, 0.957457, 0.933378, 1.018286, 0.962317, 0.915876},
                                                {0.907268, 0.971206, 0.961360, 0.958802, 1.025312, 0.954206, 0.899274},
                                                {0.923509, 0.983663, 0.953597, 0.918552, 1.012755, 0.985892, 0.942294},
                                                {0.948770, 0.982292, 0.964688, 0.965888, 0.970320, 0.962753, 0.946584}},
                                               {{0.990880, 0.987074, 0.954814, 0.939034, 0.949373, 1.022268, 0.869179},
                                                {0.953689, 0.969524, 0.972684, 0.974257, 0.970294, 1.001211, 0.854838},
                                                {0.947890, 0.986339, 0.978802, 0.977438, 0.981008, 0.988837, 0.918573},
                                                {0.950594, 0.973181, 0.972255, 0.972117, 0.965340, 0.977457, 0.974970},
                                                {0.919290, 0.961533, 0.961028, 0.965651, 0.967015, 0.967875, 0.976295},
                                                {0.905645, 0.973714, 0.970139, 0.978753, 0.966858, 0.970686, 0.986543},
                                                {0.874799, 0.984321, 0.991343, 0.994822, 0.993055, 1.004816, 1.073496},
                                                {0.842097, 0.962422, 0.969234, 0.971522, 0.965844, 0.990494, 1.049501},
                                                {0.848029, 0.988220, 0.989622, 0.994890, 0.952321, 1.001831, 0.966110},
                                                {0.864275, 0.976563, 0.956548, 0.923642, 1.010620, 1.052655, 0.936795},
                                                {0.892708, 0.978435, 0.964944, 0.941691, 1.028271, 0.967403, 0.927635},
                                                {0.909550, 0.980726, 0.974669, 0.968716, 1.035616, 0.957220, 0.899234},
                                                {0.929808, 0.989744, 0.960781, 0.922885, 1.020078, 0.993850, 0.950900},
                                                {0.962648, 0.988757, 0.970421, 0.975785, 0.973513, 0.964510, 0.951593}},
                                               {{1.023361, 1.001486, 0.969420, 0.960787, 0.960143, 1.037342, 0.880140},
                                                {0.967559, 0.975626, 0.987094, 0.982352, 0.978140, 1.009959, 0.863285},
                                                {0.961038, 0.986154, 0.986082, 0.975650, 0.987138, 0.997674, 0.927656},
                                                {0.955833, 0.983982, 0.978077, 0.978389, 0.971954, 0.986000, 0.979836},
                                                {0.928656, 0.964291, 0.968796, 0.977764, 0.973070, 0.974472, 0.975684},
                                                {0.908651, 0.978684, 0.973157, 0.979757, 0.971257, 0.977915, 0.997926},
                                                {0.883410, 0.987210, 0.999827, 0.998651, 1.002408, 1.008890, 1.076713},
                                                {0.854556, 0.971480, 0.977043, 0.979035, 0.971506, 0.993860, 1.052917},
                                                {0.862146, 0.996283, 0.996518, 1.001748, 0.957942, 1.005913, 0.974585},
                                                {0.869783, 0.977789, 0.961732, 0.927808, 1.013238, 1.050033, 0.942252},
                                                {0.902816, 0.985889, 0.974824, 0.946816, 1.031834, 0.972854, 0.921415},
                                                {0.916448, 0.988515, 0.979608, 0.968667, 1.042968, 0.955499, 0.906606},
                                                {0.936128, 0.998579, 0.963355, 0.926499, 1.023831, 1.001084, 0.958486},
                                                {0.961154, 0.990922, 0.970275, 0.981710, 0.979870, 0.970901, 0.956076}},
                                               {{0.914381, 0.989774, 0.922371, 0.930679, 0.967173, 1.068446, 0.842559},
                                                {0.983962, 0.995668, 0.994217, 0.991116, 0.987490, 1.005820, 0.862677},
                                                {0.970966, 0.992686, 0.994733, 0.986621, 0.986777, 0.998271, 0.933482},
                                                {0.971199, 0.991005, 0.982165, 0.978036, 0.974890, 0.991249, 0.990296},
                                                {0.951741, 0.969016, 0.966289, 0.975404, 0.973711, 0.980036, 0.983710},
                                                {0.929735, 0.979795, 0.984504, 0.986180, 0.975007, 0.983971, 1.002922},
                                                {0.905413, 0.996982, 1.000930, 1.004455, 1.004853, 1.016034, 1.081671},
                                                {0.876795, 0.972722, 0.979526, 0.980561, 0.976375, 1.001352, 1.054078},
                                                {0.862829, 0.996229, 0.996950, 1.003294, 0.961153, 1.009712, 0.970421},
                                                {0.850842, 0.985238, 0.960024, 0.927136, 1.017275, 1.057300, 0.936167},
                                                {0.894138, 0.996362, 0.976294, 0.949973, 1.038637, 0.970290, 0.933531},
                                                {0.910544, 0.989855, 0.984379, 0.972607, 1.044243, 0.960314, 0.906387},
                                                {0.929699, 1.003171, 0.970941, 0.925431, 1.032138, 0.992336, 0.965221},
                                                {0.957705, 1.000525, 0.977514, 0.990120, 0.981081, 0.968997, 0.975034}}};

/////////////////////// Bin centring corr- theta ///////////////////
float bin_centering_corr_th_prot[9][14][10] = {{{1.021604, 0.998584, 0.969846, 0.943768, 0.932533, 0.947817, 0.963629, 0.981862, 0.975715, 0.996443},
                                                {0.943687, 0.969371, 0.989053, 0.973629, 0.963488, 0.954208, 0.960261, 0.958918, 0.968178, 0.964893},
                                                {0.971002, 0.968198, 0.971371, 0.977777, 0.981185, 0.979712, 0.981471, 0.985963, 0.975088, 1.000184},
                                                {0.970442, 0.976682, 0.980197, 0.978956, 0.966170, 0.970875, 0.982560, 0.967383, 0.983848, 0.971717},
                                                {1.017057, 0.999404, 0.978646, 0.964424, 0.969097, 0.976956, 0.971839, 0.979541, 0.975199, 0.965561},
                                                {0.930033, 0.949038, 0.964406, 0.965547, 0.966544, 0.970518, 0.976509, 0.972246, 0.994194, 0.996419},
                                                {0.997842, 1.001568, 0.995028, 0.997909, 0.995050, 0.986431, 0.990400, 0.991850, 0.990456, 1.002387},
                                                {0.971803, 0.964728, 0.978869, 0.975816, 0.980486, 0.982468, 0.975016, 0.979500, 0.977648, 0.992899},
                                                {1.017965, 1.002453, 0.994808, 0.989632, 0.990705, 0.982987, 0.973558, 0.966343, 0.970102, 0.954310},
                                                {0.969349, 0.964847, 0.966442, 0.962732, 0.984233, 0.991388, 0.996839, 1.000700, 1.016089, 1.015721},
                                                {0.986238, 0.988477, 0.978430, 0.978884, 0.980441, 0.979597, 0.984365, 0.977987, 0.988258, 0.990267},
                                                {1.000276, 1.000634, 0.987081, 0.980608, 0.976253, 0.977398, 0.993143, 0.988964, 0.987831, 0.969206},
                                                {0.974774, 0.993641, 0.974260, 0.984080, 0.989554, 0.980581, 0.987758, 0.985942, 1.001487, 1.022087},
                                                {0.969484, 0.982772, 0.986791, 0.977136, 0.978973, 0.985061, 0.993301, 0.981567, 0.992802, 1.018256}},
                                               {{1.019823, 0.981788, 0.950418, 0.926825, 0.917079, 0.924484, 0.946975, 0.962572, 0.975313, 0.956531},
                                                {0.920554, 0.956443, 0.969717, 0.961032, 0.945738, 0.942114, 0.947687, 0.947341, 0.955821, 0.970248},
                                                {0.950417, 0.953627, 0.953780, 0.966643, 0.966103, 0.966170, 0.965088, 0.974516, 0.974263, 0.971322},
                                                {0.945334, 0.964845, 0.962571, 0.953798, 0.950641, 0.953155, 0.958453, 0.962107, 0.965801, 0.968316},
                                                {1.009711, 0.970996, 0.955596, 0.956902, 0.952081, 0.951145, 0.956165, 0.953566, 0.946830, 0.955460},
                                                {0.939167, 0.934667, 0.950553, 0.956413, 0.959524, 0.963397, 0.966563, 0.958784, 0.974651, 0.968974},
                                                {0.989482, 0.990361, 0.979123, 0.980166, 0.976590, 0.971804, 0.974737, 0.977702, 0.988066, 0.991255},
                                                {0.955971, 0.943020, 0.956934, 0.969345, 0.965835, 0.969601, 0.956736, 0.963257, 0.961698, 0.963806},
                                                {0.987762, 0.987890, 0.978939, 0.980188, 0.975630, 0.970120, 0.959129, 0.945744, 0.949879, 0.938506},
                                                {0.957623, 0.953893, 0.943314, 0.949476, 0.959786, 0.967176, 0.982751, 0.983502, 1.004626, 1.013562},
                                                {0.992620, 0.986894, 0.975607, 0.970838, 0.976451, 0.970164, 0.967078, 0.976250, 0.969204, 0.979260},
                                                {0.965633, 0.977801, 0.959557, 0.969905, 0.967003, 0.967938, 0.977155, 0.968439, 0.978206, 0.990941},
                                                {0.984684, 0.984589, 0.965470, 0.972570, 0.967986, 0.969838, 0.977852, 0.968933, 0.986924, 0.998471},
                                                {0.963328, 0.975926, 0.966459, 0.968497, 0.972364, 0.976000, 0.977561, 0.975751, 0.967389, 1.003353}},
                                               {{1.004892, 1.000886, 0.969458, 0.950127, 0.940459, 0.947461, 0.968799, 0.985843, 0.984389, 0.998236},
                                                {0.945096, 0.968025, 0.986946, 0.976966, 0.968415, 0.955833, 0.962720, 0.964522, 0.965746, 0.951281},
                                                {0.965722, 0.970958, 0.984324, 0.982004, 0.975883, 0.982551, 0.986892, 0.992406, 0.989223, 0.989981},
                                                {0.985519, 0.987595, 0.979209, 0.972799, 0.974489, 0.976818, 0.985014, 0.980088, 0.985924, 0.983214},
                                                {1.008293, 0.989286, 0.971714, 0.974818, 0.962537, 0.969980, 0.973658, 0.973739, 0.971013, 0.972346},
                                                {0.946249, 0.951617, 0.957866, 0.972285, 0.975936, 0.975561, 0.974874, 0.981511, 0.987734, 0.997585},
                                                {1.028975, 1.006236, 1.001976, 0.990904, 0.998536, 0.992495, 0.995217, 1.002826, 1.005852, 1.005330},
                                                {0.971053, 0.977556, 0.976905, 0.987061, 0.993411, 0.974124, 0.973075, 0.972857, 0.979951, 0.983813},
                                                {0.988215, 1.000951, 0.993779, 1.001853, 0.998685, 0.983098, 0.975996, 0.971158, 0.970261, 0.954262},
                                                {0.958791, 0.976834, 0.962332, 0.971486, 0.971039, 0.987631, 1.000186, 1.004245, 1.014325, 1.010024},
                                                {0.993399, 0.995461, 0.981254, 0.987707, 0.990246, 0.985053, 0.985602, 0.986724, 0.990879, 0.991255},
                                                {1.004668, 0.987237, 0.992975, 0.988528, 0.985098, 0.988677, 0.990774, 0.990646, 0.995301, 1.012198},
                                                {0.993057, 0.990971, 0.987095, 0.981481, 0.985163, 0.979887, 0.989128, 0.985808, 0.992473, 1.023883},
                                                {0.975352, 0.998054, 0.988922, 0.983001, 0.982252, 0.985657, 0.995210, 0.982428, 0.979241, 1.015853}},
                                               {{1.007240, 0.983793, 0.954757, 0.933680, 0.920978, 0.936991, 0.955899, 0.969042, 0.968751, 0.981741},
                                                {0.933663, 0.957386, 0.978708, 0.965440, 0.956177, 0.953330, 0.955768, 0.956894, 0.955985, 0.967113},
                                                {0.950371, 0.954207, 0.969741, 0.971533, 0.973180, 0.975012, 0.975425, 0.982438, 0.986645, 0.982553},
                                                {0.944459, 0.971108, 0.967992, 0.965360, 0.962062, 0.963424, 0.969577, 0.971086, 0.971696, 0.971699},
                                                {1.000327, 0.981134, 0.964797, 0.960480, 0.960867, 0.959846, 0.959158, 0.967567, 0.965385, 0.961604},
                                                {0.936521, 0.941535, 0.952322, 0.964542, 0.965349, 0.964507, 0.967494, 0.973292, 0.977227, 0.990003},
                                                {1.004853, 0.998301, 0.992478, 0.983943, 0.984627, 0.986953, 0.985828, 0.987170, 0.993604, 0.995434},
                                                {0.967862, 0.965286, 0.966980, 0.973350, 0.974921, 0.966188, 0.968296, 0.967267, 0.968285, 0.966761},
                                                {1.002263, 0.990581, 0.988456, 0.995696, 0.983672, 0.976321, 0.966039, 0.956212, 0.959268, 0.954866},
                                                {0.957889, 0.957667, 0.950906, 0.959194, 0.966907, 0.983603, 0.986496, 0.990631, 1.005372, 1.016112},
                                                {0.995767, 0.987345, 0.978992, 0.982556, 0.975363, 0.975176, 0.979228, 0.975641, 0.973611, 0.978502},
                                                {0.983954, 0.981506, 0.969785, 0.977889, 0.972212, 0.975724, 0.976150, 0.980841, 0.971372, 0.987304},
                                                {0.974815, 0.978042, 0.968507, 0.977799, 0.976640, 0.978563, 0.980931, 0.982352, 0.979844, 1.005747},
                                                {0.982154, 0.989866, 0.967593, 0.976083, 0.970243, 0.982240, 0.977907, 0.975209, 0.983426, 1.003755}},
                                               {{0.997786, 0.977263, 0.956152, 0.935295, 0.924682, 0.935512, 0.954847, 0.973152, 0.980630, 0.965060},
                                                {0.938655, 0.962797, 0.978606, 0.966638, 0.954578, 0.952082, 0.955056, 0.960742, 0.961749, 0.957484},
                                                {0.963645, 0.965666, 0.968629, 0.968008, 0.977885, 0.972305, 0.978406, 0.983799, 0.979695, 0.980385},
                                                {0.964912, 0.966004, 0.971811, 0.963566, 0.962110, 0.964407, 0.966847, 0.971724, 0.973657, 0.977807},
                                                {0.995627, 0.974126, 0.960384, 0.957279, 0.962216, 0.958991, 0.957670, 0.959704, 0.968029, 0.963057},
                                                {0.928100, 0.945037, 0.954205, 0.960600, 0.970947, 0.966091, 0.965230, 0.978545, 0.972038, 0.991472},
                                                {1.008654, 0.991558, 0.987173, 0.989035, 0.987631, 0.987655, 0.991658, 0.991460, 1.000251, 0.993326},
                                                {0.958486, 0.967101, 0.976509, 0.974584, 0.970352, 0.971283, 0.967456, 0.970784, 0.972020, 0.967977},
                                                {1.007137, 0.994663, 0.986716, 0.985288, 0.978998, 0.973404, 0.967693, 0.957834, 0.961919, 0.944771},
                                                {0.963330, 0.964631, 0.956029, 0.959599, 0.969319, 0.973529, 0.985952, 0.999423, 1.002519, 1.022161},
                                                {0.998400, 0.989685, 0.979843, 0.979063, 0.980639, 0.974975, 0.978588, 0.978276, 0.976859, 0.972463},
                                                {0.985390, 0.982174, 0.972328, 0.973396, 0.972702, 0.976417, 0.982670, 0.980827, 0.979627, 0.990238},
                                                {0.965355, 0.983658, 0.971341, 0.973894, 0.972351, 0.974102, 0.981331, 0.972730, 0.987265, 1.010066},
                                                {0.965495, 0.987906, 0.979760, 0.977651, 0.975271, 0.978269, 0.985097, 0.974147, 0.983383, 1.022241}},
                                               {{0.991435, 0.977762, 0.946070, 0.932404, 0.927191, 0.933406, 0.952766, 0.964598, 0.967110, 0.971970},
                                                {0.938876, 0.956430, 0.972974, 0.967974, 0.953829, 0.945032, 0.949334, 0.960027, 0.959057, 0.957629},
                                                {0.952759, 0.956216, 0.965518, 0.966667, 0.965931, 0.968247, 0.970942, 0.975384, 0.982585, 0.980485},
                                                {0.956667, 0.960681, 0.963585, 0.962760, 0.961178, 0.958239, 0.965782, 0.972410, 0.971109, 0.965975},
                                                {0.983864, 0.970796, 0.957176, 0.951625, 0.953297, 0.954786, 0.950796, 0.952654, 0.959153, 0.946587},
                                                {0.924601, 0.937608, 0.945893, 0.955327, 0.958810, 0.962074, 0.963569, 0.978504, 0.974878, 0.977788},
                                                {1.002354, 0.988326, 0.984738, 0.987831, 0.980984, 0.982524, 0.982131, 0.989246, 0.992548, 0.987201},
                                                {0.950596, 0.953288, 0.969266, 0.973380, 0.969816, 0.965146, 0.958392, 0.961835, 0.968028, 0.963930},
                                                {0.989499, 0.992018, 0.980564, 0.982482, 0.979710, 0.973665, 0.966138, 0.957343, 0.955077, 0.952031},
                                                {0.953444, 0.953149, 0.947054, 0.954850, 0.968063, 0.974979, 0.980928, 0.989998, 1.004979, 1.011153},
                                                {0.984385, 0.980208, 0.972466, 0.980805, 0.972927, 0.974518, 0.974139, 0.971735, 0.978953, 0.981121},
                                                {0.971401, 0.980328, 0.962438, 0.968316, 0.970469, 0.973568, 0.978404, 0.978469, 0.978713, 0.979704},
                                                {0.966867, 0.976213, 0.964690, 0.972918, 0.969686, 0.969635, 0.972078, 0.976810, 0.983533, 1.008493},
                                                {0.967179, 0.981797, 0.973796, 0.968473, 0.972174, 0.973711, 0.974872, 0.975070, 0.975959, 0.996927}},
                                               {{1.002879, 0.985589, 0.957835, 0.934421, 0.934852, 0.945689, 0.958631, 0.974288, 0.971690, 0.977591},
                                                {0.945704, 0.965189, 0.973099, 0.974660, 0.963598, 0.954298, 0.954966, 0.965362, 0.957583, 0.963560},
                                                {0.964631, 0.966253, 0.971134, 0.976356, 0.978276, 0.982046, 0.983744, 0.984770, 0.983748, 0.984129},
                                                {0.959951, 0.969190, 0.967363, 0.967275, 0.966726, 0.971907, 0.972906, 0.977680, 0.972718, 0.981264},
                                                {0.985273, 0.975987, 0.966393, 0.959381, 0.959414, 0.959625, 0.960559, 0.964091, 0.964303, 0.961228},
                                                {0.934881, 0.947573, 0.960054, 0.962963, 0.968743, 0.963352, 0.972327, 0.976454, 0.984445, 0.980765},
                                                {1.000974, 0.991233, 0.993010, 0.991203, 0.991943, 0.989277, 0.993372, 0.996134, 1.000758, 1.003787},
                                                {0.949044, 0.968404, 0.975001, 0.978093, 0.973989, 0.975851, 0.968794, 0.971845, 0.972437, 0.970828},
                                                {0.997657, 0.991063, 0.990586, 0.996223, 0.986256, 0.980001, 0.967876, 0.960802, 0.961909, 0.945003},
                                                {0.947936, 0.959682, 0.955519, 0.964266, 0.972459, 0.980715, 0.985068, 1.001530, 1.012435, 1.019202},
                                                {0.985139, 0.990645, 0.980582, 0.984033, 0.986112, 0.983071, 0.982419, 0.976222, 0.982310, 0.981237},
                                                {0.972618, 0.977579, 0.974459, 0.982343, 0.978088, 0.980512, 0.983457, 0.988082, 0.988743, 1.000323},
                                                {0.973077, 0.981709, 0.974876, 0.980556, 0.973149, 0.975933, 0.982918, 0.984777, 0.991263, 1.016916},
                                                {0.977616, 0.990274, 0.973058, 0.981528, 0.975350, 0.978947, 0.986950, 0.981913, 0.982031, 1.003139}},
                                               {{1.041657, 1.005486, 0.968394, 0.948416, 0.943513, 0.959890, 0.981520, 0.990199, 0.990906, 0.993950},
                                                {0.944588, 0.969610, 0.985933, 0.988541, 0.967812, 0.963175, 0.966477, 0.967964, 0.970777, 0.966163},
                                                {0.971760, 0.969502, 0.975677, 0.981985, 0.986098, 0.981630, 0.987458, 0.988894, 0.991721, 0.985156},
                                                {0.968068, 0.976563, 0.974125, 0.975517, 0.972067, 0.976845, 0.976682, 0.983930, 0.988283, 0.987287},
                                                {0.998922, 0.983302, 0.971786, 0.966737, 0.965097, 0.967438, 0.967781, 0.966800, 0.971006, 0.955925},
                                                {0.943712, 0.951922, 0.962187, 0.969255, 0.967390, 0.973234, 0.977288, 0.987641, 0.990920, 0.985592},
                                                {1.013842, 0.996798, 0.997198, 0.998704, 0.993048, 1.000661, 0.993744, 1.001670, 1.007621, 1.005677},
                                                {0.964870, 0.971481, 0.977320, 0.983560, 0.983664, 0.979502, 0.977025, 0.975143, 0.982121, 0.994622},
                                                {1.000534, 1.001416, 0.999064, 0.994392, 0.990992, 0.986144, 0.974324, 0.967983, 0.964944, 0.955959},
                                                {0.971713, 0.969079, 0.960043, 0.963808, 0.972864, 0.982310, 0.992027, 1.000593, 1.010336, 1.030214},
                                                {0.983007, 0.991087, 0.983047, 0.987081, 0.985727, 0.984709, 0.989816, 0.982582, 0.995451, 0.996896},
                                                {0.977686, 0.981235, 0.984099, 0.985464, 0.983750, 0.983644, 0.988163, 0.993576, 0.985711, 1.009036},
                                                {0.993413, 0.988185, 0.979514, 0.982354, 0.986157, 0.977846, 0.984187, 0.989240, 1.000544, 1.017444},
                                                {0.974289, 0.995716, 0.981811, 0.983417, 0.981485, 0.984702, 0.991410, 0.988414, 0.987929, 1.019491}},
                                               {{0.875032, 0.924257, 0.964437, 0.940278, 0.924032, 0.937984, 0.967149, 0.994498, 1.022023, 1.032410},
                                                {1.014208, 1.018760, 1.001835, 0.991050, 0.977406, 0.969821, 0.969663, 0.973212, 0.974065, 0.982314},
                                                {0.982172, 0.985532, 0.986956, 0.987773, 0.990630, 0.988114, 0.987926, 0.996505, 0.999375, 1.010492},
                                                {0.971601, 0.976568, 0.980543, 0.978529, 0.973359, 0.980086, 0.989545, 0.988474, 0.990920, 0.982393},
                                                {0.986372, 0.979183, 0.974832, 0.966763, 0.966011, 0.962361, 0.971732, 0.967299, 0.975990, 0.974653},
                                                {0.952691, 0.958462, 0.963469, 0.976166, 0.975555, 0.975736, 0.977356, 0.990951, 0.992944, 0.996256},
                                                {1.005176, 1.004223, 1.004801, 1.000078, 1.000332, 0.999133, 1.000067, 1.004826, 1.007519, 1.004497},
                                                {0.969204, 0.975013, 0.983686, 0.987748, 0.983625, 0.983470, 0.978568, 0.980495, 0.985052, 0.982537},
                                                {0.997583, 1.002901, 0.999901, 0.995346, 0.992920, 0.987532, 0.980570, 0.970221, 0.971247, 0.961024},
                                                {0.967300, 0.966927, 0.966012, 0.965442, 0.977158, 0.985827, 0.994861, 1.009191, 1.019576, 1.030784},
                                                {0.991487, 1.000548, 0.986805, 0.993060, 0.989880, 0.988384, 0.994197, 0.992078, 0.993743, 0.989866},
                                                {0.983842, 0.998436, 0.984945, 0.990177, 0.987786, 0.987734, 0.992740, 0.993421, 0.990612, 0.997326},
                                                {0.983020, 0.988627, 0.986862, 0.988050, 0.982941, 0.989346, 0.989536, 0.991339, 0.996357, 1.025371},
                                                {0.966915, 0.998168, 0.989869, 0.986247, 0.988534, 0.988921, 0.993267, 0.994150, 0.991583, 1.032851}}

};
float bin_centering_corr_th_pip[9][14][10] = {{{0.938901, 0.945514, 0.955749, 0.969884, 0.992721, 0.988493, 0.977367, 0.943677, 0.915317, 0.900542},
                                               {0.926570, 0.922361, 0.947896, 0.957947, 0.970123, 0.969052, 0.952246, 0.916667, 0.895277, 0.886768},
                                               {0.944203, 0.947448, 0.961770, 0.978623, 0.987011, 0.987874, 0.975255, 0.940148, 0.919030, 0.913077},
                                               {0.928912, 0.940178, 0.948042, 0.960659, 0.970941, 0.976508, 0.961119, 0.935029, 0.903517, 0.895983},
                                               {0.937591, 0.940409, 0.948745, 0.961467, 0.972766, 0.968396, 0.959291, 0.936125, 0.908351, 0.894276},
                                               {0.929691, 0.932780, 0.944211, 0.955368, 0.963055, 0.965983, 0.955656, 0.926714, 0.909700, 0.899916},
                                               {0.935775, 0.946153, 0.954517, 0.965996, 0.972833, 0.974696, 0.965329, 0.942934, 0.918903, 0.906002},
                                               {0.958401, 0.958146, 0.970627, 0.976469, 0.989188, 0.990420, 0.972825, 0.954934, 0.940320, 0.926341},
                                               {0.974119, 0.973085, 0.975486, 0.981700, 0.976365, 0.984014, 0.956804, 0.923150, 0.897097, 0.908631},
                                               {0.960818, 0.961241, 0.944066, 0.954860, 0.961232, 0.968075, 0.968075, 0.981099, 0.993903, 0.991855},
                                               {0.955515, 0.948266, 0.940597, 0.939252, 0.949181, 0.950074, 0.957645, 0.962340, 0.971947, 0.968209},
                                               {0.961507, 0.962847, 0.957679, 0.964383, 0.966727, 0.967700, 0.971986, 0.975908, 0.985665, 0.983788},
                                               {0.954840, 0.952507, 0.950676, 0.951820, 0.951999, 0.961530, 0.963890, 0.968255, 0.974565, 0.981838},
                                               {0.956666, 0.957162, 0.954674, 0.951386, 0.957989, 0.961159, 0.965520, 0.972331, 0.968428, 0.987277}},
                                              {{0.956292, 0.948072, 0.951035, 0.949031, 0.949528, 0.957510, 0.955756, 0.966532, 0.972788, 0.979590},
                                               {0.958751, 0.957693, 0.956763, 0.957235, 0.962957, 0.964303, 0.965134, 0.971826, 0.976267, 0.984276},
                                               {0.971108, 0.957362, 0.967963, 0.962947, 0.970238, 0.973774, 0.975748, 0.973733, 0.987178, 0.995754},
                                               {0.967792, 0.964390, 0.966334, 0.968436, 0.978031, 0.980793, 0.993088, 1.006915, 0.995790, 0.997411},
                                               {1.005926, 0.974088, 0.986560, 0.985167, 0.984137, 0.966908, 0.970756, 0.981764, 0.978960, 0.984273},
                                               {0.968275, 0.980400, 0.972530, 0.973815, 0.973531, 0.955945, 0.958936, 0.963080, 0.967589, 0.984270},
                                               {1.002918, 0.983109, 0.989074, 0.991637, 0.986983, 0.968189, 0.966112, 0.970850, 0.989577, 0.979491},
                                               {0.985388, 0.981321, 0.985687, 0.982606, 0.977168, 0.969944, 0.964333, 0.965927, 0.975063, 0.990003},
                                               {0.980067, 0.979738, 0.981373, 0.982198, 0.974616, 0.971760, 0.966941, 0.964876, 0.976367, 0.996800},
                                               {0.985702, 0.970045, 0.978340, 0.974818, 0.967851, 0.968146, 0.956224, 0.966219, 0.969394, 0.989710},
                                               {0.987261, 0.980230, 0.986529, 0.983687, 0.982274, 0.971806, 0.970931, 0.971644, 0.977994, 0.986284},
                                               {0.983309, 0.993583, 0.990628, 0.985754, 0.986459, 0.982052, 0.978839, 0.973301, 0.986926, 0.995975},
                                               {1.005507, 0.995527, 0.996809, 0.992887, 0.994433, 0.984639, 0.984903, 0.982641, 0.996215, 1.002717},
                                               {0.956421, 0.962656, 0.966153, 0.961550, 0.968251, 0.972677, 0.977849, 0.987325, 1.005916, 1.035197}},
                                              {{0.961912, 0.948140, 0.950625, 0.947215, 0.953186, 0.956118, 0.961107, 0.972721, 0.974177, 0.988910},
                                               {0.983573, 0.975698, 0.983078, 0.968963, 0.969025, 0.978968, 0.978968, 0.986535, 0.993930, 1.015328},
                                               {0.957950, 0.953558, 0.959056, 0.961271, 0.959473, 0.959856, 0.971381, 0.981366, 0.989023, 1.005748},
                                               {0.964334, 0.961406, 0.961470, 0.961747, 0.961119, 0.962863, 0.969075, 0.977913, 0.988959, 1.005197},
                                               {0.966784, 0.965661, 0.957802, 0.960009, 0.958469, 0.961718, 0.963534, 0.971570, 0.984814, 0.996890},
                                               {0.967701, 0.971326, 0.969354, 0.968243, 0.968900, 0.964428, 0.975327, 0.984354, 0.993693, 0.997066},
                                               {0.984506, 0.979456, 0.975982, 0.970902, 0.971221, 0.976201, 0.978648, 0.990371, 0.994218, 1.004173},
                                               {0.987234, 0.989269, 0.979751, 0.979207, 0.977875, 0.978065, 0.985048, 0.988048, 0.997035, 1.013154},
                                               {0.978084, 0.968014, 0.969710, 0.978295, 0.980493, 0.975152, 0.978406, 0.965783, 0.968548, 0.955227},
                                               {0.944785, 0.952232, 0.959013, 0.956118, 0.954943, 0.950398, 0.955923, 0.952713, 0.950720, 0.930511},
                                               {0.973548, 0.973665, 0.977537, 0.975772, 0.975648, 0.973085, 0.970414, 0.965305, 0.953151, 0.939688},
                                               {0.951087, 0.956864, 0.966430, 0.964418, 0.967589, 0.968582, 0.960873, 0.956585, 0.949879, 0.954511},
                                               {0.949922, 0.960613, 0.968533, 0.969393, 0.965719, 0.961765, 0.968180, 0.956537, 0.955859, 0.949401},
                                               {0.941276, 0.947558, 0.959171, 0.959090, 0.959990, 0.956470, 0.958404, 0.949232, 0.939721, 0.945604}},
                                              {{0.968263, 0.952364, 0.960610, 0.964699, 0.964417, 0.966428, 0.961481, 0.959771, 0.952328, 0.947694},
                                               {0.965857, 0.963636, 0.964972, 0.972040, 0.972172, 0.971195, 0.970432, 0.967074, 0.963049, 0.955834},
                                               {0.963407, 0.958057, 0.970385, 0.974431, 0.971027, 0.971709, 0.975493, 0.967721, 0.957636, 0.941894},
                                               {0.963487, 0.959452, 0.968802, 0.977075, 0.969323, 0.966234, 0.976197, 0.977060, 0.969034, 0.981348},
                                               {0.963957, 0.947175, 0.953416, 0.960695, 0.958753, 0.963649, 0.961135, 0.954185, 0.956331, 0.962166},
                                               {0.974344, 0.973607, 0.970621, 0.976466, 0.969516, 0.977397, 0.966421, 0.978622, 0.970386, 0.966047},
                                               {0.972912, 0.963321, 0.960704, 0.966242, 0.965965, 0.965728, 0.964416, 0.961488, 0.959199, 0.969497},
                                               {0.960799, 0.961362, 0.963082, 0.967886, 0.971100, 0.966792, 0.964476, 0.962103, 0.962579, 0.955486},
                                               {0.949979, 0.957452, 0.961582, 0.962381, 0.964306, 0.959092, 0.958630, 0.965102, 0.952573, 0.955053},
                                               {0.959575, 0.964375, 0.964791, 0.965271, 0.971603, 0.970695, 0.969316, 0.967316, 0.968636, 0.963546},
                                               {0.971978, 0.967688, 0.969427, 0.971652, 0.978357, 0.974150, 0.976340, 0.971554, 0.970544, 0.964095},
                                               {0.970444, 0.972770, 0.973397, 0.976140, 0.979868, 0.982327, 0.978814, 0.975532, 0.976951, 0.970625},
                                               {1.001536, 0.994604, 0.997788, 0.989015, 0.993538, 0.987902, 0.990343, 0.991413, 0.985181, 0.984439},
                                               {0.985729, 0.984355, 0.984377, 0.975828, 0.975211, 0.972728, 0.980107, 0.977257, 0.977661, 0.951304}},
                                              {{1.010378, 1.013589, 1.008630, 0.999692, 1.002458, 0.982119, 0.993376, 0.999252, 1.002764, 0.991783},
                                               {0.993635, 0.994126, 0.993563, 0.984190, 0.990177, 0.984707, 0.984303, 0.986273, 0.988508, 0.987831},
                                               {1.001712, 0.996238, 0.995819, 0.994782, 0.986336, 0.986442, 0.988045, 0.989875, 0.991828, 0.975925},
                                               {0.986901, 0.984315, 0.990634, 0.987011, 0.984219, 0.983142, 0.983959, 0.987649, 0.983292, 0.994274},
                                               {0.998025, 0.998847, 0.998309, 0.997610, 0.992330, 0.991468, 0.990699, 0.986951, 0.989885, 0.980701},
                                               {1.007776, 1.002170, 0.997096, 1.000464, 0.998883, 0.993694, 0.997626, 0.997082, 0.991716, 0.995643},
                                               {1.009552, 1.010802, 1.007198, 0.998651, 1.001879, 1.001401, 1.003250, 0.998608, 0.996188, 0.991316},
                                               {0.982644, 0.990117, 0.974170, 0.983473, 0.975781, 0.972143, 0.971431, 0.976897, 0.968228, 0.980373},
                                               {0.957257, 0.965416, 0.959611, 0.969079, 0.962401, 0.965663, 0.959531, 0.952182, 0.952207, 0.947227},
                                               {0.995876, 0.985263, 0.976897, 0.988328, 0.980264, 0.972353, 0.977921, 0.978787, 0.965892, 0.971481},
                                               {0.969600, 0.974345, 0.975453, 0.976826, 0.967176, 0.967667, 0.971537, 0.964867, 0.955551, 0.952091},
                                               {0.972317, 0.977119, 0.976291, 0.977162, 0.966793, 0.973832, 0.969043, 0.968932, 0.956193, 0.962739},
                                               {0.967548, 0.969198, 0.968381, 0.967649, 0.966454, 0.962956, 0.958632, 0.961236, 0.956474, 0.947152},
                                               {0.983860, 0.978989, 0.975170, 0.975277, 0.970787, 0.975374, 0.968462, 0.969335, 0.961849, 0.954845}},
                                              {{0.986164, 0.990385, 0.980094, 0.980673, 0.974538, 0.977642, 0.974529, 0.971643, 0.971852, 0.960243},
                                               {0.979971, 0.988466, 0.987275, 0.985371, 0.985463, 0.981933, 0.976786, 0.978999, 0.973952, 0.973998},
                                               {0.970411, 0.979270, 0.975733, 0.977397, 0.980181, 0.980362, 0.989482, 0.984035, 0.994233, 0.984287},
                                               {0.964845, 0.961940, 0.966801, 0.969245, 0.963736, 0.966271, 0.966484, 0.973560, 0.976862, 0.967007},
                                               {0.989534, 0.976577, 0.982184, 0.978056, 0.983984, 0.984574, 0.988232, 0.996222, 0.993245, 0.959361},
                                               {0.981612, 0.975824, 0.972450, 0.974879, 0.972590, 0.975762, 0.980204, 0.981600, 0.983861, 0.979227},
                                               {0.974550, 0.972547, 0.973785, 0.971942, 0.971826, 0.976879, 0.978837, 0.988849, 0.979570, 0.968962},
                                               {0.964128, 0.967175, 0.974960, 0.965859, 0.965936, 0.969830, 0.971814, 0.982019, 0.977662, 0.969146},
                                               {0.975221, 0.979553, 0.975608, 0.974185, 0.974926, 0.975400, 0.985077, 0.983973, 0.984458, 0.974689},
                                               {0.983764, 0.978530, 0.981654, 0.982559, 0.985167, 0.984750, 0.982588, 0.992089, 0.994783, 0.977675},
                                               {0.992250, 0.982740, 0.987701, 0.982371, 0.985529, 0.982983, 0.988906, 0.989375, 0.986032, 0.971937},
                                               {0.999701, 1.007435, 0.987060, 0.986597, 0.981895, 0.978201, 0.987321, 0.984015, 0.963498, 0.937872},
                                               {0.971176, 0.974405, 0.971659, 0.969460, 0.974418, 0.969126, 0.970904, 0.962229, 0.948928, 0.914488},
                                               {0.983805, 0.997246, 0.993037, 0.987111, 0.991648, 0.990706, 0.985825, 0.990950, 0.970148, 0.925878}},
                                              {{0.979766, 0.989891, 0.983198, 0.973777, 0.980484, 0.981519, 0.980897, 0.970048, 0.964753, 0.931021},
                                               {0.988925, 0.990156, 0.975639, 0.981454, 0.980470, 0.980252, 0.978552, 0.976218, 0.958063, 0.923233},
                                               {0.992420, 0.983737, 0.976151, 0.974223, 0.974969, 0.977183, 0.973782, 0.968758, 0.955832, 0.915693},
                                               {0.991922, 0.995545, 0.988031, 0.981396, 0.977116, 0.981797, 0.980124, 0.972911, 0.961572, 0.924390},
                                               {0.996620, 0.988105, 0.986162, 0.987241, 0.985451, 0.984017, 0.984187, 0.980907, 0.964160, 0.935200},
                                               {0.993835, 0.996515, 0.988284, 0.991453, 0.987860, 0.994142, 0.992386, 0.979899, 0.963895, 0.926777},
                                               {0.982372, 0.979044, 0.985853, 0.979015, 0.984978, 0.982304, 0.982064, 0.990260, 0.981581, 0.960976},
                                               {0.973646, 0.973863, 0.970887, 0.974850, 0.975655, 0.967293, 0.977795, 0.970126, 0.965116, 0.949802},
                                               {0.987614, 0.982691, 0.987475, 0.989106, 0.983937, 0.990568, 0.994252, 0.989866, 0.982326, 0.948632},
                                               {0.972311, 0.986150, 0.970181, 0.977302, 0.981812, 0.977643, 0.978344, 0.981432, 0.977657, 0.970077},
                                               {0.968159, 0.980424, 0.977097, 0.977804, 0.978601, 0.977052, 0.984660, 0.980064, 0.977945, 0.958763},
                                               {0.976041, 0.977457, 0.970910, 0.972580, 0.974113, 0.977651, 0.975834, 0.978143, 0.975454, 0.956149},
                                               {0.975642, 0.983230, 0.981979, 0.983916, 0.983955, 0.980012, 0.981368, 0.986424, 0.979392, 0.961203},
                                               {0.982657, 0.991817, 0.986389, 0.990308, 0.985404, 0.992059, 0.987024, 0.991056, 0.989007, 0.960188}},
                                              {{0.985683, 0.990994, 0.988944, 0.991152, 0.989995, 0.998219, 0.992777, 0.994272, 0.993582, 0.962069},
                                               {1.010971, 1.000362, 0.987895, 0.985631, 0.982607, 0.977342, 0.982563, 0.979822, 0.981091, 0.946149},
                                               {0.986264, 0.981762, 0.983484, 0.964441, 0.969492, 0.971574, 0.970823, 0.969781, 0.953500, 0.937741},
                                               {1.000864, 0.999333, 0.991784, 0.993444, 0.980848, 0.985354, 0.983899, 0.985209, 0.982302, 0.961217},
                                               {0.999316, 0.981341, 0.983819, 0.978526, 0.976379, 0.971997, 0.971811, 0.972843, 0.961246, 0.952045},
                                               {0.987205, 0.986174, 0.983807, 0.980326, 0.975094, 0.977306, 0.976296, 0.972149, 0.967129, 0.960895},
                                               {0.993296, 0.990070, 0.980000, 0.973355, 0.971760, 0.971823, 0.965722, 0.970787, 0.961507, 0.927067},
                                               {0.994177, 0.992531, 0.989517, 0.983011, 0.986006, 0.977389, 0.983418, 0.975430, 0.968228, 0.940686},
                                               {1.006781, 0.990072, 0.991949, 0.993772, 0.986202, 0.979684, 0.983704, 0.986496, 0.970397, 0.957911},
                                               {0.991380, 1.002913, 0.997458, 0.988103, 0.988349, 0.988894, 0.985900, 0.986741, 0.979741, 0.953554},
                                               {0.998399, 0.984032, 0.984433, 0.982705, 0.978331, 0.987147, 0.980464, 1.000412, 0.978765, 0.946833},
                                               {0.989351, 0.974004, 0.975591, 0.971699, 0.971667, 0.974184, 0.967196, 0.972780, 0.970945, 0.941200},
                                               {0.993755, 0.987404, 0.987337, 0.981680, 0.977852, 0.987526, 0.986208, 0.990416, 0.982680, 0.975818},
                                               {0.966987, 0.975768, 0.979305, 0.975158, 0.975874, 0.974495, 0.981235, 0.977896, 0.982268, 0.958845}},
                                              {{0.983955, 0.977479, 0.975331, 0.979219, 0.972380, 0.976137, 0.974428, 0.967168, 0.975559, 0.962891},
                                               {0.986157, 0.975957, 0.972520, 0.972462, 0.971512, 0.970889, 0.972557, 0.970053, 0.979825, 0.949371},
                                               {0.984634, 0.986129, 0.979042, 0.978020, 0.979444, 0.981154, 0.982357, 0.982270, 0.976524, 0.958154},
                                               {1.006016, 0.992451, 0.986944, 0.983657, 0.983883, 0.978475, 0.987123, 0.984246, 0.991892, 0.969888},
                                               {0.992605, 0.995499, 0.990935, 0.984915, 0.990490, 0.988021, 0.986479, 0.994926, 0.984681, 0.971816},
                                               {1.010586, 1.000939, 0.993172, 0.988889, 0.979539, 0.978699, 0.983588, 0.994003, 0.969368, 0.935988},
                                               {1.007699, 0.982867, 0.981019, 0.980401, 0.970862, 0.964327, 0.970740, 0.961984, 0.951028, 0.929655},
                                               {1.022717, 1.008054, 0.987039, 0.990212, 0.988383, 0.977892, 0.986739, 0.982051, 0.976062, 0.940044},
                                               {1.000305, 1.001227, 0.983480, 0.976617, 0.972599, 0.967652, 0.970729, 0.977775, 0.962372, 0.938885},
                                               {1.007051, 1.001864, 0.977391, 0.976385, 0.976781, 0.971773, 0.971653, 0.978473, 0.964720, 0.938782},
                                               {0.997708, 0.994447, 0.982169, 0.974970, 0.970476, 0.970654, 0.969215, 0.962506, 0.958700, 0.926376},
                                               {1.004271, 0.998717, 0.984103, 0.980151, 0.974526, 0.977041, 0.973801, 0.975720, 0.968984, 0.939207},
                                               {1.008395, 1.004826, 0.996221, 0.984396, 0.982083, 0.981048, 0.975978, 0.984907, 0.978052, 0.929724},
                                               {1.016117, 1.013486, 0.994734, 0.992498, 0.989075, 0.988682, 0.981046, 0.979656, 0.970999, 0.948875}}

};
float bin_centering_corr_th_pim[9][14][10] = {{{0.988259, 0.971830, 0.965299, 0.962961, 0.960008, 0.946382, 0.957427, 0.963507, 0.986461, 1.023917},
                                               {0.974011, 0.951791, 0.948028, 0.943491, 0.935277, 0.928881, 0.940269, 0.950873, 0.972458, 1.001734},
                                               {0.980381, 0.977827, 0.982641, 0.961964, 0.955131, 0.950743, 0.963360, 0.966708, 0.983858, 1.028824},
                                               {0.975424, 0.974304, 0.963346, 0.949776, 0.940047, 0.943194, 0.947079, 0.951010, 0.973280, 1.001599},
                                               {0.980153, 0.968747, 0.961711, 0.953354, 0.941236, 0.940954, 0.942924, 0.952120, 0.972187, 1.014980},
                                               {0.978356, 0.963939, 0.963927, 0.946363, 0.937321, 0.934463, 0.937312, 0.943941, 0.967995, 0.995571},
                                               {0.990501, 0.981080, 0.972207, 0.960535, 0.945472, 0.939473, 0.942492, 0.946645, 0.979705, 1.016775},
                                               {0.998593, 0.993987, 0.985440, 0.972978, 0.958104, 0.955102, 0.962838, 0.973126, 0.995516, 1.018311},
                                               {1.013471, 0.993392, 0.984167, 0.965385, 0.947861, 0.922183, 0.904945, 0.952103, 1.037683, 1.085845},
                                               {0.986333, 0.973502, 0.972627, 0.967505, 0.968794, 0.959244, 0.963746, 0.962663, 0.975738, 0.983537},
                                               {0.968952, 0.960555, 0.964057, 0.957008, 0.947594, 0.949122, 0.944636, 0.947672, 0.956083, 0.981996},
                                               {0.988719, 0.975135, 0.972772, 0.974190, 0.968818, 0.962160, 0.961448, 0.966796, 0.981260, 1.009073},
                                               {0.987426, 0.976012, 0.967000, 0.960930, 0.955812, 0.954824, 0.954454, 0.948561, 0.967486, 0.989683},
                                               {0.997057, 0.967576, 0.973888, 0.962671, 0.959699, 0.955415, 0.953556, 0.952647, 0.967111, 0.988620}},
                                              {{0.993706, 0.972443, 0.963395, 0.960950, 0.952939, 0.951547, 0.952794, 0.951689, 0.960184, 0.987556},
                                               {0.985169, 0.973903, 0.972906, 0.965713, 0.960865, 0.956352, 0.959785, 0.955381, 0.972270, 0.998695},
                                               {0.992754, 0.985980, 0.976340, 0.974718, 0.969873, 0.966145, 0.969654, 0.962359, 0.976810, 1.007188},
                                               {1.011217, 0.992019, 0.989092, 0.977893, 0.967715, 0.972820, 0.989138, 0.997452, 0.996465, 1.018406},
                                               {1.008665, 0.974546, 0.983876, 0.980793, 0.981300, 0.974749, 0.974520, 0.981589, 1.005166, 1.032695},
                                               {0.989402, 0.976295, 0.971832, 0.967550, 0.967160, 0.963917, 0.962285, 0.962728, 0.988184, 1.007067},
                                               {0.992708, 0.992075, 0.993148, 0.987838, 0.982690, 0.982533, 0.983729, 0.982935, 0.996202, 1.036721},
                                               {0.992190, 0.979792, 0.976912, 0.979063, 0.972153, 0.969521, 0.975955, 0.978341, 0.992824, 1.010210},
                                               {0.996087, 0.981378, 0.980103, 0.979174, 0.974861, 0.971877, 0.971010, 0.965932, 0.998584, 1.027791},
                                               {0.986995, 0.979085, 0.969452, 0.971399, 0.970656, 0.966040, 0.968188, 0.964473, 0.993437, 1.012471},
                                               {0.992712, 0.989063, 0.983588, 0.982298, 0.976089, 0.973404, 0.978945, 0.973888, 0.996462, 1.031116},
                                               {1.008243, 0.990916, 0.988592, 0.986624, 0.982466, 0.980636, 0.980889, 0.985801, 1.000053, 1.016490},
                                               {1.014240, 0.991692, 0.991355, 0.996243, 0.994785, 0.986356, 0.984774, 0.987435, 1.014779, 1.026676},
                                               {1.007678, 0.998084, 0.982058, 0.977945, 0.978289, 0.977335, 0.968951, 0.957049, 0.965170, 0.943909}},
                                              {{0.988583, 0.978014, 0.970501, 0.961010, 0.965660, 0.961358, 0.953165, 0.945085, 0.943871, 0.938340},
                                               {0.996315, 0.989480, 0.983134, 0.980423, 0.979165, 0.980068, 0.976143, 0.970323, 0.959709, 0.975874},
                                               {0.995139, 0.983317, 0.977436, 0.972427, 0.969768, 0.971228, 0.963066, 0.945797, 0.949111, 0.944845},
                                               {0.999265, 0.985976, 0.975513, 0.974113, 0.970383, 0.971206, 0.967263, 0.952573, 0.946964, 0.935811},
                                               {0.992517, 0.981297, 0.975849, 0.971742, 0.969495, 0.967607, 0.960948, 0.948709, 0.943895, 0.941669},
                                               {1.002620, 0.991729, 0.979710, 0.979324, 0.973864, 0.976062, 0.973828, 0.958277, 0.946272, 0.938194},
                                               {1.005207, 0.992272, 0.988005, 0.983295, 0.981763, 0.983164, 0.977415, 0.962803, 0.959195, 0.946949},
                                               {1.013062, 0.996652, 0.993668, 0.988588, 0.982731, 0.981560, 0.979271, 0.973783, 0.968242, 0.955666},
                                               {0.986116, 0.985475, 0.970172, 0.969577, 0.967963, 0.976991, 0.976192, 0.981816, 0.989817, 0.997853},
                                               {0.981927, 0.958021, 0.942588, 0.953281, 0.955586, 0.957206, 0.959175, 0.961095, 0.961945, 0.963821},
                                               {0.993447, 0.970981, 0.967648, 0.972007, 0.967671, 0.977762, 0.974688, 0.977796, 0.981590, 0.980124},
                                               {0.975649, 0.966295, 0.968868, 0.962915, 0.964596, 0.963830, 0.966595, 0.967680, 0.964307, 0.988804},
                                               {0.989656, 0.970034, 0.963926, 0.962879, 0.963768, 0.962321, 0.967798, 0.957210, 0.973693, 0.965062},
                                               {0.978716, 0.962357, 0.956395, 0.954475, 0.952713, 0.954306, 0.953179, 0.955792, 0.963700, 0.972758}},
                                              {{0.986535, 0.971642, 0.959762, 0.963514, 0.962392, 0.962888, 0.964956, 0.960215, 0.967845, 0.975206},
                                               {0.991032, 0.973835, 0.970478, 0.969334, 0.964418, 0.971321, 0.967558, 0.968590, 0.973573, 0.974635},
                                               {0.994990, 0.980999, 0.977551, 0.970630, 0.967614, 0.967355, 0.968603, 0.971412, 0.973862, 0.989594},
                                               {1.014740, 0.990264, 0.978341, 0.977388, 0.969157, 0.970377, 0.960992, 0.961128, 0.951479, 0.948768},
                                               {0.989926, 0.984249, 0.965069, 0.958694, 0.960832, 0.954533, 0.953407, 0.945620, 0.938707, 0.930543},
                                               {1.023809, 0.981929, 0.982709, 0.980472, 0.969698, 0.971548, 0.972892, 0.957748, 0.948372, 0.962300},
                                               {1.005034, 0.988232, 0.975750, 0.969922, 0.963680, 0.961340, 0.957282, 0.950875, 0.947827, 0.941228},
                                               {1.001371, 0.981250, 0.976163, 0.974547, 0.970604, 0.964574, 0.955259, 0.953361, 0.948821, 0.939293},
                                               {1.002720, 0.981718, 0.973483, 0.967809, 0.958338, 0.958211, 0.954636, 0.950357, 0.940213, 0.938323},
                                               {1.015729, 0.981022, 0.981031, 0.971098, 0.966366, 0.965023, 0.962600, 0.954719, 0.952645, 0.939554},
                                               {1.010206, 0.994615, 0.987544, 0.979900, 0.973100, 0.971205, 0.971322, 0.958508, 0.953180, 0.938596},
                                               {1.014968, 0.999428, 0.988678, 0.982311, 0.973769, 0.971402, 0.973843, 0.967025, 0.963731, 0.950721},
                                               {0.988099, 0.994069, 0.988499, 0.993646, 0.999456, 0.989560, 0.994293, 1.002190, 1.001318, 0.992154},
                                               {0.998779, 0.977453, 0.970454, 0.981042, 0.984011, 0.972266, 0.984601, 0.981029, 0.982675, 0.973801}},
                                              {{1.013834, 1.011333, 0.999108, 0.997433, 0.998373, 1.000915, 0.993410, 0.993200, 1.008118, 1.021110},
                                               {1.009035, 0.990920, 0.987559, 0.991392, 0.989628, 0.993242, 0.989427, 0.987819, 0.993131, 0.996587},
                                               {1.009530, 0.992793, 0.994510, 0.986570, 0.991198, 0.988160, 0.990729, 0.989302, 0.999981, 1.001010},
                                               {0.999064, 0.991520, 0.991592, 0.986428, 0.987866, 0.985775, 0.983588, 0.982168, 0.984550, 1.004762},
                                               {1.005958, 0.992468, 0.997413, 0.992720, 0.993292, 0.993601, 0.996459, 0.991575, 0.995366, 1.005725},
                                               {1.020085, 1.005133, 1.000399, 1.002638, 0.998382, 0.998920, 1.000052, 0.996179, 1.000009, 1.010426},
                                               {1.015603, 1.009208, 1.005430, 0.998627, 1.003499, 1.002622, 1.002482, 1.002168, 1.002592, 1.012863},
                                               {0.987730, 0.981074, 0.972138, 0.971634, 0.978696, 0.974463, 0.977081, 0.980004, 0.985875, 1.001629},
                                               {0.963684, 0.965338, 0.956479, 0.957586, 0.960053, 0.958674, 0.967801, 0.964644, 0.970390, 0.989787},
                                               {0.974465, 0.975143, 0.976282, 0.976990, 0.975353, 0.982448, 0.983692, 0.982666, 0.991305, 1.006000},
                                               {0.960942, 0.965914, 0.964684, 0.971481, 0.966116, 0.971583, 0.970834, 0.976656, 0.977994, 0.999796},
                                               {0.974589, 0.965868, 0.971312, 0.966289, 0.967144, 0.970750, 0.972092, 0.978237, 0.982183, 0.999800},
                                               {0.969203, 0.959880, 0.962919, 0.959386, 0.965200, 0.963408, 0.966167, 0.972439, 0.975646, 0.981471},
                                               {0.971038, 0.967182, 0.972289, 0.969082, 0.972319, 0.975268, 0.971278, 0.976464, 0.981198, 0.998143}},
                                              {{0.988121, 0.977799, 0.976364, 0.978384, 0.977246, 0.978374, 0.979085, 0.986165, 0.991428, 0.999865},
                                               {0.991195, 0.984355, 0.981020, 0.979892, 0.981945, 0.981807, 0.985411, 0.981571, 0.992518, 1.000117},
                                               {0.972890, 0.967516, 0.975765, 0.979558, 0.980613, 0.988932, 0.986428, 0.986570, 0.993185, 0.999289},
                                               {0.959042, 0.947575, 0.958725, 0.963680, 0.965264, 0.973989, 0.980731, 0.978288, 0.973631, 0.966216},
                                               {0.974314, 0.964362, 0.978394, 0.977965, 0.986363, 0.998249, 0.998797, 0.995155, 0.987850, 1.005084},
                                               {0.950624, 0.966360, 0.968134, 0.970990, 0.977744, 0.988676, 0.989951, 0.984410, 0.982406, 0.999048},
                                               {0.965821, 0.963420, 0.961553, 0.973055, 0.976466, 0.982457, 0.989406, 0.980221, 0.985176, 0.991062},
                                               {0.958378, 0.957831, 0.963067, 0.962988, 0.976367, 0.978814, 0.981407, 0.982718, 0.980319, 0.988954},
                                               {0.960252, 0.958306, 0.966114, 0.974803, 0.979233, 0.985288, 0.993823, 0.990516, 0.990389, 0.990449},
                                               {0.961204, 0.965016, 0.971004, 0.972973, 0.986444, 0.993484, 1.002576, 0.997332, 0.997302, 0.997972},
                                               {0.970150, 0.968451, 0.975164, 0.980721, 0.986748, 0.992760, 0.998798, 0.999521, 0.994676, 0.993642},
                                               {1.023150, 1.006926, 1.004676, 0.989525, 0.983588, 0.975365, 0.975121, 0.973535, 0.964628, 0.990871},
                                               {1.018376, 1.001465, 0.991833, 0.986134, 0.970316, 0.957680, 0.953723, 0.957093, 0.957663, 0.949239},
                                               {1.033816, 1.022328, 1.010927, 0.993803, 0.991826, 0.974987, 0.968736, 0.967008, 0.982778, 0.985026}},
                                              {{1.016524, 1.006409, 1.001766, 0.986169, 0.978552, 0.966934, 0.959395, 0.967598, 0.962411, 0.962377},
                                               {1.018485, 1.003897, 0.999659, 0.991892, 0.978739, 0.963039, 0.965289, 0.963707, 0.962668, 0.967740},
                                               {1.013778, 1.003986, 0.987198, 0.988267, 0.975241, 0.963696, 0.955876, 0.960898, 0.964404, 0.968245},
                                               {1.026411, 1.015100, 0.998772, 0.994726, 0.977629, 0.969359, 0.966418, 0.967439, 0.969523, 0.961890},
                                               {1.028621, 1.005243, 1.001839, 0.995749, 0.987040, 0.975542, 0.965820, 0.970277, 0.971186, 0.973198},
                                               {1.035441, 1.018906, 1.006231, 1.000727, 0.986374, 0.978559, 0.971943, 0.973233, 0.973850, 0.964747},
                                               {1.001181, 0.977454, 0.983240, 0.978527, 0.979982, 0.981121, 0.980846, 0.986468, 0.976008, 0.989415},
                                               {0.989820, 0.968555, 0.967171, 0.966543, 0.971990, 0.970004, 0.977326, 0.978857, 0.971440, 0.966181},
                                               {0.977992, 0.982122, 0.992514, 0.989188, 0.990689, 0.986960, 0.991665, 0.981949, 0.985936, 0.961019},
                                               {0.982305, 0.970917, 0.977045, 0.979844, 0.976501, 0.979410, 0.979345, 0.979524, 0.975530, 0.979623},
                                               {0.985073, 0.982993, 0.977101, 0.973273, 0.979674, 0.975787, 0.977255, 0.983944, 0.979012, 0.992159},
                                               {0.980972, 0.975087, 0.975624, 0.975633, 0.975988, 0.975107, 0.973293, 0.976103, 0.976401, 0.958943},
                                               {0.982258, 0.980420, 0.982396, 0.984968, 0.982941, 0.982455, 0.983290, 0.987751, 0.977895, 0.976699},
                                               {0.984577, 0.995673, 0.991919, 0.988075, 0.993722, 0.985803, 0.987230, 0.988903, 0.983121, 0.972565}},
                                              {{0.998992, 0.997995, 0.993494, 0.992493, 0.992699, 0.990575, 0.989553, 0.992280, 0.985482, 0.973195},
                                               {0.998611, 0.997890, 0.992483, 0.982236, 0.979067, 0.989015, 0.981960, 0.988898, 0.986817, 1.010832},
                                               {0.992398, 0.981020, 0.971952, 0.965256, 0.974543, 0.966809, 0.975391, 0.977744, 0.981753, 0.966106},
                                               {1.021198, 0.997870, 0.982009, 0.990447, 0.980783, 0.988006, 0.992350, 0.988220, 0.998542, 1.001730},
                                               {0.978909, 0.985945, 0.980690, 0.975140, 0.971078, 0.980183, 0.978024, 0.977364, 0.976907, 0.983672},
                                               {0.998381, 0.986299, 0.982971, 0.980047, 0.974874, 0.979411, 0.979172, 0.973951, 0.978421, 0.995448},
                                               {0.992184, 0.978906, 0.973735, 0.976333, 0.972009, 0.975125, 0.977313, 0.975947, 0.982088, 0.997797},
                                               {0.998044, 1.001067, 0.986484, 0.987051, 0.981920, 0.984309, 0.983706, 0.983419, 0.978636, 0.971528},
                                               {1.008384, 0.994045, 0.987460, 0.986106, 0.986334, 0.986153, 0.986055, 0.990616, 0.979575, 0.990239},
                                               {1.007797, 0.998165, 0.997492, 0.988231, 0.990056, 0.990507, 0.991349, 0.994197, 0.994780, 0.982287},
                                               {1.073792, 1.003762, 0.976302, 0.981050, 0.985976, 0.984409, 0.983720, 0.984898, 0.971272, 0.988100},
                                               {1.036904, 0.995358, 0.965679, 0.974855, 0.969944, 0.977894, 0.972205, 0.973244, 0.976492, 0.995351},
                                               {1.059572, 1.005091, 0.981563, 0.984665, 0.989379, 0.987481, 0.981000, 0.982479, 0.988237, 1.005198},
                                               {1.037788, 0.992380, 0.977886, 0.975165, 0.974799, 0.976211, 0.979175, 0.978513, 0.979952, 0.972136}},
                                              {{1.025234, 0.990336, 0.980857, 0.975582, 0.973517, 0.977501, 0.974478, 0.978606, 0.973215, 0.996337},
                                               {1.025057, 0.993632, 0.974584, 0.970379, 0.970585, 0.973940, 0.972878, 0.966955, 0.973737, 0.981538},
                                               {1.027924, 1.005261, 0.982953, 0.983021, 0.980141, 0.975537, 0.974971, 0.977357, 0.983458, 0.976061},
                                               {1.051842, 1.002095, 0.985935, 0.983400, 0.981200, 0.988360, 0.985911, 0.984501, 0.980920, 1.005695},
                                               {1.043070, 1.010625, 0.993388, 0.984621, 0.987546, 0.995958, 0.986214, 0.989706, 0.983236, 0.973481},
                                               {1.015322, 0.994751, 0.982534, 0.986403, 0.996833, 0.975643, 0.991178, 0.989663, 0.982612, 1.025980},
                                               {0.994217, 0.987059, 0.975863, 0.969034, 0.968347, 0.977925, 0.979747, 0.969717, 0.983042, 1.003405},
                                               {1.024448, 0.992814, 0.991910, 0.987996, 0.991589, 0.993777, 0.986013, 0.995445, 1.004430, 1.022205},
                                               {1.002802, 0.988743, 0.981980, 0.980986, 0.978104, 0.974913, 0.981892, 0.979758, 0.983740, 1.017436},
                                               {1.015380, 0.985657, 0.973599, 0.978855, 0.975019, 0.976170, 0.979754, 0.984806, 0.993519, 0.996991},
                                               {0.990033, 0.984522, 0.969909, 0.979735, 0.972055, 0.972983, 0.972635, 0.980239, 0.985548, 0.997048},
                                               {1.009129, 0.995074, 0.980439, 0.975662, 0.980622, 0.978114, 0.984605, 0.989451, 0.987365, 1.011743},
                                               {1.027303, 0.993852, 0.984125, 0.984909, 0.985043, 0.988360, 0.986112, 0.987928, 0.995323, 0.993886},
                                               {1.036786, 0.998328, 0.989796, 0.986218, 0.993432, 0.990067, 0.995555, 0.997043, 0.999957, 1.001694}}

};
float bin_centering_corr_alpha_prot[9][14][10] = {{{0.961887, 0.947061, 0.960970, 0.963652, 0.968368, 0.970511, 0.960158, 0.952184, 0.952080, 0.948990},
                                                   {0.934226, 0.936309, 0.935104, 0.935915, 0.957496, 0.958618, 0.944208, 0.941674, 0.935917, 0.931119},
                                                   {0.957284, 0.962118, 0.959136, 0.963233, 0.972567, 0.972083, 0.958976, 0.956711, 0.964288, 0.959425},
                                                   {0.944898, 0.948346, 0.941014, 0.938493, 0.958140, 0.961945, 0.944902, 0.942440, 0.943554, 0.947390},
                                                   {0.948048, 0.949734, 0.940907, 0.945312, 0.959259, 0.960311, 0.944366, 0.939591, 0.950690, 0.945240},
                                                   {0.944069, 0.943218, 0.936541, 0.937048, 0.953709, 0.956233, 0.939229, 0.932392, 0.940768, 0.948444},
                                                   {0.960487, 0.956792, 0.939810, 0.941348, 0.962067, 0.956782, 0.944091, 0.940250, 0.953502, 0.954613},
                                                   {0.965893, 0.963522, 0.960525, 0.963321, 0.973768, 0.977647, 0.967642, 0.961009, 0.962136, 0.969234},
                                                   {0.968264, 0.953655, 0.917686, 0.934474, 1.002277, 1.004938, 0.936932, 0.920573, 0.958633, 0.971214},
                                                   {0.980170, 0.966836, 0.955414, 0.949285, 0.957023, 0.959980, 0.967040, 0.946798, 0.960017, 0.968300},
                                                   {0.953072, 0.950604, 0.943481, 0.943482, 0.943622, 0.940014, 0.939842, 0.938158, 0.954045, 0.953790},
                                                   {0.971020, 0.972280, 0.959625, 0.958121, 0.961369, 0.964848, 0.960460, 0.961929, 0.968526, 0.972595},
                                                   {0.964397, 0.951985, 0.953790, 0.948508, 0.948261, 0.948264, 0.948314, 0.945790, 0.961676, 0.967047},
                                                   {0.968232, 0.957124, 0.951001, 0.949576, 0.950909, 0.957922, 0.947975, 0.942977, 0.962911, 0.967767}},
                                                  {{0.960438, 0.954706, 0.944499, 0.942669, 0.946063, 0.946324, 0.952262, 0.941909, 0.956721, 0.964872},
                                                   {0.966642, 0.960757, 0.953567, 0.955540, 0.956772, 0.959793, 0.947199, 0.955107, 0.961001, 0.970225},
                                                   {0.974623, 0.972690, 0.961369, 0.961685, 0.965268, 0.967133, 0.962126, 0.955804, 0.964809, 0.983946},
                                                   {0.983616, 0.977633, 0.965385, 0.971906, 0.969402, 0.972195, 0.972565, 0.964430, 0.976134, 0.986359},
                                                   {0.979046, 0.972051, 0.969252, 0.981616, 0.993243, 0.984420, 0.966682, 0.967498, 0.972559, 0.966027},
                                                   {0.963211, 0.950491, 0.954075, 0.956320, 0.974363, 0.977184, 0.964095, 0.959356, 0.961997, 0.967125},
                                                   {0.975781, 0.984520, 0.976944, 0.978784, 0.990383, 0.988709, 0.974847, 0.974219, 0.985330, 0.974470},
                                                   {0.974077, 0.969481, 0.970611, 0.966160, 0.978520, 0.979464, 0.967766, 0.967946, 0.968717, 0.969726},
                                                   {0.975639, 0.972423, 0.970956, 0.968067, 0.982519, 0.981364, 0.961645, 0.966515, 0.969390, 0.968635},
                                                   {0.962933, 0.963770, 0.962109, 0.966529, 0.973810, 0.973422, 0.961198, 0.964450, 0.959075, 0.969619},
                                                   {0.977987, 0.976025, 0.973950, 0.972015, 0.983439, 0.979969, 0.974519, 0.969196, 0.972337, 0.976060},
                                                   {0.983935, 0.978895, 0.972582, 0.983365, 0.986436, 0.985571, 0.975856, 0.975431, 0.976026, 0.983963},
                                                   {0.983635, 0.983615, 0.981941, 0.982215, 0.991868, 0.992678, 0.987167, 0.980496, 0.986927, 0.989738},
                                                   {0.992200, 0.966586, 0.961870, 0.960728, 0.948928, 0.951789, 0.959336, 0.966437, 0.970665, 0.996049}},
                                                  {{0.971589, 0.955736, 0.952107, 0.936866, 0.935151, 0.933026, 0.949300, 0.942023, 0.959101, 0.972129},
                                                   {0.991851, 0.977964, 0.966237, 0.967806, 0.958004, 0.957331, 0.961556, 0.969912, 0.976928, 0.982569},
                                                   {0.975929, 0.963208, 0.963344, 0.951282, 0.945053, 0.941774, 0.951253, 0.955127, 0.965873, 0.982100},
                                                   {0.982627, 0.965929, 0.963172, 0.955076, 0.948468, 0.946099, 0.952372, 0.958106, 0.965459, 0.981764},
                                                   {0.977360, 0.964364, 0.953914, 0.951347, 0.947711, 0.945924, 0.951032, 0.954382, 0.962119, 0.977281},
                                                   {0.980283, 0.966552, 0.963048, 0.964612, 0.954398, 0.954428, 0.964182, 0.968332, 0.970899, 0.983263},
                                                   {0.986799, 0.976001, 0.974127, 0.967727, 0.962608, 0.960141, 0.971450, 0.968761, 0.973855, 0.992058},
                                                   {0.994218, 0.972807, 0.971914, 0.977646, 0.970997, 0.961035, 0.974370, 0.973641, 0.978988, 0.992849},
                                                   {0.969684, 0.961808, 0.964641, 0.980750, 0.981690, 0.985145, 0.971362, 0.967281, 0.960366, 0.956166},
                                                   {0.950992, 0.933647, 0.949821, 0.953695, 0.964655, 0.965784, 0.951661, 0.945453, 0.945131, 0.951805},
                                                   {0.954345, 0.954109, 0.964872, 0.968103, 0.982725, 0.987843, 0.972086, 0.958828, 0.964152, 0.968007},
                                                   {0.958975, 0.949937, 0.954556, 0.961629, 0.973126, 0.966465, 0.965629, 0.958812, 0.947375, 0.961248},
                                                   {0.951956, 0.955594, 0.955791, 0.964111, 0.963080, 0.961719, 0.962509, 0.951835, 0.956388, 0.960870},
                                                   {0.947680, 0.940632, 0.946575, 0.953521, 0.962203, 0.957857, 0.952323, 0.946011, 0.942935, 0.955508}},
                                                  {{0.960657, 0.952983, 0.963602, 0.956995, 0.964437, 0.968018, 0.958790, 0.953738, 0.947600, 0.954778},
                                                   {0.969488, 0.960157, 0.964443, 0.959232, 0.972505, 0.966523, 0.962817, 0.966681, 0.961653, 0.961473},
                                                   {0.967882, 0.966386, 0.962781, 0.963682, 0.971866, 0.970666, 0.965260, 0.963874, 0.964090, 0.967928},
                                                   {0.979871, 0.962083, 0.982351, 0.953761, 0.963965, 0.957613, 0.963529, 0.968431, 0.968742, 0.972136},
                                                   {0.962471, 0.956828, 0.958099, 0.954559, 0.945279, 0.946638, 0.948869, 0.956501, 0.953536, 0.954103},
                                                   {0.974984, 0.967306, 0.969046, 0.973206, 0.968724, 0.953956, 0.974426, 0.962308, 0.975272, 0.976674},
                                                   {0.971634, 0.963180, 0.957187, 0.959329, 0.957515, 0.954055, 0.954325, 0.950087, 0.963746, 0.977680},
                                                   {0.972347, 0.959390, 0.960203, 0.957051, 0.954155, 0.956707, 0.958780, 0.965155, 0.959609, 0.968714},
                                                   {0.966520, 0.954923, 0.957173, 0.955155, 0.950828, 0.950039, 0.950674, 0.954671, 0.959769, 0.968167},
                                                   {0.968352, 0.968235, 0.960631, 0.960148, 0.957797, 0.958809, 0.958745, 0.965545, 0.968770, 0.974526},
                                                   {0.979466, 0.969334, 0.966750, 0.967602, 0.961047, 0.960785, 0.962314, 0.971690, 0.969353, 0.978676},
                                                   {0.983112, 0.973077, 0.973875, 0.967402, 0.965635, 0.965420, 0.965115, 0.973019, 0.973536, 0.982917},
                                                   {0.992158, 0.994142, 0.987599, 0.984952, 0.990468, 0.993268, 0.987061, 0.988451, 0.973265, 0.979829},
                                                   {0.977951, 0.974303, 0.974366, 0.984999, 0.973768, 0.980409, 0.974100, 0.972783, 0.970366, 0.975715}},
                                                  {{0.994293, 0.989387, 0.985400, 0.997114, 1.003351, 1.004009, 0.985104, 0.993069, 0.984888, 0.999701},
                                                   {0.978316, 0.988276, 0.991914, 0.986468, 0.989447, 0.985729, 0.981873, 0.982598, 0.980495, 0.986309},
                                                   {0.986814, 0.980260, 0.995331, 0.984599, 0.988290, 0.994499, 0.989688, 0.985788, 0.982120, 0.982912},
                                                   {0.982927, 0.979480, 0.981616, 0.981454, 0.981286, 0.983153, 0.984342, 0.982883, 0.974111, 0.984626},
                                                   {0.988745, 0.990279, 0.990238, 0.992159, 0.990599, 0.989179, 0.994046, 0.992758, 0.979836, 0.986344},
                                                   {0.996320, 0.991187, 0.993234, 0.997084, 0.998096, 0.995617, 0.993638, 0.998663, 0.991886, 0.995595},
                                                   {0.997308, 0.995238, 0.997941, 1.002291, 1.003481, 1.001953, 0.997291, 1.001275, 0.997762, 0.998065},
                                                   {0.967179, 0.977601, 0.969035, 0.968769, 0.984606, 0.979309, 0.972700, 0.973395, 0.970679, 0.985211},
                                                   {0.954955, 0.959178, 0.961349, 0.958884, 0.967325, 0.961016, 0.960663, 0.959317, 0.948755, 0.960206},
                                                   {0.972011, 0.967468, 0.972029, 0.966453, 0.985393, 0.973911, 0.982896, 0.972787, 0.973010, 0.980417},
                                                   {0.961113, 0.963890, 0.969040, 0.961542, 0.976920, 0.971696, 0.966206, 0.967376, 0.960485, 0.962371},
                                                   {0.963332, 0.968934, 0.965954, 0.968231, 0.976859, 0.970949, 0.970594, 0.967156, 0.963259, 0.967327},
                                                   {0.959199, 0.957315, 0.960795, 0.965694, 0.972339, 0.965124, 0.960090, 0.960782, 0.963369, 0.955918},
                                                   {0.965171, 0.966805, 0.969160, 0.972266, 0.979237, 0.979408, 0.968348, 0.970150, 0.965918, 0.961419}},
                                                  {{0.973022, 0.969368, 0.976259, 0.977734, 0.985334, 0.985305, 0.974056, 0.974675, 0.970279, 0.967076},
                                                   {0.975320, 0.981944, 0.979508, 0.977227, 0.988959, 0.985303, 0.977858, 0.979742, 0.973278, 0.980359},
                                                   {0.982982, 0.978402, 0.973966, 0.964855, 0.984320, 0.977452, 0.982243, 0.975961, 0.982275, 0.977483},
                                                   {0.961413, 0.966445, 0.967119, 0.963854, 0.962267, 0.968287, 0.963996, 0.961124, 0.972188, 0.959400},
                                                   {0.983557, 0.986726, 0.985149, 0.973265, 0.983395, 0.986984, 0.978988, 0.988807, 0.978702, 0.980486},
                                                   {0.970730, 0.975439, 0.977734, 0.964773, 0.980397, 0.977698, 0.970846, 0.975107, 0.978950, 0.973721},
                                                   {0.973532, 0.976475, 0.977991, 0.970420, 0.971699, 0.974770, 0.968530, 0.975221, 0.974267, 0.967421},
                                                   {0.969163, 0.975261, 0.972422, 0.967167, 0.970940, 0.973213, 0.967857, 0.970757, 0.969461, 0.968288},
                                                   {0.973926, 0.977133, 0.979069, 0.977943, 0.977395, 0.979390, 0.973015, 0.976373, 0.974540, 0.970681},
                                                   {0.979346, 0.979941, 0.977915, 0.978634, 0.980272, 0.986410, 0.975915, 0.982559, 0.978851, 0.983960},
                                                   {0.985514, 0.981324, 0.985145, 0.985300, 0.989242, 0.993007, 0.976827, 0.982165, 0.983723, 0.980844},
                                                   {0.995689, 0.971627, 0.975223, 0.980918, 0.983112, 0.989983, 0.976115, 0.973672, 0.997265, 0.990496},
                                                   {0.981208, 0.966945, 0.958484, 0.961482, 0.975658, 0.966864, 0.957581, 0.963873, 0.966493, 0.978812},
                                                   {1.000982, 0.985907, 0.981717, 0.984945, 0.984129, 0.982511, 0.979574, 0.991906, 0.983761, 0.992459}},
                                                  {{0.982607, 0.979771, 0.977930, 0.964098, 0.974510, 0.973536, 0.973457, 0.975617, 0.974932, 0.992418},
                                                   {0.982895, 0.978273, 0.971497, 0.972417, 0.975160, 0.972783, 0.967211, 0.972588, 0.979898, 0.981041},
                                                   {0.980688, 0.970040, 0.968555, 0.970898, 0.969665, 0.974910, 0.970844, 0.969929, 0.979348, 0.977190},
                                                   {0.985228, 0.979402, 0.980809, 0.965681, 0.984888, 0.982249, 0.970631, 0.973441, 0.981432, 0.988052},
                                                   {0.999021, 0.982242, 0.978148, 0.975046, 0.981889, 0.982874, 0.974659, 0.984790, 0.982676, 0.989179},
                                                   {0.998030, 0.989728, 0.984126, 0.976356, 0.991185, 0.981576, 0.983995, 0.984566, 0.991708, 0.998849},
                                                   {0.977951, 0.980724, 0.986205, 0.969592, 0.978566, 0.975297, 0.976502, 0.976020, 0.985165, 0.993769},
                                                   {0.971893, 0.969063, 0.974408, 0.969147, 0.960544, 0.969182, 0.960423, 0.974582, 0.973936, 0.963214},
                                                   {0.981997, 0.990805, 0.990279, 0.981282, 0.971046, 0.982502, 0.986097, 0.990138, 0.984231, 0.976436},
                                                   {0.974244, 0.983233, 0.975218, 0.973313, 0.971995, 0.967971, 0.972652, 0.977698, 0.980305, 0.977524},
                                                   {0.973258, 0.985077, 0.975022, 0.971084, 0.972278, 0.974784, 0.976057, 0.978175, 0.977160, 0.985078},
                                                   {0.972112, 0.973815, 0.972651, 0.971944, 0.970296, 0.965065, 0.965118, 0.973678, 0.978776, 0.979928},
                                                   {0.977907, 0.981205, 0.982256, 0.978709, 0.980123, 0.978126, 0.971621, 0.985990, 0.981749, 0.978912},
                                                   {0.987723, 0.985576, 0.988870, 0.979373, 0.980797, 0.984545, 0.980010, 0.993661, 0.985834, 0.983789}},
                                                  {{0.991390, 0.992081, 0.995333, 0.987122, 0.987342, 0.986124, 0.982818, 0.997464, 0.997126, 0.989970},
                                                   {0.982031, 0.972016, 0.981805, 0.993879, 0.982913, 0.982246, 0.986659, 0.973089, 0.976992, 0.986444},
                                                   {0.974027, 0.957910, 0.967367, 0.968664, 0.976118, 0.971996, 0.972671, 0.972352, 0.971112, 0.966716},
                                                   {0.994827, 0.993029, 0.983903, 0.981881, 0.975370, 0.994819, 0.982091, 0.982340, 0.978915, 0.989747},
                                                   {0.970885, 0.977252, 0.980918, 0.977532, 0.975583, 0.973474, 0.965599, 0.978845, 0.965356, 0.980863},
                                                   {0.976587, 0.974099, 0.976265, 0.968912, 0.983050, 0.976707, 0.974270, 0.975802, 0.976253, 0.974706},
                                                   {0.973792, 0.969096, 0.967358, 0.968125, 0.978467, 0.972935, 0.968355, 0.970019, 0.970610, 0.970082},
                                                   {0.984726, 0.975054, 0.984150, 0.978486, 0.979453, 0.985642, 0.975610, 0.980043, 0.979447, 0.981485},
                                                   {0.989633, 0.980671, 0.980520, 0.980013, 0.988391, 0.983295, 0.982349, 0.987463, 0.980989, 0.992603},
                                                   {0.989277, 0.986339, 0.988341, 0.984738, 0.989489, 0.990542, 0.987117, 0.991052, 0.984107, 0.989559},
                                                   {1.013687, 0.983180, 0.983872, 0.974834, 0.969067, 0.979605, 0.973749, 0.990500, 0.980097, 0.993326},
                                                   {0.991878, 0.966785, 0.976129, 0.970702, 0.971835, 0.970298, 0.970097, 0.975872, 0.964142, 0.980608},
                                                   {0.989271, 0.984074, 0.988066, 0.981935, 0.973721, 0.976093, 0.971337, 0.989063, 0.974337, 0.999588},
                                                   {0.981303, 0.977058, 0.972226, 0.970636, 0.966671, 0.974192, 0.975091, 0.976919, 0.971342, 0.993776}},
                                                  {{0.974940, 0.972143, 0.971906, 0.978364, 0.970572, 0.968787, 0.973087, 0.970730, 0.976428, 0.986924},
                                                   {0.982037, 0.963529, 0.968500, 0.969098, 0.973240, 0.965544, 0.971233, 0.971785, 0.968676, 0.984193},
                                                   {0.996123, 0.977203, 0.973923, 0.974140, 0.978843, 0.975600, 0.977157, 0.976374, 0.980029, 0.992014},
                                                   {0.994173, 0.981043, 0.981986, 0.980592, 0.984344, 0.981581, 0.983629, 0.985356, 0.979035, 0.999371},
                                                   {1.001383, 0.985501, 0.986481, 0.981935, 0.981150, 0.982934, 0.982240, 0.983571, 0.986205, 0.998096},
                                                   {0.986341, 0.976258, 0.983853, 0.982386, 0.983449, 0.993001, 0.982600, 0.974024, 0.987010, 0.977880},
                                                   {0.966925, 0.962788, 0.968870, 0.973642, 0.976527, 0.985056, 0.964208, 0.964480, 0.965960, 0.974321},
                                                   {0.995080, 0.979263, 0.981447, 0.978273, 0.989044, 0.993977, 0.992449, 0.981648, 0.972788, 0.992980},
                                                   {0.972319, 0.977292, 0.968591, 0.972573, 0.985495, 0.988600, 0.978605, 0.970365, 0.970501, 0.973922},
                                                   {0.976041, 0.970831, 0.972180, 0.981450, 0.987374, 0.983182, 0.975403, 0.971320, 0.969276, 0.984650},
                                                   {0.972295, 0.971212, 0.963729, 0.972735, 0.984694, 0.986365, 0.972954, 0.968738, 0.964403, 0.968671},
                                                   {0.978592, 0.976290, 0.973192, 0.979766, 0.993748, 0.985563, 0.978764, 0.971424, 0.974742, 0.981420},
                                                   {0.981647, 0.985516, 0.978363, 0.985502, 0.993835, 0.995040, 0.988847, 0.978794, 0.983802, 0.984703},
                                                   {0.988793, 0.982160, 0.984297, 0.985518, 0.998320, 0.997215, 0.990744, 0.984016, 0.986147, 0.990369}}

};
float bin_centering_corr_alpha_pip[9][14][10] = {{{0.980624, 0.933781, 0.924402, 0.963837, 0.985392, 0.984356, 0.955527, 0.921298, 0.932041, 0.982585},
                                                  {0.965020, 0.917598, 0.902967, 0.938121, 0.963934, 0.967841, 0.936613, 0.902634, 0.915233, 0.966494},
                                                  {0.983053, 0.943733, 0.924615, 0.962906, 0.993341, 0.989691, 0.961807, 0.926159, 0.937205, 0.977498},
                                                  {0.969609, 0.917324, 0.912345, 0.946298, 0.977717, 0.977406, 0.945211, 0.917515, 0.920405, 0.970709},
                                                  {0.964891, 0.918356, 0.915550, 0.948117, 0.978376, 0.977605, 0.949627, 0.911178, 0.926351, 0.968129},
                                                  {0.963902, 0.918004, 0.910217, 0.942269, 0.966853, 0.972454, 0.945260, 0.910004, 0.917709, 0.960649},
                                                  {0.971255, 0.924165, 0.918253, 0.956580, 0.981864, 0.979632, 0.951670, 0.919811, 0.921343, 0.971161},
                                                  {0.986478, 0.936614, 0.932052, 0.967658, 0.992883, 0.996218, 0.969185, 0.932567, 0.941180, 0.983019},
                                                  {1.000521, 0.887800, 0.892495, 0.968034, 1.001386, 1.007896, 0.967285, 0.895626, 0.883582, 1.003211},
                                                  {0.961154, 0.952827, 0.963245, 0.969230, 0.970470, 0.973874, 0.950988, 0.955513, 0.957016, 0.963017},
                                                  {0.949182, 0.938905, 0.952056, 0.948196, 0.955505, 0.952143, 0.953269, 0.949673, 0.935160, 0.941251},
                                                  {0.965779, 0.959996, 0.969386, 0.963735, 0.968172, 0.969342, 0.969725, 0.959649, 0.953313, 0.964857},
                                                  {0.952884, 0.941882, 0.954379, 0.961832, 0.964234, 0.964794, 0.959137, 0.949281, 0.948114, 0.954189},
                                                  {0.951626, 0.950871, 0.954916, 0.960300, 0.964695, 0.962576, 0.959998, 0.955315, 0.947055, 0.954806}},
                                                 {{0.950057, 0.941463, 0.944862, 0.950214, 0.961208, 0.960815, 0.956733, 0.953694, 0.941103, 0.951710},
                                                  {0.957649, 0.947585, 0.959990, 0.959880, 0.963646, 0.965876, 0.959568, 0.953257, 0.949332, 0.964208},
                                                  {0.967679, 0.963127, 0.967172, 0.970955, 0.971000, 0.979023, 0.967375, 0.959473, 0.959210, 0.964816},
                                                  {0.990612, 0.967311, 0.963250, 0.974738, 0.981273, 0.982147, 0.972000, 0.972187, 0.972492, 0.995143},
                                                  {0.974819, 0.966313, 0.972994, 0.983272, 0.988846, 0.979475, 0.971088, 0.971229, 0.961202, 0.981107},
                                                  {0.964437, 0.951542, 0.954743, 0.958694, 0.969077, 0.967798, 0.973707, 0.965681, 0.953379, 0.966455},
                                                  {0.980847, 0.979435, 0.977051, 0.985115, 0.983276, 0.984050, 0.981378, 0.984121, 0.973981, 0.979879},
                                                  {0.972791, 0.959152, 0.967753, 0.980760, 0.976548, 0.974589, 0.974311, 0.970377, 0.963436, 0.972880},
                                                  {0.974665, 0.961310, 0.968463, 0.975694, 0.974641, 0.977582, 0.968527, 0.963727, 0.960532, 0.977784},
                                                  {0.961882, 0.958773, 0.967755, 0.962876, 0.974690, 0.970545, 0.971352, 0.965028, 0.955253, 0.964685},
                                                  {0.974461, 0.968493, 0.970653, 0.977546, 0.980151, 0.981514, 0.975440, 0.969522, 0.968405, 0.966900},
                                                  {0.977691, 0.970651, 0.981933, 0.981259, 0.989694, 0.985959, 0.979660, 0.979907, 0.971134, 0.980598},
                                                  {0.987641, 0.975824, 0.984303, 0.989411, 0.989417, 0.994662, 0.990107, 0.984882, 0.982617, 0.988650},
                                                  {0.963421, 0.970990, 0.960195, 0.963646, 0.986169, 0.986354, 0.970566, 0.965891, 0.961904, 0.968644}},
                                                 {{0.937576, 0.949408, 0.949113, 0.955406, 0.962587, 0.970739, 0.955565, 0.947633, 0.954059, 0.944580},
                                                  {0.960529, 0.971739, 0.965938, 0.979516, 0.983046, 0.974732, 0.969144, 0.970005, 0.974908, 0.972821},
                                                  {0.946248, 0.962053, 0.966160, 0.960721, 0.974704, 0.973755, 0.963818, 0.958790, 0.953615, 0.948560},
                                                  {0.957507, 0.964214, 0.963334, 0.961635, 0.975936, 0.976777, 0.958004, 0.957623, 0.962460, 0.952780},
                                                  {0.948005, 0.957995, 0.957197, 0.961639, 0.971634, 0.971314, 0.958939, 0.961798, 0.958416, 0.948054},
                                                  {0.957609, 0.963067, 0.970192, 0.967083, 0.975654, 0.980060, 0.967972, 0.968129, 0.965843, 0.957149},
                                                  {0.963501, 0.970237, 0.973209, 0.976300, 0.982442, 0.985264, 0.973059, 0.963834, 0.974936, 0.967302},
                                                  {0.973798, 0.976582, 0.974482, 0.978820, 0.992782, 0.987156, 0.982863, 0.972202, 0.976741, 0.967440},
                                                  {0.992132, 0.962873, 0.950878, 0.967962, 0.966588, 0.966005, 0.956438, 0.959983, 0.971193, 0.994131},
                                                  {0.965415, 0.946030, 0.939063, 0.942541, 0.957216, 0.952810, 0.940213, 0.940335, 0.954781, 0.967814},
                                                  {0.978017, 0.960115, 0.954946, 0.965677, 0.967184, 0.975432, 0.963789, 0.952225, 0.965605, 0.988083},
                                                  {0.976492, 0.957255, 0.939101, 0.951534, 0.966672, 0.963021, 0.955522, 0.954688, 0.954251, 0.968197},
                                                  {0.972107, 0.957346, 0.944375, 0.953620, 0.965580, 0.971166, 0.950234, 0.950264, 0.953234, 0.969537},
                                                  {0.967820, 0.949082, 0.934692, 0.942092, 0.955994, 0.959704, 0.948629, 0.941562, 0.946538, 0.961174}},
                                                 {{0.965063, 0.955815, 0.945338, 0.953918, 0.968075, 0.962275, 0.950858, 0.943469, 0.952047, 0.968137},
                                                  {0.974738, 0.965280, 0.950106, 0.960218, 0.974965, 0.968496, 0.959023, 0.949133, 0.967977, 0.976028},
                                                  {0.974354, 0.965097, 0.953169, 0.960403, 0.976732, 0.974747, 0.956992, 0.954248, 0.960968, 0.977777},
                                                  {0.957127, 0.959724, 0.960752, 0.969686, 0.979934, 0.979209, 0.974095, 0.960730, 0.955380, 0.950403},
                                                  {0.941940, 0.946165, 0.949830, 0.959670, 0.969535, 0.962742, 0.951064, 0.947243, 0.950732, 0.940445},
                                                  {0.957290, 0.969163, 0.968768, 0.966286, 0.979015, 0.982075, 0.975414, 0.963597, 0.966266, 0.949253},
                                                  {0.948148, 0.955387, 0.957623, 0.964878, 0.977803, 0.978032, 0.960021, 0.951921, 0.949535, 0.950797},
                                                  {0.948254, 0.954426, 0.954768, 0.964550, 0.978595, 0.976213, 0.965804, 0.956872, 0.950025, 0.943376},
                                                  {0.940955, 0.950058, 0.948533, 0.960439, 0.976410, 0.977838, 0.956174, 0.949403, 0.947464, 0.941210},
                                                  {0.948597, 0.957583, 0.957761, 0.963841, 0.978057, 0.981526, 0.961467, 0.957409, 0.955373, 0.954345},
                                                  {0.954372, 0.959420, 0.966070, 0.967914, 0.988355, 0.988451, 0.968802, 0.964126, 0.961363, 0.955645},
                                                  {0.958391, 0.969424, 0.963932, 0.973908, 0.990045, 0.989665, 0.972433, 0.969072, 0.965164, 0.963696},
                                                  {1.002275, 0.985790, 0.993525, 0.987775, 0.989497, 0.979542, 0.979935, 0.984807, 0.991838, 0.997748},
                                                  {0.978716, 0.975198, 0.975173, 0.971553, 0.974764, 0.975527, 0.969461, 0.967980, 0.975674, 0.979790}},
                                                 {{1.010295, 0.992924, 0.983127, 0.986273, 0.998351, 0.998762, 0.989246, 0.983001, 0.988835, 1.001471},
                                                  {0.994998, 0.984384, 0.983420, 0.976744, 0.988566, 0.980415, 0.983054, 0.986158, 0.980415, 0.988612},
                                                  {0.991854, 0.985202, 0.984154, 0.977439, 0.988945, 0.994148, 0.981374, 0.986784, 0.988974, 0.988853},
                                                  {0.985933, 0.979841, 0.981008, 0.974673, 0.983222, 0.986142, 0.977482, 0.980407, 0.984856, 0.980425},
                                                  {0.992117, 0.988471, 0.985143, 0.987007, 0.994226, 0.988271, 0.985183, 0.988913, 0.987579, 0.992435},
                                                  {0.996508, 0.996620, 0.991213, 0.991230, 0.998600, 0.997397, 0.991775, 0.994685, 0.998701, 0.994924},
                                                  {1.002173, 1.000654, 0.992838, 0.993036, 1.001705, 1.000349, 0.996279, 0.997997, 0.997944, 1.002608},
                                                  {0.971703, 0.976187, 0.975548, 0.961522, 0.970183, 0.976382, 0.972560, 0.972009, 0.966667, 0.974335},
                                                  {0.959140, 0.961173, 0.962308, 0.954849, 0.962105, 0.965280, 0.946546, 0.956602, 0.965729, 0.956974},
                                                  {0.978319, 0.980547, 0.976972, 0.971523, 0.978075, 0.975243, 0.971184, 0.986180, 0.977376, 0.978350},
                                                  {0.972348, 0.967062, 0.967410, 0.957794, 0.963300, 0.966370, 0.966308, 0.961225, 0.969713, 0.969802},
                                                  {0.973064, 0.968215, 0.966828, 0.967175, 0.966601, 0.970560, 0.965161, 0.964711, 0.966538, 0.967805},
                                                  {0.963985, 0.963754, 0.960334, 0.957719, 0.959939, 0.961250, 0.957166, 0.958455, 0.960035, 0.963928},
                                                  {0.973906, 0.971582, 0.970162, 0.969065, 0.963635, 0.969858, 0.968600, 0.966472, 0.970479, 0.969119}},
                                                 {{0.978115, 0.979319, 0.978517, 0.964508, 0.982157, 0.973462, 0.971596, 0.970964, 0.977299, 0.979142},
                                                  {0.982168, 0.978165, 0.979045, 0.975750, 0.981290, 0.979196, 0.977285, 0.977052, 0.976181, 0.983509},
                                                  {0.999501, 0.986244, 0.966006, 0.972868, 0.964730, 0.970757, 0.964586, 0.986828, 0.988372, 0.991371},
                                                  {0.975780, 0.981654, 0.968670, 0.956967, 0.945120, 0.944027, 0.956722, 0.970509, 0.977007, 0.980308},
                                                  {0.997854, 0.988500, 0.982598, 0.971762, 0.970024, 0.963940, 0.972727, 0.982825, 0.995445, 0.996396},
                                                  {0.982894, 0.977202, 0.984823, 0.965939, 0.959081, 0.957140, 0.958806, 0.981561, 0.984644, 0.991365},
                                                  {0.988272, 0.980320, 0.982504, 0.966419, 0.956716, 0.952806, 0.956645, 0.979140, 0.983550, 0.987359},
                                                  {0.984472, 0.981906, 0.970796, 0.960960, 0.959781, 0.949036, 0.961987, 0.966278, 0.978329, 0.981142},
                                                  {0.993944, 0.988585, 0.981678, 0.964449, 0.960102, 0.954641, 0.966215, 0.984216, 0.989997, 0.987527},
                                                  {0.996309, 0.992136, 0.988203, 0.967115, 0.962972, 0.966859, 0.970658, 0.988722, 0.992941, 0.998167},
                                                  {0.998636, 0.992053, 0.987791, 0.974728, 0.972270, 0.969267, 0.974982, 0.990016, 0.991115, 0.996924},
                                                  {0.960242, 0.958332, 0.968163, 0.992047, 1.001768, 1.011699, 1.005732, 0.968962, 0.964778, 0.958590},
                                                  {0.953300, 0.946130, 0.959622, 0.967999, 0.998866, 0.996621, 0.970968, 0.951167, 0.943338, 0.949814},
                                                  {0.966235, 0.957428, 0.983276, 0.991277, 1.013175, 1.016264, 0.991585, 0.979130, 0.963140, 0.969223}},
                                                 {{0.953678, 0.951475, 0.963651, 0.990054, 0.999855, 0.998900, 0.983623, 0.967934, 0.951942, 0.963130},
                                                  {0.955803, 0.947225, 0.963265, 0.986440, 1.002444, 1.002560, 0.990796, 0.964730, 0.948967, 0.958645},
                                                  {0.949664, 0.945869, 0.961410, 0.983641, 0.997917, 0.998023, 0.983226, 0.959595, 0.948493, 0.958614},
                                                  {0.960044, 0.950530, 0.970919, 0.990183, 1.003816, 1.010862, 0.987544, 0.968453, 0.953657, 0.956604},
                                                  {0.963708, 0.960847, 0.972147, 0.995999, 1.010153, 1.008237, 0.990143, 0.976320, 0.953952, 0.969222},
                                                  {0.966119, 0.959817, 0.978190, 0.995079, 1.015006, 1.013512, 0.995594, 0.978681, 0.965060, 0.964036},
                                                  {0.973050, 0.977859, 0.968819, 0.981864, 0.974179, 0.978979, 0.969156, 0.979242, 0.981921, 0.985334},
                                                  {0.967681, 0.975323, 0.962701, 0.968127, 0.963024, 0.963978, 0.958274, 0.969547, 0.967734, 0.979300},
                                                  {0.985644, 0.982832, 0.990096, 0.987167, 0.980416, 0.977769, 0.988741, 0.988764, 0.982561, 0.990135},
                                                  {0.980184, 0.969068, 0.975196, 0.981261, 0.972184, 0.966301, 0.976857, 0.967798, 0.977870, 0.978258},
                                                  {0.981287, 0.974869, 0.973872, 0.973759, 0.971592, 0.973505, 0.974961, 0.977296, 0.975167, 0.984383},
                                                  {0.971330, 0.974937, 0.975007, 0.971181, 0.966883, 0.971086, 0.971272, 0.971633, 0.961773, 0.975139},
                                                  {0.983957, 0.979249, 0.982160, 0.979946, 0.975033, 0.974819, 0.977597, 0.977616, 0.983742, 0.980294},
                                                  {0.982091, 0.984499, 0.983329, 0.983506, 0.986737, 0.984932, 0.986477, 0.985140, 0.982247, 0.988569}},
                                                 {{0.993998, 0.989771, 0.990499, 0.986154, 0.983712, 0.989614, 0.991675, 0.990220, 0.982201, 0.989718},
                                                  {0.989075, 0.979595, 0.976790, 0.980673, 0.988136, 0.985436, 0.987295, 0.971764, 0.972503, 0.989710},
                                                  {0.971272, 0.964340, 0.957368, 0.972863, 0.969905, 0.972551, 0.971149, 0.964898, 0.959602, 0.960750},
                                                  {0.985917, 0.979691, 0.984085, 0.982315, 0.987990, 1.000401, 0.978487, 0.980460, 0.990264, 0.987199},
                                                  {0.973262, 0.975752, 0.975747, 0.974237, 0.973043, 0.969977, 0.969035, 0.974196, 0.969724, 0.971151},
                                                  {0.979214, 0.969972, 0.968132, 0.974341, 0.978725, 0.980732, 0.975434, 0.973621, 0.970806, 0.978222},
                                                  {0.974842, 0.965659, 0.969649, 0.970572, 0.969191, 0.972354, 0.972255, 0.969069, 0.968267, 0.972863},
                                                  {0.974614, 0.978199, 0.978531, 0.977917, 0.986659, 0.986439, 0.980578, 0.972340, 0.976278, 0.976793},
                                                  {0.987776, 0.985304, 0.976322, 0.981658, 0.985996, 0.991745, 0.977871, 0.978689, 0.983161, 0.984636},
                                                  {0.986958, 0.984210, 0.985922, 0.989157, 0.985325, 0.989008, 0.981436, 0.985788, 0.985472, 0.993851},
                                                  {0.982413, 0.976475, 0.978547, 0.978291, 1.003755, 0.990870, 0.989129, 0.983127, 0.965466, 0.987450},
                                                  {0.973016, 0.968691, 0.964591, 0.974778, 0.978854, 0.983139, 0.968530, 0.969604, 0.965602, 0.974031},
                                                  {0.978186, 0.982135, 0.971465, 0.983862, 0.991831, 0.993179, 0.977745, 0.975422, 0.974784, 0.981339},
                                                  {0.980470, 0.967945, 0.974139, 0.972784, 0.983858, 0.989043, 0.973917, 0.969570, 0.971207, 0.972838}},
                                                 {{0.974799, 0.971052, 0.970402, 0.969784, 0.978018, 0.982169, 0.972713, 0.968315, 0.973418, 0.974784},
                                                  {0.974402, 0.967338, 0.963597, 0.965834, 0.978113, 0.987368, 0.968229, 0.965908, 0.961429, 0.964835},
                                                  {0.977346, 0.970615, 0.974778, 0.973799, 0.993530, 0.992063, 0.974863, 0.972661, 0.967866, 0.978919},
                                                  {0.985430, 0.975686, 0.977039, 0.982784, 0.995123, 0.990467, 0.979460, 0.980029, 0.972626, 0.984890},
                                                  {0.983054, 0.977542, 0.984197, 0.985679, 1.000461, 0.989672, 0.988743, 0.981659, 0.990490, 0.983582},
                                                  {0.986615, 0.974653, 0.976080, 0.981498, 0.994411, 0.984250, 0.983646, 0.984886, 0.976303, 0.991399},
                                                  {0.974997, 0.968501, 0.971097, 0.964193, 0.975314, 0.973851, 0.969389, 0.970512, 0.964474, 0.974974},
                                                  {0.998279, 0.984753, 0.975649, 0.977718, 0.990385, 0.985837, 0.986336, 0.979141, 0.982271, 0.987351},
                                                  {0.985020, 0.969218, 0.965333, 0.974281, 0.975664, 0.983668, 0.973466, 0.971667, 0.968927, 0.985523},
                                                  {0.981999, 0.974998, 0.972666, 0.970580, 0.979646, 0.984888, 0.973583, 0.972281, 0.973222, 0.987101},
                                                  {0.980454, 0.968100, 0.968836, 0.970009, 0.969907, 0.974719, 0.969596, 0.967797, 0.970808, 0.980240},
                                                  {0.992500, 0.973402, 0.973235, 0.977344, 0.986189, 0.981931, 0.977709, 0.974036, 0.973800, 0.986646},
                                                  {0.992613, 0.978312, 0.983500, 0.978755, 0.982017, 0.989816, 0.983838, 0.977753, 0.973448, 0.992851},
                                                  {0.994622, 0.985783, 0.983676, 0.984613, 0.991667, 0.994437, 0.984984, 0.985288, 0.989188, 0.990580}}

};
float bin_centering_corr_alpha_pim[9][14][10] = {{{0.943451, 0.938824, 0.959278, 0.974806, 0.983874, 0.983696, 0.978613, 0.953709, 0.935047, 0.947200},
                                                  {0.932988, 0.917744, 0.933240, 0.958773, 0.973876, 0.967096, 0.952326, 0.942213, 0.920666, 0.934495},
                                                  {0.946797, 0.944819, 0.959150, 0.978428, 0.979921, 0.989198, 0.973867, 0.957644, 0.940791, 0.951427},
                                                  {0.938355, 0.931306, 0.945855, 0.959739, 0.968906, 0.969210, 0.959344, 0.948280, 0.930026, 0.940934},
                                                  {0.933807, 0.937126, 0.942560, 0.957307, 0.971380, 0.966547, 0.962109, 0.943428, 0.929663, 0.935943},
                                                  {0.933444, 0.930059, 0.942785, 0.955462, 0.962100, 0.959941, 0.952860, 0.935230, 0.931583, 0.936273},
                                                  {0.943416, 0.940872, 0.944166, 0.963831, 0.968514, 0.965833, 0.961777, 0.949013, 0.942108, 0.946348},
                                                  {0.964367, 0.954923, 0.963139, 0.975885, 0.980769, 0.977115, 0.973999, 0.962069, 0.956548, 0.961406},
                                                  {0.952755, 0.942552, 0.941767, 0.972459, 0.992932, 0.995981, 0.958528, 0.939124, 0.939576, 0.947535},
                                                  {0.971196, 0.972519, 0.959550, 0.946967, 0.956069, 0.956828, 0.959268, 0.965753, 0.970343, 0.969109},
                                                  {0.943193, 0.955065, 0.947393, 0.950175, 0.935189, 0.949599, 0.944576, 0.949634, 0.951350, 0.948829},
                                                  {0.961458, 0.973183, 0.954550, 0.965507, 0.956970, 0.951196, 0.958069, 0.972212, 0.971844, 0.971879},
                                                  {0.956656, 0.957998, 0.954484, 0.954373, 0.949580, 0.947453, 0.948278, 0.959431, 0.956358, 0.957141},
                                                  {0.955003, 0.960388, 0.952676, 0.953758, 0.953545, 0.950713, 0.958064, 0.961789, 0.956377, 0.955144}},
                                                 {{0.958077, 0.956779, 0.956194, 0.954341, 0.945720, 0.947398, 0.945211, 0.953991, 0.953657, 0.953231},
                                                  {0.964610, 0.959779, 0.961056, 0.958764, 0.955798, 0.952356, 0.960860, 0.963138, 0.961031, 0.961994},
                                                  {0.973051, 0.969255, 0.966533, 0.961394, 0.966003, 0.961744, 0.966629, 0.969223, 0.971331, 0.969524},
                                                  {0.988737, 0.981406, 0.973787, 0.976403, 0.963760, 0.970402, 0.973206, 0.972066, 0.981675, 0.982711},
                                                  {0.961622, 0.979716, 0.971685, 0.968652, 0.973231, 0.983718, 0.985518, 0.972748, 0.975622, 0.967107},
                                                  {0.956910, 0.962083, 0.968235, 0.973083, 0.972203, 0.966097, 0.968673, 0.961322, 0.955545, 0.957426},
                                                  {0.962658, 0.982417, 0.976643, 0.985705, 0.982206, 0.985002, 0.985649, 0.972777, 0.983397, 0.970225},
                                                  {0.965163, 0.967406, 0.970382, 0.969882, 0.973747, 0.977541, 0.977312, 0.971709, 0.969734, 0.963188},
                                                  {0.966158, 0.967218, 0.968916, 0.976529, 0.971780, 0.974054, 0.971183, 0.975820, 0.971228, 0.968796},
                                                  {0.958672, 0.960327, 0.963994, 0.966815, 0.967933, 0.969885, 0.966881, 0.967956, 0.963179, 0.958479},
                                                  {0.967848, 0.971324, 0.974942, 0.981834, 0.977151, 0.979553, 0.972889, 0.978700, 0.973124, 0.971635},
                                                  {0.970761, 0.982064, 0.980226, 0.981897, 0.987593, 0.983334, 0.979104, 0.981821, 0.980055, 0.972564},
                                                  {0.982569, 0.988710, 0.993125, 0.986562, 0.989136, 0.987508, 0.984866, 0.986332, 0.983621, 0.981800},
                                                  {0.980153, 0.971828, 0.967632, 0.959811, 0.961348, 0.955355, 0.960243, 0.963183, 0.974346, 0.979236}},
                                                 {{0.966809, 0.960160, 0.945339, 0.942011, 0.954890, 0.945939, 0.942421, 0.945673, 0.965123, 0.968194},
                                                  {0.983416, 0.975653, 0.973916, 0.972046, 0.967191, 0.966190, 0.964693, 0.971948, 0.982858, 0.981561},
                                                  {0.975278, 0.963101, 0.958479, 0.956791, 0.950087, 0.958095, 0.954732, 0.962500, 0.962164, 0.972669},
                                                  {0.976799, 0.962786, 0.962620, 0.960969, 0.955028, 0.963246, 0.962987, 0.957364, 0.970497, 0.974943},
                                                  {0.968662, 0.969050, 0.961479, 0.950102, 0.959814, 0.957700, 0.955549, 0.961761, 0.964245, 0.971091},
                                                  {0.978854, 0.972498, 0.968168, 0.972340, 0.964734, 0.962163, 0.960874, 0.964661, 0.970333, 0.978211},
                                                  {0.984835, 0.973895, 0.973364, 0.971417, 0.971199, 0.972303, 0.971841, 0.968822, 0.976832, 0.981906},
                                                  {0.984374, 0.981479, 0.974154, 0.980157, 0.973803, 0.980014, 0.975891, 0.973710, 0.979288, 0.985232},
                                                  {0.972508, 0.964456, 0.975102, 0.971124, 0.970287, 0.968946, 0.963670, 0.967758, 0.976167, 0.977407},
                                                  {0.956091, 0.952476, 0.945316, 0.955795, 0.946139, 0.951697, 0.954884, 0.946533, 0.950306, 0.949381},
                                                  {0.970998, 0.964085, 0.964994, 0.971941, 0.973052, 0.970079, 0.978597, 0.963099, 0.962682, 0.961701},
                                                  {0.963590, 0.953110, 0.956578, 0.961267, 0.962801, 0.962583, 0.958720, 0.957206, 0.951104, 0.962758},
                                                  {0.954095, 0.956644, 0.953310, 0.956999, 0.958340, 0.963906, 0.956655, 0.952172, 0.960453, 0.958679},
                                                  {0.954356, 0.950786, 0.948629, 0.952436, 0.955388, 0.950650, 0.946193, 0.946945, 0.951519, 0.954905}},
                                                 {{0.963223, 0.954853, 0.951727, 0.955160, 0.957995, 0.961810, 0.962998, 0.959196, 0.960906, 0.958922},
                                                  {0.966944, 0.964603, 0.958047, 0.966025, 0.961149, 0.963214, 0.961094, 0.958710, 0.965978, 0.973430},
                                                  {0.965665, 0.969000, 0.961041, 0.965312, 0.966040, 0.969396, 0.963329, 0.965846, 0.967730, 0.961303},
                                                  {0.955806, 0.966826, 0.973175, 0.966069, 0.967040, 0.974778, 0.970725, 0.971416, 0.960920, 0.963855},
                                                  {0.938606, 0.958454, 0.959220, 0.960033, 0.951655, 0.959376, 0.960356, 0.957211, 0.953406, 0.950904},
                                                  {0.968181, 0.960940, 0.973824, 0.980239, 0.968774, 0.966790, 0.966491, 0.978025, 0.976386, 0.965334},
                                                  {0.959622, 0.958718, 0.957312, 0.963385, 0.965346, 0.963806, 0.960904, 0.963025, 0.959614, 0.956497},
                                                  {0.953461, 0.957360, 0.966591, 0.962894, 0.967461, 0.965186, 0.963173, 0.962964, 0.963873, 0.960229},
                                                  {0.950720, 0.954676, 0.958943, 0.958305, 0.960437, 0.964610, 0.956936, 0.956597, 0.956743, 0.949830},
                                                  {0.965748, 0.959268, 0.968137, 0.964361, 0.965741, 0.967084, 0.964175, 0.971883, 0.961220, 0.950862},
                                                  {0.964045, 0.968093, 0.970915, 0.964971, 0.972293, 0.971172, 0.972991, 0.972616, 0.966657, 0.959240},
                                                  {0.972194, 0.973641, 0.973680, 0.976226, 0.974643, 0.977359, 0.973325, 0.971183, 0.969242, 0.967084},
                                                  {0.988377, 0.978684, 0.988113, 0.995136, 0.990446, 0.992672, 0.991126, 0.989173, 0.993004, 0.990892},
                                                  {0.974202, 0.974188, 0.971090, 0.968250, 0.983226, 0.973091, 0.980251, 0.965656, 0.975160, 0.976266}},
                                                 {{1.003147, 0.991031, 0.989389, 0.990141, 0.995653, 1.001226, 0.989144, 0.988591, 0.993386, 0.994777},
                                                  {0.992915, 0.980446, 0.988472, 0.984300, 0.983594, 0.988045, 0.986581, 0.988597, 0.980940, 0.986603},
                                                  {0.985183, 0.983270, 0.980492, 0.985789, 0.992752, 0.988808, 0.986938, 0.986550, 0.981057, 0.986417},
                                                  {0.983924, 0.980066, 0.977898, 0.979823, 0.981634, 0.979581, 0.980948, 0.977718, 0.981635, 0.982363},
                                                  {0.988702, 0.985128, 0.986556, 0.990882, 0.989200, 0.991030, 0.991848, 0.989999, 0.989256, 0.989555},
                                                  {0.993620, 0.991750, 0.996342, 0.992332, 0.993312, 0.995708, 0.997885, 0.989951, 0.989908, 0.997218},
                                                  {0.998317, 1.001710, 0.996666, 0.997788, 1.000946, 0.999684, 1.004509, 0.994997, 0.996825, 0.992347},
                                                  {0.972903, 0.972628, 0.969699, 0.977094, 0.982704, 0.978652, 0.970744, 0.974390, 0.969709, 0.970014},
                                                  {0.955002, 0.954945, 0.958536, 0.959584, 0.956183, 0.963051, 0.957681, 0.960659, 0.960111, 0.952488},
                                                  {0.979484, 0.977554, 0.980968, 0.978395, 0.964419, 0.980042, 0.972616, 0.983197, 0.977427, 0.969833},
                                                  {0.959881, 0.967463, 0.965990, 0.967800, 0.965484, 0.971726, 0.967606, 0.965917, 0.969007, 0.958562},
                                                  {0.964199, 0.965925, 0.969767, 0.969512, 0.970677, 0.967727, 0.970721, 0.965847, 0.967445, 0.963953},
                                                  {0.954305, 0.959435, 0.961695, 0.958395, 0.961813, 0.965132, 0.962560, 0.964221, 0.956712, 0.958800},
                                                  {0.962789, 0.967477, 0.967379, 0.971017, 0.968827, 0.973504, 0.971774, 0.972027, 0.968958, 0.964664}},
                                                 {{0.971254, 0.970037, 0.975912, 0.977246, 0.974844, 0.979501, 0.977192, 0.972875, 0.971731, 0.976630},
                                                  {0.978029, 0.977983, 0.977196, 0.977407, 0.983266, 0.979817, 0.981867, 0.984713, 0.975281, 0.972100},
                                                  {1.004560, 0.986864, 0.978175, 0.964318, 0.965000, 0.967246, 0.961457, 0.975892, 0.994278, 1.000339},
                                                  {0.980989, 0.971844, 0.967369, 0.957656, 0.945530, 0.948565, 0.958007, 0.963979, 0.972144, 0.983913},
                                                  {0.991812, 0.993794, 0.981301, 0.973644, 0.970702, 0.962240, 0.973683, 0.973813, 0.998307, 0.999552},
                                                  {0.986369, 0.985298, 0.975114, 0.965295, 0.959686, 0.958740, 0.961288, 0.971125, 0.982934, 0.994241},
                                                  {0.983849, 0.981627, 0.971791, 0.963523, 0.955582, 0.958180, 0.965715, 0.971959, 0.987480, 0.991147},
                                                  {0.985209, 0.975489, 0.968559, 0.960152, 0.957996, 0.954037, 0.961994, 0.972795, 0.977165, 0.985142},
                                                  {0.990628, 0.985744, 0.982826, 0.964381, 0.956067, 0.960573, 0.968715, 0.977005, 0.987488, 0.992082},
                                                  {0.999389, 0.985470, 0.977924, 0.972503, 0.968621, 0.963730, 0.966873, 0.982049, 0.993424, 0.996064},
                                                  {0.998563, 0.986960, 0.983105, 0.976511, 0.969318, 0.965669, 0.976575, 0.983741, 0.993666, 1.003068},
                                                  {0.969466, 0.963567, 0.984667, 0.988232, 1.008729, 0.992021, 0.989100, 0.979530, 0.963698, 0.961454},
                                                  {0.950685, 0.940608, 0.974437, 0.965533, 0.982812, 0.986015, 0.969426, 0.964846, 0.956992, 0.955223},
                                                  {0.954416, 0.975190, 0.981175, 0.998560, 0.988368, 0.988011, 0.995189, 0.984330, 0.976388, 0.967537}},
                                                 {{0.966060, 0.960930, 0.964631, 0.980784, 0.986608, 0.989123, 0.978958, 0.971608, 0.957926, 0.952123},
                                                  {0.951284, 0.960869, 0.968774, 0.983823, 0.985655, 0.987614, 0.985199, 0.966989, 0.960016, 0.953025},
                                                  {0.948132, 0.956400, 0.963746, 0.981534, 0.984665, 0.981809, 0.979588, 0.965128, 0.953586, 0.950939},
                                                  {0.956469, 0.956983, 0.975932, 0.982577, 0.992399, 0.991773, 0.984490, 0.973610, 0.962729, 0.952282},
                                                  {0.960260, 0.966734, 0.978241, 0.991121, 0.990236, 0.992606, 0.989066, 0.971320, 0.963667, 0.967836},
                                                  {0.963082, 0.966411, 0.977251, 0.995477, 0.996354, 1.001042, 0.992130, 0.979030, 0.971930, 0.965620},
                                                  {0.990066, 0.982249, 0.984559, 0.968567, 0.972851, 0.968172, 0.971048, 0.979306, 0.981732, 0.976710},
                                                  {0.980896, 0.978953, 0.969279, 0.962309, 0.967205, 0.958611, 0.963257, 0.978788, 0.971744, 0.971878},
                                                  {0.983685, 0.988745, 0.985329, 0.979904, 0.976616, 0.979069, 0.979569, 0.989083, 0.984803, 0.987039},
                                                  {0.979371, 0.980253, 0.974481, 0.970620, 0.961046, 0.969666, 0.969873, 0.976703, 0.976885, 0.979838},
                                                  {0.988472, 0.978785, 0.974629, 0.973907, 0.966378, 0.967233, 0.972535, 0.975361, 0.982780, 0.984029},
                                                  {0.980846, 0.977954, 0.972711, 0.965845, 0.964717, 0.961573, 0.969039, 0.972490, 0.977545, 0.979243},
                                                  {0.982683, 0.987308, 0.978129, 0.972785, 0.970859, 0.975010, 0.976096, 0.978811, 0.988458, 0.985249},
                                                  {0.988061, 0.988582, 0.988571, 0.980277, 0.978697, 0.980944, 0.980483, 0.981491, 0.990779, 0.986903}},
                                                 {{0.998754, 0.991207, 0.991861, 0.984530, 0.980720, 0.979842, 0.985396, 0.990529, 0.995306, 0.991507},
                                                  {0.982055, 0.980218, 0.970002, 0.984166, 0.973413, 0.988694, 0.983696, 0.971029, 0.979333, 0.983873},
                                                  {0.965120, 0.965830, 0.961787, 0.970545, 0.972318, 0.969444, 0.971458, 0.961072, 0.966624, 0.962061},
                                                  {0.978100, 0.979213, 0.983560, 0.979689, 0.988693, 0.988253, 0.985341, 0.980220, 0.986846, 0.985843},
                                                  {0.974391, 0.966289, 0.967922, 0.968372, 0.974007, 0.976498, 0.978980, 0.974730, 0.967570, 0.968220},
                                                  {0.971921, 0.972342, 0.974953, 0.974965, 0.978847, 0.977780, 0.966296, 0.965241, 0.972694, 0.974048},
                                                  {0.962470, 0.962518, 0.970051, 0.978333, 0.975299, 0.972993, 0.969588, 0.966507, 0.961772, 0.967892},
                                                  {0.969485, 0.974641, 0.972457, 0.982235, 0.983280, 0.982163, 0.976345, 0.977711, 0.973152, 0.972467},
                                                  {0.982062, 0.980745, 0.978052, 0.984516, 0.989443, 0.982062, 0.983654, 0.973990, 0.981523, 0.976806},
                                                  {0.985946, 0.984444, 0.981749, 0.990594, 0.988806, 0.986489, 0.983581, 0.987181, 0.980679, 0.987020},
                                                  {0.971370, 0.981738, 0.984343, 0.982275, 0.982361, 0.987884, 0.973146, 0.983924, 0.983395, 0.988498},
                                                  {0.974716, 0.966489, 0.972544, 0.969177, 0.973106, 0.971706, 0.976026, 0.959852, 0.972227, 0.972784},
                                                  {0.982129, 0.983143, 0.978561, 0.975884, 0.980233, 0.976526, 0.982370, 0.990157, 0.979569, 0.990403},
                                                  {0.974101, 0.968134, 0.969291, 0.978012, 0.974557, 0.966915, 0.968256, 0.967752, 0.969493, 0.974163}},
                                                 {{0.974741, 0.973541, 0.970365, 0.972321, 0.971600, 0.973097, 0.974438, 0.967716, 0.974716, 0.980191},
                                                  {0.978688, 0.959473, 0.972377, 0.969296, 0.966570, 0.970070, 0.971855, 0.964090, 0.965773, 0.972455},
                                                  {0.982759, 0.977351, 0.975821, 0.977117, 0.977097, 0.980594, 0.973526, 0.972085, 0.979594, 0.988268},
                                                  {0.982636, 0.980207, 0.980323, 0.978861, 0.983807, 0.981408, 0.980573, 0.978523, 0.982580, 0.986706},
                                                  {0.992976, 0.984096, 0.984573, 0.984199, 0.987602, 0.987840, 0.985698, 0.983295, 0.985330, 0.987270},
                                                  {0.973857, 0.972890, 0.972933, 0.984080, 1.002901, 0.978072, 0.984479, 0.984963, 0.968438, 0.974316},
                                                  {0.947920, 0.954783, 0.966121, 0.971178, 0.977727, 0.982148, 0.976239, 0.958900, 0.963668, 0.956023},
                                                  {0.972061, 0.970394, 0.979318, 0.989824, 0.988924, 0.987735, 0.983325, 0.986208, 0.976653, 0.975305},
                                                  {0.966797, 0.964103, 0.971459, 0.978902, 0.984170, 0.982695, 0.973322, 0.966004, 0.967085, 0.960244},
                                                  {0.968763, 0.969632, 0.970180, 0.981160, 0.975667, 0.985659, 0.977701, 0.974775, 0.966215, 0.962258},
                                                  {0.958081, 0.966992, 0.971375, 0.968004, 0.981135, 0.974379, 0.974555, 0.962092, 0.963696, 0.956008},
                                                  {0.966554, 0.973888, 0.973521, 0.977835, 0.980371, 0.983954, 0.976422, 0.974515, 0.974009, 0.970797},
                                                  {0.974141, 0.972076, 0.973647, 0.985496, 0.996948, 0.985569, 0.991872, 0.973924, 0.969557, 0.967260},
                                                  {0.975731, 0.975386, 0.986289, 0.987453, 0.996044, 0.995532, 0.987923, 0.988449, 0.974837, 0.974211}}};

THnSparseD *h_exp_prot[W_bins_no];
THnSparseD *h_exp_prot_background[W_bins_no];
THnSparseD *h_simu_prot_background[W_bins_no];
THnSparseD *h_empty_prot[W_bins_no];
THnSparseD *h_th_prot[W_bins_no];
THnSparseD *h_simu_prot[W_bins_no];
THnSparseD *acceptance_7D_hist_prot[W_bins_no];
THnSparseD *acceptance_corrected_7D_prot[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_prot[W_bins_no];
THnSparseD *hole_yield_simulation_prot[W_bins_no];
THnSparseD *hole_yield_exp_prot[W_bins_no];
THnSparseD *total_yield_exp_prot[W_bins_no];
THnSparseD *h_th_prot_sig2[W_bins_no];
THnSparseD *h_rec_prot_sig2[W_bins_no];
THnSparseD *h_th_prot_evt[W_bins_no]; // same as the h_rec_prot_sig2 just weight is 1 here
THnSparseD *h_rec_prot_evt[W_bins_no];

THnSparseD *h_exp_pip[W_bins_no];
THnSparseD *h_exp_pip_background[W_bins_no];
THnSparseD *h_simu_pip_background[W_bins_no];
THnSparseD *h_empty_pip[W_bins_no];
THnSparseD *h_th_pip[W_bins_no];
THnSparseD *h_simu_pip[W_bins_no];
THnSparseD *acceptance_7D_hist_pip[W_bins_no];
THnSparseD *acceptance_corrected_7D_pip[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_pip[W_bins_no];
THnSparseD *hole_yield_simulation_pip[W_bins_no];
THnSparseD *hole_yield_exp_pip[W_bins_no];
THnSparseD *total_yield_exp_pip[W_bins_no];
THnSparseD *h_th_pip_sig2[W_bins_no];
THnSparseD *h_rec_pip_sig2[W_bins_no];
THnSparseD *h_th_pip_evt[W_bins_no]; // same as the h_rec_pip_sig2 just weight is 1 here
THnSparseD *h_rec_pip_evt[W_bins_no];

THnSparseD *h_exp_pim[W_bins_no];
THnSparseD *h_exp_pim_background[W_bins_no];
THnSparseD *h_simu_pim_background[W_bins_no];
THnSparseD *h_empty_pim[W_bins_no];
THnSparseD *h_th_pim[W_bins_no];
THnSparseD *h_simu_pim[W_bins_no];
THnSparseD *acceptance_7D_hist_pim[W_bins_no];
THnSparseD *acceptance_corrected_7D_pim[W_bins_no];
THnSparseD *acceptance_corrected_7D_simulation_pim[W_bins_no];
THnSparseD *hole_yield_simulation_pim[W_bins_no];
THnSparseD *hole_yield_exp_pim[W_bins_no];
THnSparseD *total_yield_exp_pim[W_bins_no];
THnSparseD *h_th_pim_sig2[W_bins_no];
THnSparseD *h_rec_pim_sig2[W_bins_no];
THnSparseD *h_th_pim_evt[W_bins_no]; // same as the h_rec_pim_sig2 just weight is 1 here
THnSparseD *h_rec_pim_evt[W_bins_no];

// Int_t pipP_max = 6;
// Int_t pimP_max = 6;
// Int_t pip_pim_max = 6;
// Int_t theta_max = 10;
// Int_t phi_max = 6;
// Int_t alpha_max = 8;

Int_t pipP_max = 15;
Int_t pimP_max = 15;
Int_t pip_pim_max = 15;
Int_t theta_max = 10;
Int_t phi_max = 6;
Int_t alpha_max = 10;

float bin_content_sum_acc_corrected_simu[3];
float bin_content_sum_acc_corrected_exp[3];
float scale_factor[3];
const float E_beam = 10.6041;
float w_bin_size = 0.05;

Float_t eff_threshold = 0;
Float_t rec_threshold = 0.;
Float_t eff_err_threshold = 0.5;

float Acc_fact[15];

float Int[15];

float Int_1[15];
float Int_2[15];
float Int_3[15];

float Int_bc_corr[15];
float Int_1_bc_corr[15];
float Int_2_bc_corr[15];
float Int_3_bc_corr[15];

Double_t Int_err[15];
Double_t Int_err_1[15];
Double_t Int_err_2[15];
Double_t Int_err_3[15];

Double_t Int_err_bc_corr[15];
Double_t Int_err_1_bc_corr[15];
Double_t Int_err_2_bc_corr[15];
Double_t Int_err_3_bc_corr[15];

float Int_acc_corr[15];
float Int_1_acc_corr[15];
float Int_2_acc_corr[15];
float Int_3_acc_corr[15];

Double_t Int_err_acc_corr[15];
Double_t Int_err_1_acc_corr[15];
Double_t Int_err_2_acc_corr[15];
Double_t Int_err_3_acc_corr[15];

float Int_theta[15];
float Int_1_theta[15];
float Int_2_theta[15];
float Int_3_theta[15];

Double_t Int_err_theta[15];
Double_t Int_err_1_theta[15];
Double_t Int_err_2_theta[15];
Double_t Int_err_3_theta[15];

float Int_alpha[15];
float Int_1_alpha[15];
float Int_2_alpha[15];
float Int_3_alpha[15];

Double_t Int_err_alpha[15];
Double_t Int_err_1_alpha[15];
Double_t Int_err_2_alpha[15];
Double_t Int_err_3_alpha[15];

float w_for_int[15];
float estimate1[15];

void suppressWarnings()
{
#ifdef __linux__ // Check if running on a Linux system
    // Redirect stderr to /dev/null
    std::ofstream devnull("/dev/null");
    std::cerr.rdbuf(devnull.rdbuf());
#else
    // On non-Linux systems, you can redirect stderr to a file
    // Change "error.log" to the desired filename
    freopen("error.log", "w", stderr);
#endif
}

TH1F *h_w_int = new TH1F("h_w_int", "h_w_int", 15, 1.4, 2.15);
TH1F *h_w_int_bc_corr = new TH1F("h_w_int_bc_corr", "h_w_int_bc_corr", 15, 1.4, 2.15);

// TH1F *h_w_int_low_th = new TH1F("h_w_int_low_th", "h_w_int_low_th", 10, 1.4, 1.9);
TH1F *h_empty_cell_contribution = new TH1F("h_empty_cell_contribution", "h_empty_cell_contribution", 15, 1.4, 2.15);

TH1F *h_w_int_clas6 = new TH1F("h_w_int_clas6", "h_w_int_clas6", 15, 1.4, 2.15);
TH1F *h_w_int_diff = new TH1F("h_w_int_diff", "h_w_int_diff", 15, 1.4, 2.1);

TH1F *h_w_int_acc_corr = new TH1F("h_w_int_acc_corr", "h_w_int_acc_corr", 15, 1.4, 2.15);
TH1F *h_w_int_theta = new TH1F("h_w_int_theta", "h_w_int_theta", 15, 1.4, 2.15);
TH1F *h_w_int_alpha = new TH1F("h_w_int_alpha", "h_w_int_alpha", 15, 1.4, 2.15);

TH1D *d_eff = new TH1D("d_eff", "d_eff", 200, -0.01, 0.012);
TH1D *eff = new TH1D("eff", "eff", 200, -0.5, 1.2);
TH2D *deff_vs_eff = new TH2D("deff_vs_eff", "deff_vs_eff", 500, -0.5, 0, 500, -0.5, 5.5);
TH1D *eff_threshold_cut = new TH1D("eff_threshold_cut", "eff_threshold_cut", 200, -0.5, 1.5);

TH2D *W_VS_Q2_HOLE_FRACTION = new TH2D("W_VS_Q2_HOLE_FRACTION", "W_VS_Q2_HOLE_FRACTION", 15, 1.4, 2.15, 9, -0.0, 1);
float holes_fraction_exp[9][15];
float holes_in_sim[9][15];
float holes_in_exp[9][15];
float filled_bins_in_sim[9][15];
float filled_bins_in_exp[9][15];
float holes_fraction_sim[9][15];
float total_bins_in_sim[9][15];

int n = 10;
TCanvas *can1 =
    new TCanvas("Nine_differential_Yields", "Nine_diff_Yields", 1950, 1200);
auto name_int = Form("int_cross-section");
auto mg = new TMultiGraph("int_cr_sec", "int_cr_sec");

// The subroutine calculates the virtual photon flux
float flux(float w, float q2_value)
{
    // float w = 1.0 + w_bin * 0.05;
    // float q2 = 1.0 + q2_bin * 1.0;
    // float q2_value = q2_low_values[q2_bin];
    // std::cout << "q2 low in flux function : " << q2_value << std::endl;
    // std::cout << "w low in flux function : " << w << std::endl;

    float omega = (w * w + q2_value - MASS_P * MASS_P) / (2. * MASS_P);
    // std::cout << "omega =  " << omega << std::endl;

    float en_elp = E_beam - omega;
    float th_elp = 2 * asin(sqrt(q2_value / 4. / E_beam / en_elp));
    // std::cout << "theta =  " << th_elp << std::endl;

    float epsilon = 1 / (1. + 2. * (1. + omega * omega / q2_value) * (tan(th_elp / 2.)) * (tan(th_elp / 2.)));

    // std::cout << "epsilon = : " << epsilon << std::endl;

    float flux_calc = (omega - q2_value / 2. / MASS_P) / 137.;

    flux_calc = flux_calc / 2. / (PI) / E_beam / q2_value / (1 - epsilon);
    flux_calc = flux_calc * w / E_beam / MASS_P;
    // std::cout << "flux  =  " << flux_calc << std::endl;
    // std::cout << "pi  =  " << PI << std::endl;

    return flux_calc;
}
// questions
/// corrections like bin centering? ....
/// all topology may sum little differently?
// binning 25 MeV
// mom corrections and background substractions?

void set_all_errors(int no_w_bins); // prototype
void set_eff_errors(int no_w_bins);
void eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins);

struct CrossSectionData
{
    std::vector<double> w_values;
    std::vector<double> cross_sections;
    std::vector<double> errors;
};
CrossSectionData readCrossSections(const std::string &file_path)
{
    CrossSectionData data;
    std::ifstream file(file_path);
    // std::cerr << "Opening file: " << file_path << std::endl;

    if (!file.is_open())
    {
        // std::cerr << "Error opening file: " << file_path << std::endl;
        return data;
    }

    std::string line;
    // Skip the first line if it contains headers
    std::getline(file, line); // assuming the first line has headers
    // std::cout << "Header line: " << line << std::endl;

    while (std::getline(file, line))
    {
        // std::cout << "Processing line: " << line << std::endl;

        std::istringstream stream(line);
        double w_value, cross_section, error;

        // Read the three columns (w_value, cross_section, error)
        if (stream >> w_value >> cross_section >> error)
        {
            // std::cout << "Parsed values - w: " << w_value
            //           << ", cross_section: " << cross_section
            //           << ", error: " << error << std::endl;

            data.w_values.push_back(w_value);
            data.cross_sections.push_back(cross_section);
            data.errors.push_back(error);
        }
        else
        {
            std::cerr << "Error parsing line: " << line << std::endl;
        }
    }

    // std::cerr << "Finished reading file: " << file_path << std::endl;
    return data;
}

/// This is for error estimation  ///////////////////////////////////////////
/// This is for error estimation  ///////////////////////////////////////////
/// This is for error estimation  ///////////////////////////////////////////
/// This is for error estimation  ///////////////////////////////////////////

int main(int argc, char **argv)
{
    suppressWarnings();
    // //exp data 163 runs
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2023/sim_all_data/merged/mPim_topology_all_163_runs_rebinned.root";
    // exp data 130 runs
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2023/sim_all_data/merged/mPim_topology_all_130_runs_rebinned.root";

    //    // //exp data 152 runs, fd+ cd, 2024
    // // std::string inFileName = "/Users/krishnaneupane/Downloads/2023/sim_all_data/merged/resIncl_152_runs_same_as_Incl_analysis_mPim_topology_merged.root";
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/resIncl_152_exp_good_runs_mPim_topo_02_07_2024.root";
    // wider inv mass binning
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/April_2024/resIncl_152_exp_runs_with_wider_inv_mass_bins_04_17_2024.root";

    // // empty target
    // //std::string em_inFileName = "/Users/krishnaneupane/Downloads/2023/sim_all_data/merged/mPim_topology_empty_target_runs_rebinned.root";
    // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/resIncl_3_empty_target_runs_runs_mPim_topo_02_18_2024.root";
    // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/April_2024/resIncl_3_empty_target_runs_runs_mPim_topo_wider_inv_m_bins_04_17_2024.root";

    // // // // background subtraction
    // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/resIncl_152_exp_good_runs_for_background_event_topo_02_07_2024.root";

    // // // mc files,  2023
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2023/sim_all_data/merged/merged_wbin_comb_inv_mass_rebinned_2810_files.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2023/sim_all_data/merged/merged_corect_wt1_rebinned_2810_files.root";

    // // // // // //2810 mc files, 2024
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/final_sim_2810_merged_files_new_mmsq_cuts_feb_13_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/final_sim_2810_merged_files_new_mmsq_cuts_wt_1_feb_14_2024.root";
    // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2024/March_2024/sim_files_for_background_03_07_2024.root";

    // // wider inv mass bins
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/April_2024/rga_pass1_2810_files_for_final_cs_with_wt_and_good_wider_inv_mass_Apr_14_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/April_2024/good_wider_inv_binns_all_2810_files_wt_1_Apr_17_2024.root";

    // /// nerrow w-q2 lim
    // // wider inv mass bins
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/April_2024/rga_pass1_nerrow_w_q2_range_359_files_for_final_cs_with_wt_and_good_wider_inv_mass_Apr_14_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/April_2024/pass1_nerrow_359_files_wt_1_good_wider_inv_binns_Apr_17_2024.root";

    // /// wide + nerrow w-q2 lim
    // // wider inv mass bins
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/April_2024/pass1_all_nerrow_and_wide_w_q2_merged_with_good_wt_3169_files.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/April_2024/pass1_all_nerrow_and_wide_w_q2_merged_with_wt_1_3169_files.root";

    // // // pass2
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/resIncl_pass2_150_good_files_rga_missingPim_topo_02_23_2024.root";
    // // refined cuts and new mom corr
    // // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/resIncl_pass2_150_runs_with_all_refined_cuts_with_mom_corr.root";

    // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/resIncl_pass2_3_empty_target_files_rga_missingPim_topo_02_23_2024.root";
    // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/resIncl_pass2_150_runs_background_subtractions_rga_missingPim_topo_02_23_2024.root";
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/sim_pass2_fd_cd_with_good_wt_feb_24_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Feb_2024/sim_pass2_fd_cd_with_wt_1_feb_24_2024.root";
    // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2024/March_2024/pass2_177_sim_files_for_background_03_07_2024.root";

    // // new data, new range, less data
    // // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/resIncl_pass2_150_runs_with_all_refined_cuts_with_mom_corr_for_cs_measurement.root";
    // // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/resIncl_pass2_3_empty_target_runs_with_all_refined_cuts_with_mom_corr_for_cs_measurement.root";
    // // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/resIncl_pass2_150_runs_background_thnsparse_for_cs_measurement.root";

    // ///// with golden criteria
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/all_151_runs_pass2_all_with_golden_criteria.root";
    // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/Sept_2024/empty_target_3_runs_pass2_with_golden_criteria.root"; //THIS IS USED
    // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/all_151_runs_pass2_golden_for_background_files_cs.root";

    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/pass2_126_golden_runs_for_cs_measurement_.root";
    /// from including one or more protons and pip
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/Aug_2024/resIncl_pass2_all_126_runs_no_ev_pid_allowing_one_or_more_prot_pip.root"; // THIS IS USED
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/Sept_2024/resIncl_pass2_all_126_golden_final_for_cs.root";
    // Nov 2024
    // // std::string background_inFileName = "/Users/krishnaneupane/Downloads/2024/Aug_2024/pass2_bkg_sub_file_for_126_golden_runs_for_cs_measurement_08_01_2024.root";

    // ///  2 TB data in sims
    // // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/pass2_sim_with_refined_cuts_and_eloss_corr_for_cs_measurement_07_15_2024_good_wt.root";
    // // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/July_2024/pass2_sim_with_refined_cuts_and_eloss_corr_for_cs_measurement_07_15_2024_wt_1.root";
    // // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/pass2_sim_background_files_for_cs_measurement_07_15_2024_good_wt.root";
    // //// 5 TB data in sim
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Sept_2024/pass2_sim_1_35_w_2_15_1_95_q2_9_for_cs_measurement_with_smeared_new_mmsq_cuts.root";

    // // for eff hist with wt 1
    // // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Aug_2024/pass2_sim_282_new_1_35_w_2_15_1_95_Q2_9_wt_1_for_cs_measurement.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Sept_2024/pass2_sim_1_35_w_2_15_1_95_q2_9_for_cs_measurement_with_smeared_new_mmsq_cuts_wt_1.root";

    // // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2024/Aug_2024/pass2_sim_bkg_282_new_1_35_w_2_15_1_95_Q2_9_wt_1_for_cs_measurement.root";

    // // // smaller w-q2 range data: with different target radious, gemc 5.4
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/July_2024/pass2_177_sim_files_good_wt_gemc_5_4_for_cross_section_measurement_07_17_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/July_2024/pass2_177_sim_files_wt_1_gemc_5_4_for_cs_measurnment_07_17_2024.root";

    // // // Combined: smaller w-q2 range data: with different target radious, gemc 5.4
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Aug_2024/pass2_sim_merged_good_wt.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Aug_2024/pass2_sim_merged_wt_1.root";

    // // // /// 117 files from 8000 to 8009
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_800_809_117_files_with_good_wt.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_800_809_117_files_wt_1.root";
    // std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/resIncl_EXP_pass2_empty_target_runs_for_cs_nov_2024.root";
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/resIncl_EXP_pass2_126_golden_runs_for_cs.root";

    //////////////////// EXP FILES  ////////////////////////
    std::string em_inFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/resIncl_EXP_pass2_3_empty_target_runs_for_cs_15_INV_mass_bins.root";
    // // std::string inFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/resIncl_EXP_pass2_126_golden_runs_for_cs_15_INV_mass_bins.root";
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/resIncl_EXP_pass2_126_runs_with_eff_corr_try2_facts_with_cdfd_with_EB_ID_with_QADB_cuts.root";
    // //////////////////////////// Syatematics Studies ///////////////////////
    // std::string inFileName = "/Users/krishnaneupane/Downloads/2025/For_systematics/mom_corr/resIncl_EXP_pass2_all_126_runs_FINAL_for_cs_cross_check_for_Systmatics.root";
    // tf electron momentum corr 0.9
    std::string inFileName = "/Users/krishnaneupane/Downloads/2025/For_systematics/mom_corr/resIncl_EXP_pass2_all_126_runs_FINAL_for_cs_cross_check_for_Systmatics_elec_tf_mom_corr_0_9.root";

    // // // /// 140 file 15 inv mass bins
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_8000_8096_with_good_wt_for_140_files_for_cs.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_job_8000_8096_140_files_wt_1.root";

    // // // // // // // /// Alll 741 files from pass2, 15 inv mass bins
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_741_files_good_wt_for_cs_Nov_24_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_741_files_with_wt_1_for_cs.root";
    // // ///////// for eff check
    // // // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_741_files_with_wt_1_for_cs.root";

    // // // // // // // // // /// Alll 741 files from pass2, 15 inv mass bins without BKG SUBTRACTED  MC  //////

    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/pass2_741_files_with_det_ineff_cuts_with_cdfd_cuts_after_twoPi_event_after_mmsq.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_741_files_with_wt_1.root";
    // // ///////////////   BKG SUBTRACTED  MC ////////////
    std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/For_background_subtraction/bkg_files/new/background_subtracted_741_files_rec_mc_thnsparse_hists_new1.root";
    std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2025/For_background_subtraction/bkg_files/new/background_subtracted_741_files_rec_mc_thnsparse_hists_new1_wt1.root";

    std::string background_inFileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/resIncl_EXP_pass2_all_126_bck_sub_file_with_EB_ID_with_QADB_cuts.root";
    // std::string background_mcFileName = "/Users/krishnaneupane/Downloads/2025/For_background_subtraction/bkg_files/new/pass2_final_all_741_files_for_background_subtraction.root";

    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/For_background_subtraction/bkg_files/new/pass2_final_all_741_files_for_background_subtraction.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2025/For_background_subtraction/bkg_files/new/background_subtracted_741_files_rec_mc_thnsparse_hists_new1_wt1.root";

    // // 322 files
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/less_files/pass2_first_322_files_with_det_ineff_cuts_with_cdfd_cuts_after_twoPi_event_after_mmsq.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2025/Used_for_cs/less_files/pass2_first_322_files_with_det_ineff_cuts_with_cdfd_cuts_after_twoPi_event_after_mmsq_wt1.root";

    // // OLd gemc 5.4 pass2 sim, smaller w-q2 range
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_good_wt_pass2_gemc_5_4_q2_3_5_to_8_5_GeV2_170_files.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/out_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_bg_45nA_wt_1_pass2_gemc_5_4_q2_3_5_to_8_5_GeV_170_files.root";

    /////////// COMBINED ///////////
    // std::string mcFileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/Combined_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_911_files_good_wt_for_cs_Nov_24_2024.root";
    // std::string mcWt1FileName = "/Users/krishnaneupane/Downloads/2024/Dec_2024/combined_Pass2_sim_twoPi_rga_fall2018_tor-1_sol-1_flagrad_2_all_911_files_with_wt_1_for_cs.root";

    std::string inputDirectory = "/Users/krishnaneupane/Documents/GitHub/arjuns_cross_sections/merged_rows_modified_1d_arjuns_cs";
    // Define the Q² directories to process
    std::vector<std::string> q2_dirs = {"q2_20_24", "q2_24_30", "q2_30_35", "q2_35_42", "q2_42_50"};
    // Define the W directories to process
    std::vector<std::string> w_dirs = {
        "w_1400_1450", "w_1450_1500", "w_1500_1550", "w_1550_1600",
        "w_1600_1650", "w_1650_1700", "w_1700_1750", "w_1750_1800",
        "w_1800_1850", "w_1850_1900", "w_1900_1950", "w_1950_2000",
        "w_2000_2050", "w_2050_2100"};

    // Cross-section file names to process
    std::vector<std::string> cs_files = {"xsec1d_mpippr.dat", "xsec1d_mpimpr.dat", "xsec1d_mpippim.dat", "xsec1d_theta_pim.dat", "xsec1d_theta_pip.dat", "xsec1d_theta_pr.dat",
                                         "xsec1d_psi_pim.dat", "xsec1d_psi_pip.dat", "xsec1d_psi_pr.dat"};

    gStyle->SetHistMinimumZero();
    TFile *root_data = new TFile(inFileName.c_str());
    TFile *root_data_background = new TFile(background_inFileName.c_str());
    TFile *root_data_empty_target = new TFile(em_inFileName.c_str());
    TFile *root_mcWt1 = new TFile(mcWt1FileName.c_str());
    TFile *root_mc = new TFile(mcFileName.c_str());
    // TFile *root_mc_with_bkg_subtracted = new TFile(mcFileName_bkg_subtracted.c_str());
    // TFile *root_mcWt1_with_bkg_subtracted = new TFile(mcWt1FileName_bkg_subtracted.c_str());

    // TFile *root_mc_background = new TFile(background_mcFileName.c_str());

    // define and set style
    gStyle->SetTitleSize(0.08, "t");
    gStyle->SetOptStat(0);
    gStyle->SetStatColor(0);
    // gStyle->SetPaperSize(18, 24);
    gStyle->SetLabelSize(0.055, "Y");
    gStyle->SetLabelSize(0.055, "X");
    gStyle->SetTitleOffset(0.9, "X"); // Adjust title offset for better spacing
    gStyle->SetTitleOffset(0.9, "Y");
    gStyle->SetTitleSize(0.09, "XY");
    gStyle->SetStatFontSize(0.06);
    gStyle->SetTitleFont(22, "XY");
    gStyle->SetLabelFont(22, "XY");
    gStyle->SetTextFont(22);
    gStyle->SetLabelOffset(0.02, "X"); // Increase X label spacing
    gStyle->SetLabelOffset(0.02, "Y"); // Increase Y label spacing
    gStyle->SetLegendFont(22);
    gStyle->SetLegendTextSize(0.035);
    gStyle->SetMarkerStyle(20);
    gStyle->SetMarkerSize(1.6);
    // gStyle->SetMarkerColor(4);
    gStyle->SetErrorX(0);

    // TFile *fiveD = new TFile("fiveD.root","RECREATE");

    // questions  ......................................................................
    // is arjuns cross-sections are sum of all topology?
    /// corrections like bin centering, bin migration? ....
    /// all topology may sum little differently?
    // binning 25 MeV
    // mom corrections and background substractions?
    // effects of each cuts should be studied
    // fc charge is important used one is from nick's calculation, exact calculation needed for myself
    // radiative correction factors are based on the simulation data on wider range, i have not generated the files withour rad correction..
    // ..in this one q2 bin, is that needed?...
    // for wider w-q2 range how far should we go? arjun has 1.4<w<2.125 GeV, 2<Q2<5GeV2
    // boundary effects, bin to bin event migration
    bool CLAS6 = false;
    for (short q2 = 4; q2 < 5; q2++)
    {
        if (q2 <= 5)
            CLAS6 = true;
        std::string q2_path = inputDirectory + "/" + q2_dirs[q2 - 1];
        std::cout << "Processing Q² directory: " << q2_path << std::endl;

        float q2_lower_lim = q2_low_values[q2];
        float q2_upper_lim = q2_up_values[q2];
        float q2_bin_size = q2_binning_size[q2];
        float q2_mid_value = (q2_low_values[q2] + q2_up_values[q2]) / 2;
        float ff_scale = 1; //(1 / (pow((1 + (q2_mid_value / 0.7)), (0.31660)))) / 0.46044672679; // form factor scale

        std::cout << " q2_bin_size " << q2_bin_size << "   q2 range is " << q2_low_values[q2] << "-" << q2_up_values[q2] << std::endl;
        std::cout << " q2 values for flux " << q2_mid_value << "\n";

        TCanvas *can1 =
            new TCanvas("Nine_differential_Yields", "Nine_diff_Yields", 1900, 1400);

        can1->Divide(3, 3);

        for (short w = 17; w < 18; w++)
        {

            std::string w_path = q2_path + "/" + w_dirs[w - 8];
            std::cout << "  Processing W directory: " << w_path << std::endl;

            const Int_t ndims_5D = 5;
            Int_t bins_5D[ndims_5D] = {15, 15, 10, 6, 10};
            Double_t Bin_size_pPip = ((1.0 + 0.05 * w + 0.025 - MASS_PIM) - (0.938272 + 0.13957)) / 7.0;
            Double_t Bin_size_pipPim = ((1.0 + 0.05 * w + 0.025 - MASS_P) - (0.13957 + 0.13957)) / 7.0;

            // Double_t xmin_5D[ndims_5D] = {((0.938272 + 0.13957) - 2 * Bin_size_pPip), (0.13957 + 0.13957) - 2 * Bin_size_pipPim, 0., 0., 0.};
            // Double_t xmax_5D[ndims_5D] = {((1.0 + 0.05 * w + 0.025 - MASS_PIM) + 2 * Bin_size_pPip), ((1.0 + 0.05 * w + 0.025 - MASS_P) + 2 * Bin_size_pipPim), 180, 360, 360};

            Double_t xmin_5D[ndims_5D] = {((0.938272 + 0.13957) - 4 * Bin_size_pPip), (0.13957 + 0.13957) - 4 * Bin_size_pipPim, 0., 0., 0.};
            Double_t xmax_5D[ndims_5D] = {((1.0 + 0.05 * w + 0.025 - MASS_PIM) + 4 * Bin_size_pPip), ((1.0 + 0.05 * w + 0.025 - MASS_P) + 4 * Bin_size_pipPim), 180, 360, 360};

            // Double_t xmin_5D[5] = {(0.938272 + 0.13957), (0.13957 + 0.13957), 0., 0., 0.};
            // Double_t xmax_5D[5] = {(1.0 + 0.05 * w + 0.025 - MASS_PIM), (1.0 + 0.05 * w + 0.025 - MASS_P), 180, 360, 360};

            // std::cout << "initial value of Int cs : " << w - 8 << " is " << Int[w - 8] << std::endl;

            // if (w == 19 || w == 20)
            // continue;
            float const w_bin_for_flux = 1.0 + w * 0.05 + 0.05 / 2;
            std::cout << " w low " << (1.0 + 0.05 * w) << "\n";
            std::cout << " w bin " << w << "\n";
            std::cout << " w_bin for flux " << w_bin_for_flux << "\n";

            // //done for testing twoQ2 merged case

            auto name = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            auto name_Empty = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            auto name_simu = Form("h_5dim_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            auto name_evt = Form("h_5dim_evt_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            auto output_name = Form("nine_1D_cs_%.1f<=Q2<=%.1f GeV2_%.2f<=W<=%.2f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));
            // auto output_name = Form("nine-1D_cs_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV", (q2_lower_lim), (q2_upper_lim), (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05));

            int no_w_bins = w - 8; ////be careful here ............................

            // From THnsparse Prot
            h_exp_prot[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_prot/%s", name));
            h_exp_prot_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_prot/%s", name));

            h_empty_prot[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_prot/%s", name_Empty));
            h_th_prot[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_prot/%s", name_simu));

            h_simu_prot[no_w_bins] =
                (THnSparseD *)root_mc->Get(Form("THnSparse_7D_prot/%s", name_simu));
            // h_simu_prot_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_prot/%s", name_simu));

            //////////////////////////////////////////////////////////////////////
            // h_simu_prot[no_w_bins]->Add(h_simu_prot_background[no_w_bins], -1.);

            // 2. Acceptance THnSparse: simu_rec/simu_thrown
            acceptance_7D_hist_prot[no_w_bins] =
                (THnSparseD *)h_simu_prot[no_w_bins]->Clone("Accepatnce_7D_prot");

            acceptance_7D_hist_prot[no_w_bins]->Divide(h_th_prot[no_w_bins]);

            h_rec_prot_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_prot_evt/%s", name_evt));

            h_th_prot_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_prot_evt/%s", name_evt));

            h_rec_prot_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_prot_evt/%s", name_evt));

            h_th_prot_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_thrown_prot_evt/%s", name_evt));

            for (int i = 1; i <= h_simu_prot[no_w_bins]->GetNbins(); ++i)
            {
                Double_t err1, err2, err3;
                Double_t a1, a2, a3, b1, b2, b3;

                a1 = (h_simu_prot[no_w_bins]->GetBinContent(i));

                // std::cout << "Bin content sim is : " << a1 << " ," << a2 << " , " << a3 << std::endl;

                b1 = (h_th_prot[no_w_bins]->GetBinContent(i));

                //------------------------------------------------
                // err1 = (a1 * (b1 - a1)) / b1 / b1 / b1; // for weight = 1 histograms
                err1 = (b1 - 2 * a1) / b1 / b1 / b1 * h_rec_prot_sig2[no_w_bins]->GetBinContent(i) + a1 * a1 / b1 / b1 / b1 / b1 * h_th_prot_sig2[no_w_bins]->GetBinContent(i);

                ///// first hist cd(1)
                eff->Fill(h_simu_prot[no_w_bins]->GetBinContent(i) / h_th_prot[no_w_bins]->GetBinContent(i));
                ///// 2nd hist cd(2)
                d_eff->Fill(err1);
                deff_vs_eff->Fill(h_simu_prot[no_w_bins]->GetBinContent(i) / h_th_prot[no_w_bins]->GetBinContent(i),
                                  acceptance_7D_hist_prot[no_w_bins]->GetBinError(i) / (h_simu_prot[no_w_bins]->GetBinContent(i) / h_th_prot[no_w_bins]->GetBinContent(i)));

                eff_threshold_cut->Fill(sqrt((h_th_prot_evt[no_w_bins]->GetBinContent(i) - h_rec_prot_evt[no_w_bins]->GetBinContent(i)) *
                                             (h_rec_prot_evt[no_w_bins]->GetBinContent(i)) / (h_th_prot_evt[no_w_bins]->GetBinContent(i)) / (h_th_prot_evt[no_w_bins]->GetBinContent(i)) / (h_th_prot_evt[no_w_bins]->GetBinContent(i))) /
                                        ((h_rec_prot_evt[no_w_bins]->GetBinContent(i)) / (h_th_prot_evt[no_w_bins]->GetBinContent(i))));

                //     // acceptance_7D_hist_prot[no_w_bins]->SetBinError(i, 0);

                //     if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(i) <= 0.001 || acceptance_7D_hist_prot[no_w_bins]->GetBinContent(i) > 100.)
                //     {
                //         acceptance_7D_hist_prot[no_w_bins]->SetBinContent(i, 0);
                //         acceptance_7D_hist_prot[no_w_bins]->SetBinError(i, 0);
                //     }
            }

            // From THnsparse pim

            h_exp_pim[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_pim/%s", name));
            h_exp_pim_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_pim/%s", name));

            h_empty_pim[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_pim/%s", name_Empty));

            h_th_pim[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pim/%s", name_simu));

            // h_simu_pim[no_w_bins] =
            //     (THnSparseD *)root_mc1->Get(Form("THnSparse_7D_pim/%s", name_simu));

            h_simu_pim[no_w_bins] =
                (THnSparseD *)root_mc->Get(Form("THnSparse_7D_pim/%s", name_simu));

            // h_simu_pim_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_pim/%s", name_simu));

            // h_simu_pim[no_w_bins]->Add(h_simu_pim_background[no_w_bins], -1.);

            // acceptance_7D_hist_pim = ComputeAcceptanceTHnSparse(h_simu_pim, h_th_pim, "Accepatnce_7D_pim");
            acceptance_7D_hist_pim[no_w_bins] =
                (THnSparseD *)h_simu_pim[no_w_bins]->Clone("Accepatnce_7D_pim");
            // // std::cout << "  no of h_simu_pim bins " << h_simu_pim[no_w_bins]->GetNbins() << std::endl;
            acceptance_7D_hist_pim[no_w_bins]->Divide(h_th_pim[no_w_bins]);

            // for (int bin = 1; bin <= h_simu_pim[no_w_bins]->GetNbins(); ++bin)
            // {
            //     if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bin) <= 0)
            //     {
            //         acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bin, 0);
            //     }
            //     else
            //     {
            //         double_t acceptance = 0, sigma_acceptance = 0;

            //         double A = h_simu_pim[no_w_bins]->GetBinContent(bin);
            //         double B = h_th_pim[no_w_bins]->GetBinContent(bin);
            //         double sigma_A = h_simu_pim[no_w_bins]->GetBinError(bin);
            //         double sigma_B = h_th_pim[no_w_bins]->GetBinError(bin);

            //         if (B > 0)
            //         { // Avoid division by zero
            //             double acceptance = A / B;
            //             double rel_error_A = (A > 0) ? (sigma_A / A) : 0;
            //             double rel_error_B = (B > 0) ? (sigma_B / B) : 0;
            //             double sigma_acceptance = acceptance * sqrt(rel_error_A * rel_error_A + rel_error_B * rel_error_B);
            //         }

            //         acceptance_7D_hist_pim[no_w_bins]->SetBinError(bin, sigma_acceptance);
            //     }
            // }

            // for (int i = 1; i <= acceptance_7D_hist_pim[no_w_bins]->GetNbins(); ++i)
            // {
            //     // acceptance_7D_hist_pim[no_w_bins]->SetBinError(i, 0);

            //     if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(i) <= 0.001 || acceptance_7D_hist_pim[no_w_bins]->GetBinContent(i) > 1000.5)
            //     {
            //         acceptance_7D_hist_pim[no_w_bins]->SetBinContent(i, 0);
            //         acceptance_7D_hist_pim[no_w_bins]->SetBinError(i, 0);
            //     }
            // }
            //////////////////////////////////////////////////////////////////////
            // acceptance_7D_hist_pim[no_w_bins]->Add(h_simu_pim_background[no_w_bins], -1);

            h_rec_pim_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_pim_evt/%s", name_evt));

            h_th_pim_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pim_evt/%s", name_evt));

            h_rec_pim_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_pim_evt/%s", name_evt));
            h_th_pim_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_thrown_pim_evt/%s", name_evt));

            // From THnsparse pip

            h_exp_pip[no_w_bins] = (THnSparseD *)root_data->Get(Form("THnSparse_7D_pip/%s", name));
            h_exp_pip_background[no_w_bins] = (THnSparseD *)root_data_background->Get(Form("THnSparse_7D_pip/%s", name));

            h_empty_pip[no_w_bins] = (THnSparseD *)root_data_empty_target->Get(Form("THnSparse_7D_pip/%s", name_Empty));
            h_th_pip[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pip/%s", name_simu));

            // h_simu_pip[no_w_bins] =
            //     (THnSparseD *)root_mc1->Get(Form("THnSparse_7D_pip/%s", name_simu));

            h_simu_pip[no_w_bins] =
                (THnSparseD *)root_mc->Get(Form("THnSparse_7D_pip/%s", name_simu));

            // h_simu_pip_background[no_w_bins] = (THnSparseD *)root_mc_background->Get(Form("THnSparse_7D_pip/%s", name_simu));

            //////////////////////////////////////////////////////////////////////
            // h_simu_pip[no_w_bins]->Add(h_simu_pip_background[no_w_bins], -1.);

            // for (int i = 1; i <= h_simu_pip[no_w_bins]->GetNbins(); ++i)
            // {
            //     h_simu_pip[no_w_bins]->SetBinError(i, 0);

            //     if (h_simu_pip[no_w_bins]->GetBinContent(i) <= 0.001)
            //     {
            //         h_simu_pip[no_w_bins]->SetBinContent(i, 0);
            //     }
            // }

            acceptance_7D_hist_pip[no_w_bins] =
                (THnSparseD *)h_simu_pip[no_w_bins]->Clone("Accepatnce_7D_pip");

            // for (int i = 1; i <= acceptance_7D_hist_pip[no_w_bins]->GetNbins(); ++i)
            // {
            //     // acceptance_7D_hist_pip[no_w_bins]->SetBinError(i, 0);

            //     if (acceptance_7D_hist_pip[no_w_bins]->GetBinContent(i) <= 0.001 || acceptance_7D_hist_pip[no_w_bins]->GetBinContent(i) > 10000000.5)
            //     {
            //         acceptance_7D_hist_pip[no_w_bins]->SetBinContent(i, 0);
            //         acceptance_7D_hist_pip[no_w_bins]->SetBinError(i, 0);
            //     }
            // }

            // acceptance_7D_hist_pip[no_w_bins]->Add(h_simu_pip_background[no_w_bins], -1);

            acceptance_7D_hist_pip[no_w_bins]->Divide(h_th_pip[no_w_bins]);

            h_rec_pip_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_pip_evt/%s", name_evt));

            h_th_pip_sig2[no_w_bins] = (THnSparseD *)root_mc->Get(Form(
                "THnSparse_7D_thrown_pip_evt/%s", name_evt));

            h_rec_pip_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_pip_evt/%s", name_evt));

            h_th_pip_evt[no_w_bins] = (THnSparseD *)root_mcWt1->Get(Form(
                "THnSparse_7D_thrown_pip_evt/%s", name_evt));

            set_all_errors(no_w_bins);
            set_eff_errors(no_w_bins);

            // ////eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins);
            eff_err_cut(0.3, 0., 0., no_w_bins);
            // std::cout << " name is ...............  :  " << name << std::endl;

            // TCanvas *can_eff_checks = new TCanvas("eff_study", "eff_study", 1940, 1700);
            // can_eff_checks->Divide(2, 2);
            // can_eff_checks->cd(1);
            // eff->SetTitle("Efficiency #epsilon");
            // eff->SetXTitle("#epsilon ");
            // eff->Draw("");
            // can_eff_checks->cd(2);
            // d_eff->SetTitle("Efficiency Uncertainty #delta#epsilon ");
            // d_eff->SetXTitle("#delta#epsilon ");
            // d_eff->Draw("");
            // can_eff_checks->cd(3);
            // eff_threshold_cut->SetTitle("#delta#tilde{#epsilon}/#tilde{#epsilon}");
            // eff_threshold_cut->SetXTitle("#delta#epsilon/#epsilon");
            // eff_threshold_cut->Draw("");
            // can_eff_checks->cd(4);
            // deff_vs_eff->SetTitle("#delta#epsilon/#epsilon vs #epsilon");
            // deff_vs_eff->SetXTitle("#epsilon ");
            // deff_vs_eff->SetYTitle("#delta#epsilon/#epsilon");

            // // can_eff_checks->cd(1)->SetLogz();
            // deff_vs_eff->Draw("COLZ");
            // TLine *l = new TLine(-0.1, 0, 1.4, 0);
            // l->Draw("SAME");

            // can_eff_checks->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/CS_measurement/dd_bg_sub_in_sim_eff_threshold_cut_wt_cs_741_files_gemc_5_4_%.1f<=Q2<=%.1f_GeV2_%.2f<=W<=%.2f_GeV.png",
            //                             q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));
            // // // // // estimate1[w-8] = h_simu_pim[no_w_bins]->Projection(0)->Integral(0, 12) / h_th_pim[no_w_bins]->Projection(0)->Integral(0, 12);
            // delete can_eff_checks;
            // break;
            {

                // 1. faraday cup charge = 0.03790 ..C
                h_exp_prot[no_w_bins]->Add(h_exp_prot_background[no_w_bins], -1.);

                h_exp_prot[no_w_bins]->Scale(1. / 0.029113878); // from valerii
                                                                //  // h_exp_prot[no_w_bins]->Scale(1. / 0.0290267); // this is my analysis output and correcting beam blocker issues
                //// h_exp_prot[no_w_bins]->Scale(1. / 0.02788674); // this is using clas12 root and correcting beam blocker issues

                /// // 2.94703e+07 this is the faraday cup charge I got using golden criteria for pass2 runs, no correction applied
                ///// adjust 2.94703e+07 - 5.85024e+06 + 5.40664e+06 = 2.90267
                ///// corrected for beam blocker: 6.13032e+06 + 2.88288e+07  //// calculated using clas12 root without asking golden
                ///// Total = 2.788674 from clas12 root correcting for beam blocker issue
                ////  Total without correction : 2.8333034, using clas12root

                // // // faraday cup charge = 0.00240...C
                h_empty_prot[no_w_bins]->Scale(1. / 0.0024075358);

                // // // //Empty Target Substraction
                h_exp_prot[no_w_bins]->Add(h_empty_prot[no_w_bins], -1.);

                // radiative effects correction factors
                h_exp_prot[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);
                std::cout << " rad_corr_fac " << rad_corr_factor[q2 - 1][w - 8] << "\n";

                // Acceptance corrected THnSparse
                acceptance_corrected_7D_prot[no_w_bins] =
                    (THnSparseD *)h_exp_prot[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_prot");
                acceptance_corrected_7D_prot[no_w_bins]->Divide(acceptance_7D_hist_prot[no_w_bins]);
                // acceptance_corrected_7D_prot[no_w_bins]->Write();

                // Hole Fillin Process
                acceptance_corrected_7D_simulation_prot[no_w_bins] =
                    (THnSparseD *)h_simu_prot[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_prot_simulation_prot");
                acceptance_corrected_7D_simulation_prot[no_w_bins]->Divide(acceptance_7D_hist_prot[no_w_bins]);

                hole_yield_simulation_prot[no_w_bins] =
                    (THnSparseD *)h_th_prot[no_w_bins]->Clone(
                        "hole_yield_simulation_prot");
                hole_yield_simulation_prot[no_w_bins]->Add(acceptance_corrected_7D_simulation_prot[no_w_bins], -1);

                Int_t *bins_prot = new Int_t[5];

                //     for (Int_t pipP = 1; pipP <= pipP_max; pipP++)
                //     {
                //         for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                for (Int_t pipP = 1; pipP <= pipP_max; pipP++)
                {
                    for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            for (Int_t phi = 1; phi <= phi_max; phi++)
                            {
                                for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                {
                                    int total_bin_content_pPip = 0;
                                    int total_bin_err_pPip = 0;

                                    // total_bin_content_pPip = total_bin_content_pPip + acceptance_corrected_7D_prot[no_w_bins]->GetBinContent(bins_prot);
                                    // total_bin_err_pPip = total_bin_err_pPip + acceptance_corrected_7D_prot[no_w_bins]->GetBinError(bins_prot);

                                    total_bins_in_sim[q2 - 1][w - 8]++;

                                    bins_prot[0] = pipP;
                                    bins_prot[1] = pip_pim;
                                    bins_prot[2] = theta;
                                    bins_prot[3] = phi;
                                    bins_prot[4] = alpha;
                                    if (acceptance_corrected_7D_simulation_prot[no_w_bins]->GetBinContent(bins_prot) > 0.)
                                    {
                                        filled_bins_in_sim[q2 - 1][w - 8]++;
                                        bin_content_sum_acc_corrected_simu[0] += acceptance_corrected_7D_simulation_prot[no_w_bins]->GetBinContent(bins_prot);

                                        bin_content_sum_acc_corrected_exp[0] += acceptance_corrected_7D_prot[no_w_bins]->GetBinContent(bins_prot);
                                    }
                                    else
                                    {
                                        holes_in_sim[q2 - 1][w - 8]++;
                                    }
                                    // // if (h_exp_prot[no_w_bins]->GetBinContent(bins_prot) != 0.)
                                    // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins_prot)) << std::endl;
                                    // how_many_bins = how_many_bins + 1;
                                    if (h_exp_prot[no_w_bins]->GetBinContent(bins_prot) == 0.)
                                        holes_in_exp[q2 - 1][w - 8] = holes_in_exp[q2 - 1][w - 8] + 1;
                                    // if (h_exp_prot[no_w_bins]->GetBinContent(bins_prot) == 1.)
                                    //     how_many_ones = how_many_ones + 1;
                                    // if (h_exp_prot[no_w_bins]->GetBinContent(bins_prot) > 0.)
                                    // {
                                    //     std::cout << "Bin content of h_exp_prot is : " << (h_exp_prot[no_w_bins]->GetBinContent(bins_prot))
                                    //               << "  Bin err is: " << (h_exp_prot[no_w_bins]->GetBinError(bins_prot)) << std::endl;
                                    // }
                                    // // how_many_highers = how_many_highers + 1;

                                    // if ((h_exp_prot[no_w_bins]->GetBinError(bins_prot)) / (h_exp_prot[no_w_bins]->GetBinContent(bins_prot)) > 1)
                                    //     std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins_prot))
                                    //               << "  Bin err exp is: " << (h_exp_prot[no_w_bins]->GetBinError(bins_prot))
                                    //               << "  Bin err \% is: " << (h_exp_prot[no_w_bins]->GetBinError(bins_prot)) / (h_exp_prot[no_w_bins]->GetBinContent(bins_prot)) * 100
                                    //               //   << "  Bin err simu is: " << (h_simu_prot[no_w_bins]->GetBinError(bins_prot))
                                    //               //   << "  Bin err exp bkg is: " << (h_exp_prot_background[no_w_bins]->GetBinError(bins_prot))

                                    // //               << std::endl;
                                    // std::cout << "  5D:  bin no pPip " << pipP << " pip Pim " << pip_pim << "  theta " << theta << "  phi " << phi
                                    //           << "  alpha " << alpha << "  total Bin content : " << total_bin_content_pPip << " Bin err : " << total_bin_err_pPip
                                    //           << "  Bin err \% is: " << float(total_bin_err_pPip) / float(total_bin_content_pPip) * 100
                                    //           << std::endl;
                                }
                            }
                        }
                    }
                }
                holes_fraction_sim[q2 - 1][w - 8] = holes_in_sim[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8];
                holes_fraction_exp[q2 - 1][w - 8] = holes_in_exp[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8];

                // std::cout << "no of Bin: " << total_bins_in_sim[q2 - 1][w - 8] << std::endl;
                // std::cout << "no filled_bins_in_sim: " << filled_bins_in_sim[q2 - 1][w - 8] << std::endl;
                // std::cout << "no holes_in_sim: " << holes_in_sim[q2 - 1][w - 8] << std::endl;
                // std::cout << "no holes_in_exp: " << holes_in_exp[q2 - 1][w - 8] << std::endl;
                // std::cout << " fraction of filled bins in sim: " << filled_bins_in_sim[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8] << std::endl;

                // std::cout << " fraction of holes in sim: " << holes_in_sim[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8] << std::endl;
                // std::cout << " fraction of holes in exp: " << holes_in_exp[q2 - 1][w - 8] / total_bins_in_sim[q2 - 1][w - 8] << std::endl;

                scale_factor[0] = (bin_content_sum_acc_corrected_exp[0] / bin_content_sum_acc_corrected_simu[0]);
                // std::cout << "bin_content_sum_acc_corrected_exp = " << bin_content_sum_acc_corrected_exp[0] << std::endl;
                // std::cout << "bin_content_sum_acc_corrected_simu = " << bin_content_sum_acc_corrected_simu[0] << std::endl;
                // std::cout << " scale factor[0] = exp / simu = " << scale_factor[0] << std::endl;

                hole_yield_exp_prot[no_w_bins] =
                    (THnSparseD *)hole_yield_simulation_prot[no_w_bins]->Clone(
                        "hole_yield_exp_prot");
                hole_yield_exp_prot[no_w_bins]->Scale(scale_factor[0]);
                total_yield_exp_prot[no_w_bins] =
                    (THnSparseD *)acceptance_corrected_7D_prot[no_w_bins]->Clone(
                        "total_yield_exp_prot");

                total_yield_exp_prot[no_w_bins]->Add(hole_yield_exp_prot[no_w_bins], 1);
                ///  // total_yield_exp_prot[no_w_bins]->Sumw2();

                // // 3, 4 Normalization for luminosity, flux
                acceptance_corrected_7D_prot[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_prot[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                total_yield_exp_prot[no_w_bins]->Scale(0.755314965e-12);
                total_yield_exp_prot[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));
                // // std::cout << " flux  : " << flux(w_bin_for_flux, q2_mid_value) << "\n";

                // 5 Projection and Normalization : 3 factors
                TH1D *acceptance_corrected_inv_Ppip = acceptance_corrected_7D_prot[no_w_bins]->Projection(0);
                TH1D *acceptance_corrected_inv_pip_pim = acceptance_corrected_7D_prot[no_w_bins]->Projection(1);
                TH1D *acceptance_corrected_theta_prot = acceptance_corrected_7D_prot[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_prot = acceptance_corrected_7D_prot[no_w_bins]->Projection(4);

                Float_t factor_inv_mass = acceptance_corrected_inv_Ppip->GetBinWidth(5);
                Float_t factor_inv_mass_pip_pim = acceptance_corrected_inv_pip_pim->GetBinWidth(5);
                // std::cout << "scale factor inv mass Ppip: " << factor_inv_mass << std::endl;
                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_prot->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle prot: " << factor_alpha_angle << std::endl;

                acceptance_corrected_inv_Ppip->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_inv_pip_pim->Scale(1. / (w_bin_size * q2_bin_size));

                Int_1_acc_corr[w - 8] = acceptance_corrected_inv_Ppip->Integral();
                acceptance_corrected_inv_Ppip->IntegralAndError(1, acceptance_corrected_inv_Ppip->GetNbinsX(), Int_err_1_acc_corr[w - 8]);
                Int_2_acc_corr[w - 8] = acceptance_corrected_inv_pip_pim->Integral();
                acceptance_corrected_inv_pip_pim->IntegralAndError(1, acceptance_corrected_inv_pip_pim->GetNbinsX(), Int_err_2_acc_corr[w - 8]);

                // std::cout << " Int_1_acc_corr .......... " << Int_1_acc_corr[w - 8] << "\n";
                // std::cout << " Int_2_acc_corr .......... " << Int_2_acc_corr[w - 8] << "\n";

                acceptance_corrected_inv_Ppip->Scale(1. / factor_inv_mass);
                acceptance_corrected_inv_pip_pim->Scale(1. / factor_inv_mass_pip_pim);
                acceptance_corrected_alpha_prot->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                // std::cout << " Int_1_acc_corr/factor_inv_mass .......... " << Int_1_acc_corr[w - 8] / factor_inv_mass << "\n";
                // std::cout << " Int_2_acc_corr/factor_inv_mass_pip_pim .......... " << Int_2_acc_corr[w - 8] / factor_inv_mass_pip_pim << "\n";

                TH1D *hnew = new TH1D("hnew", "#Theta_{p'}", 10, 0, 180.);
                float cosine_value;
                for (int i = 1; i <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); i++)
                {
                    cosine_value = -1 / cos(acceptance_corrected_theta_prot->GetBinContent(i));
                    hnew->SetBinContent(i, abs(cosine_value * acceptance_corrected_theta_prot->GetBinContent(i)));
                }
                TH1D *h_cos_th_prot;
                Double_t temp_prot;
                // Int_t n_theta_bins;
                h_cos_th_prot = new TH1D("h_cos_th_prot", "h_cos_th_prot", acceptance_corrected_theta_prot->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); j++)
                {
                    temp_prot = cos((acceptance_corrected_theta_prot->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (acceptance_corrected_theta_prot->GetBinLowEdge(j) + acceptance_corrected_theta_prot->GetBinWidth(j)));
                    h_cos_th_prot->SetBinContent(j, temp_prot);
                    h_cos_th_prot->SetBinError(j, 0.);
                }
                acceptance_corrected_theta_prot->Divide(h_cos_th_prot);
                acceptance_corrected_theta_prot->Scale(1. / (w_bin_size * q2_bin_size));

                TH1D *total_yield_with_hole_filled_inv_Ppip = total_yield_exp_prot[no_w_bins]->Projection(0);
                TH1D *total_yield_with_hole_filled_inv_pip_pim = total_yield_exp_prot[no_w_bins]->Projection(1);

                TH1D *total_yield_with_hole_filled_theta_prot = total_yield_exp_prot[no_w_bins]->Projection(2);
                TH1D *total_yield_with_hole_filled_alpha_prot = total_yield_exp_prot[no_w_bins]->Projection(4);

                total_yield_with_hole_filled_inv_Ppip->Scale(1. / w_bin_size / q2_bin_size);
                total_yield_with_hole_filled_inv_pip_pim->Scale(1. / w_bin_size / q2_bin_size);
                Int_1[w - 8] = total_yield_with_hole_filled_inv_Ppip->Integral();
                total_yield_with_hole_filled_inv_Ppip->IntegralAndError(1, total_yield_with_hole_filled_inv_Ppip->GetNbinsX(), Int_err_1[w - 8]);
                // std::cout << " Int_1 final bin " << total_yield_with_hole_filled_inv_Ppip->GetNbinsX() << "\n";
                std::cout << " Int_1  " << Int_1[w - 8] << "\n";
                // std::cout << " Int_1 err  " << Int_err_1[w - 8] << "\n";

                Int_2[w - 8] = total_yield_with_hole_filled_inv_pip_pim->Integral();
                total_yield_with_hole_filled_inv_pip_pim->IntegralAndError(1, total_yield_with_hole_filled_inv_pip_pim->GetNbinsX(), Int_err_2[w - 8]);
                std::cout << " Int_2 " << Int_2[w - 8] << "\n";

                total_yield_with_hole_filled_theta_prot->Scale(1. / (w_bin_size * q2_bin_size));

                total_yield_with_hole_filled_alpha_prot->Scale(1. / (w_bin_size * q2_bin_size));

                Int_1_theta[w - 8] = total_yield_with_hole_filled_theta_prot->Integral();
                Int_1_alpha[w - 8] = total_yield_with_hole_filled_alpha_prot->Integral();
                // std::cout << " Int_1_theta " << Int_1_theta[w - 8] << "\n";
                total_yield_with_hole_filled_theta_prot->IntegralAndError(1, total_yield_with_hole_filled_theta_prot->GetNbinsX(), Int_err_1_theta[w - 8]);
                // std::cout << " Int_1_alpha " << Int_1_alpha[w - 8] << "\n";
                total_yield_with_hole_filled_alpha_prot->IntegralAndError(1, total_yield_with_hole_filled_alpha_prot->GetNbinsX(), Int_err_1_alpha[w - 8]);

                total_yield_with_hole_filled_inv_Ppip->Scale(1. / factor_inv_mass);
                total_yield_with_hole_filled_inv_pip_pim->Scale(1. / factor_inv_mass);
                total_yield_with_hole_filled_theta_prot->Divide(h_cos_th_prot);
                total_yield_with_hole_filled_alpha_prot->Scale(1. / factor_alpha_angle);

                can1->cd(1);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);

                total_yield_with_hole_filled_inv_Ppip->SetMarkerStyle(24);

                total_yield_with_hole_filled_inv_Ppip->SetMarkerColor(4);
                // total_yield_with_hole_filled_inv_Ppip->SetMaximum(1.6 * total_yield_with_hole_filled_inv_Ppip->GetMaximumStored());
                // total_yield_with_hole_filled_inv_Ppip->SetStats(0);
                total_yield_with_hole_filled_inv_Ppip->SetTitle("");
                // total_yield_with_hole_filled_inv_Ppip->SetTitle(
                //     "M(#pi^{+}p')");
                // acceptance_corrected_inv_Ppip->Fit("pol4");
                //  total_yield_with_hole_filled_inv_Ppip->Sumw2();
                total_yield_with_hole_filled_inv_Ppip->SetMinimum(0.);
                total_yield_with_hole_filled_inv_Ppip->GetXaxis()->SetRange(5, 11);

                // In ROOT, the range specified by
                //  TH1::GetXaxis()->SetRange(int first, int last) is inclusive in terms of the bin numbers.
                //  This means that the specified range will include both the first and last bins.

                total_yield_with_hole_filled_inv_Ppip->SetXTitle("M#pi^{+}p'(GeV)");
                total_yield_with_hole_filled_inv_Ppip->SetYTitle("#Delta#sigma/#DeltaM_{p#pi^{+}}[#mub/GeV]");
                total_yield_with_hole_filled_inv_Ppip->Draw("E ");
                total_yield_with_hole_filled_inv_Ppip->SetMaximum(1.6 * total_yield_with_hole_filled_inv_Ppip->GetMaximum());
                total_yield_with_hole_filled_inv_Ppip->SetMinimum(0);

                // histogram.GetXaxis()->SetRangeUser(1., 5.);
                // h->GetXaxis()->SetRange(0, h->GetNbinsX() + 1);

                // //acceptance_corrected_inv_Ppip->Sumw2();
                acceptance_corrected_inv_Ppip->SetMarkerStyle(24);
                acceptance_corrected_inv_Ppip->SetMarkerColor(7);
                acceptance_corrected_inv_Ppip->SetLineColor(7);
                acceptance_corrected_inv_Ppip->GetXaxis()->SetRange(5, 11);
                acceptance_corrected_inv_Ppip->Draw("Z same");

                // // // ///////////////////////////////  Bin centering corrections  m_pPip ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  m_pPip ////////////////////////

                TH1D *h_bin_cent_corr_pPip;
                Double_t temp_bin_cent_corr_pPip;
                h_bin_cent_corr_pPip = new TH1D("h_bin_cent_corr_pPip", "h_bin_cent_corr_pPip", acceptance_corrected_inv_Ppip->GetXaxis()->GetNbins(), xmin_5D[0], xmax_5D[0]);
                for (Int_t j = 1; j <= acceptance_corrected_inv_Ppip->GetXaxis()->GetNbins(); j++)
                {
                    if (j >= 5 && j <= 11)
                    {
                        temp_bin_cent_corr_pPip = bin_centering_corr_m_pPip[q2 - 1][w - 8][j - 5];

                        // temp_bin_cent_corr_pPip = bin_centering_corr_m_pPip[q2 - 1][w - 8][j - 3] * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                        // std::cout << " for  bin no = " << j << " bin content inv_Ppip  before " << acceptance_corrected_inv_Ppip->GetBinContent(j) << "   corr is  :  " << temp_bin_cent_corr_pPip << std::endl;

                        // std::cout << "  w is " << w_bin_for_flux << "  q2 is "
                        //           << q2_mid_value << "  inv mass bin j is " << j << "   m_pPip_corr, w_corr, q2_corr, are : " << bin_centering_corr_m_pPip[q2 - 1][w - 8][j - 3] << " , " << (bin_centering_corr_w[q2 - 1][w - 8])
                        //           << " , " << (bin_centering_corr_q2[q2 - 1][w - 8]) << std::flush;
                    }
                    else
                        temp_bin_cent_corr_pPip = 1.0;
                    // std::cout << "   total bin centering corr " << temp_bin_cent_corr_pPip << std::endl;

                    h_bin_cent_corr_pPip->SetBinContent(j, temp_bin_cent_corr_pPip);
                    h_bin_cent_corr_pPip->SetBinError(j, 0.);
                }

                // Clone the histogram
                // h_bin_cent_corr_pPip->Draw("same");
                TH1D *total_yield_with_hole_filled_inv_Ppip_modified = (TH1D *)total_yield_with_hole_filled_inv_Ppip->Clone();
                // Modify the cloned histogram
                total_yield_with_hole_filled_inv_Ppip_modified->Multiply(h_bin_cent_corr_pPip);
                total_yield_with_hole_filled_inv_Ppip_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_inv_Ppip_modified->SetMarkerColor(4);
                // Draw the modified histogram
                total_yield_with_hole_filled_inv_Ppip_modified->Draw("Z same");
                Int_1_bc_corr[w - 8] = total_yield_with_hole_filled_inv_Ppip_modified->Integral() * factor_inv_mass;
                total_yield_with_hole_filled_inv_Ppip_modified->IntegralAndError(1, total_yield_with_hole_filled_inv_Ppip_modified->GetNbinsX(), Int_err_1_bc_corr[w - 8]);

                TH1D *acceptance_corrected_inv_Ppip_modified = (TH1D *)acceptance_corrected_inv_Ppip->Clone();
                // acceptance_corrected_inv_Ppip_modified->SetName("acceptance_corrected_inv_Ppip_modified");
                // Modify the cloned histogram
                acceptance_corrected_inv_Ppip_modified->Multiply(h_bin_cent_corr_pPip);
                acceptance_corrected_inv_Ppip_modified->SetMarkerStyle(20);
                acceptance_corrected_inv_Ppip_modified->SetMarkerColor(7);
                // Draw the modified histogram
                acceptance_corrected_inv_Ppip_modified->Draw("Z same");

                // // // /////////////////////////// Done! Bin centering corrections  m_pPip ////////////////////////
                // // // /////////////////////////// Done! Bin centering corrections  m_pPip ////////////////////////

                // // // //         can1->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/CS_measurement/bin_centering_corr/mPim_50_MeV_w_bins_with_bc_corr_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV.png",
                // // // //                           q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));
                // // // //     }
                // // // // }

                auto legend = new TLegend(0.2, 0.75, 0.95, 0.95);
                legend->SetNColumns(3); // Set the legend to have 2 columns

                // legend->AddEntry(total_yield_with_hole_filled_inv_Ppip, "HF no BC", "ep");
                // legend->AddEntry(acceptance_corrected_inv_Ppip, "AC no BC", "ep");
                legend->AddEntry(total_yield_with_hole_filled_inv_Ppip_modified, "Hole Filled", "ep");
                legend->AddEntry(acceptance_corrected_inv_Ppip_modified, "With Hole", "ep");
                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path = w_path + "/" + cs_files[0]; // Adjust W directory logic
                    CrossSectionData cs_data = readCrossSections(cs_file_path);

                    // Create TGraphErrors
                    TGraphErrors *graph = new TGraphErrors(7);
                    for (int i = 0; i < 7; ++i)
                    {
                        graph->SetPoint(i, cs_data.w_values[i], cs_data.cross_sections[i]);
                        graph->SetPointError(i, 0, cs_data.errors[i]);
                    }

                    graph->SetMarkerStyle(20);
                    graph->SetMarkerColor(6);
                    graph->SetLineColor(6);
                    graph->Draw("P same");
                    legend->AddEntry(graph, "CLAS6", "ep");
                }
                legend->Draw();
                for (int i = 0; i < 15; i++)
                {
                    std::cout << "Bin " << i << "   " << (total_yield_with_hole_filled_inv_Ppip_modified->GetBinContent(i))
                              << "   " << (total_yield_with_hole_filled_inv_Ppip_modified->GetBinError(i))
                              << "   " << (total_yield_with_hole_filled_inv_Ppip_modified->GetBinError(i)) / (total_yield_with_hole_filled_inv_Ppip_modified->GetBinContent(i)) * 100
                              << std::endl;
                }
                // ////////////////////////////////////////////////////////////
                can1->cd(3);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_inv_pip_pim->SetMarkerStyle(24);
                total_yield_with_hole_filled_inv_pip_pim->SetMarkerColor(4);
                acceptance_corrected_inv_pip_pim->SetMarkerColor(7);
                acceptance_corrected_inv_pip_pim->SetLineColor(7);
                acceptance_corrected_inv_pip_pim->SetMarkerStyle(24);

                total_yield_with_hole_filled_inv_pip_pim->SetTitle("");
                // "M(#pi^{+}#pi^{-})");
                // total_yield_with_hole_filled_inv_pip_pim->SetStats(0);
                total_yield_with_hole_filled_inv_pip_pim->SetXTitle(
                    "M#pi^{+}#pi^{-} (GeV)");
                // acceptance_corrected_inv_pip_pim->Fit("pol4");
                total_yield_with_hole_filled_inv_pip_pim->SetMinimum(0.);
                total_yield_with_hole_filled_inv_pip_pim->GetXaxis()->SetRange(5, 11);
                acceptance_corrected_inv_pip_pim->GetXaxis()->SetRange(5, 11);

                total_yield_with_hole_filled_inv_pip_pim->Draw("Z");
                acceptance_corrected_inv_pip_pim->Draw("Z same");
                total_yield_with_hole_filled_inv_pip_pim->SetYTitle("#Delta#sigma/#DeltaM_{#pi^{+}#pi^{-}}[#mub/GeV]");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_pip_pim = w_path + "/" + cs_files[2]; // Adjust W directory logic
                    CrossSectionData cs_data_pip_pim = readCrossSections(cs_file_path_pip_pim);

                    // // Create TGraphErrors
                    TGraphErrors *graph_pip_pim = new TGraphErrors(7);
                    for (int i = 0; i < 7; ++i)
                    {
                        graph_pip_pim->SetPoint(i, cs_data_pip_pim.w_values[i], cs_data_pip_pim.cross_sections[i]);
                        graph_pip_pim->SetPointError(i, 0, cs_data_pip_pim.errors[i]);
                    }

                    graph_pip_pim->SetMarkerStyle(20);
                    graph_pip_pim->SetMarkerColor(6);
                    graph_pip_pim->SetLineColor(6);
                    graph_pip_pim->Draw("P same");
                }
                // // // ///////////////////////////////  Bin centering corrections  m_pipPim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  m_pipPim ////////////////////////

                TH1D *h_bin_cent_corr_pipPim;
                Double_t temp_bin_cent_corr_pipPim;
                h_bin_cent_corr_pipPim = new TH1D("h_bin_cent_corr_pipPim", "h_bin_cent_corr_pipPim", acceptance_corrected_inv_pip_pim->GetXaxis()->GetNbins(), xmin_5D[1], xmax_5D[1]);
                for (Int_t j = 1; j <= acceptance_corrected_inv_pip_pim->GetXaxis()->GetNbins(); j++)
                {
                    if (j >= 5 && j <= 11)
                        temp_bin_cent_corr_pipPim = (bin_centering_corr_m_pipPim[q2 - 1][w - 8][j - 5]); //// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    else
                        temp_bin_cent_corr_pipPim = 1.0;

                    h_bin_cent_corr_pipPim->SetBinContent(j, temp_bin_cent_corr_pipPim);
                    h_bin_cent_corr_pipPim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_pipPim->Draw("same");
                TH1D *total_yield_with_hole_filled_inv_pip_pim_modified = (TH1D *)total_yield_with_hole_filled_inv_pip_pim->Clone();
                // Modify the cloned histogram
                total_yield_with_hole_filled_inv_pip_pim_modified->Multiply(h_bin_cent_corr_pipPim);
                total_yield_with_hole_filled_inv_pip_pim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_inv_pip_pim_modified->SetMarkerColor(4);
                // Draw the modified histogram
                total_yield_with_hole_filled_inv_pip_pim_modified->Draw("Z same");
                Int_2_bc_corr[w - 8] = total_yield_with_hole_filled_inv_pip_pim_modified->Integral() * factor_inv_mass;
                total_yield_with_hole_filled_inv_pip_pim_modified->IntegralAndError(1, total_yield_with_hole_filled_inv_pip_pim_modified->GetNbinsX(), Int_err_2_bc_corr[w - 8]); /// this is prolom

                TH1D *acceptance_corrected_inv_pip_pim_modified = (TH1D *)acceptance_corrected_inv_pip_pim->Clone();
                // acceptance_corrected_inv_Ppip_modified->SetName("acceptance_corrected_inv_Ppip_modified");
                // Modify the cloned histogram
                acceptance_corrected_inv_pip_pim_modified->Multiply(h_bin_cent_corr_pipPim);
                acceptance_corrected_inv_pip_pim_modified->SetMarkerStyle(20);
                acceptance_corrected_inv_pip_pim_modified->SetMarkerColor(7);
                // Draw the modified histogram
                acceptance_corrected_inv_pip_pim_modified->Draw("Z same");
                total_yield_with_hole_filled_inv_pip_pim->SetMaximum(1.6 * total_yield_with_hole_filled_inv_pip_pim->GetMaximum());
                total_yield_with_hole_filled_inv_pip_pim->SetMinimum(0);

                // // // float estimate = 0;
                // // // estimate = total_yield_with_hole_filled_inv_pip_pim->Integral(0, -1);
                // // // std::cout << " total inv_pim_pim " << estimate << "\n";
                can1->cd(6);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_theta_prot->SetMarkerStyle(24);
                total_yield_with_hole_filled_theta_prot->SetMarkerColor(4);
                acceptance_corrected_theta_prot->SetMarkerColor(7);
                acceptance_corrected_theta_prot->SetMarkerStyle(24);

                total_yield_with_hole_filled_theta_prot->SetTitle("");
                // total_yield_with_hole_filled_theta_prot->SetTitle("#Theta_{p'}");
                total_yield_with_hole_filled_theta_prot->SetXTitle("#Theta_{p'}(deg)");
                // acceptance_corrected_theta_prot->Fit("pol4");
                // total_yield_with_hole_filled_theta_prot->SetStats(0);
                total_yield_with_hole_filled_theta_prot->SetMinimum(0.);
                total_yield_with_hole_filled_theta_prot->Draw("Z");
                acceptance_corrected_theta_prot->Draw("Z same");
                total_yield_with_hole_filled_theta_prot->SetYTitle("#Delta#sigma/d(-cos#theta_{p})[#mub/rad]"); //("Yield/d(-cos#theta)");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_th_prot = w_path + "/" + cs_files[5]; // Adjust W directory logic
                    CrossSectionData cs_data_th_prot = readCrossSections(cs_file_path_th_prot);

                    // Create TGraphErrors
                    TGraphErrors *graph_th_prot = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_th_prot->SetPoint(i, cs_data_th_prot.w_values[i], cs_data_th_prot.cross_sections[i]);
                        graph_th_prot->SetPointError(i, 0, cs_data_th_prot.errors[i]);
                    }

                    graph_th_prot->SetMarkerStyle(20);
                    graph_th_prot->SetMarkerColor(6);
                    graph_th_prot->SetLineColor(6);
                    graph_th_prot->Draw("P same");
                }
                // // // ///////////////////////////////  Bin centering corrections  th_prot ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  th_prot ////////////////////////

                TH1D *h_bin_cent_corr_th_prot;
                Double_t temp_bin_cent_corr_th_prot;
                h_bin_cent_corr_th_prot = new TH1D("h_bin_cent_corr_th_prot", "h_bin_cent_corr_th_prot", acceptance_corrected_theta_prot->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                for (Int_t j = 1; j <= acceptance_corrected_theta_prot->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_th_prot = (bin_centering_corr_th_prot[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_th_prot->SetBinContent(j, temp_bin_cent_corr_th_prot);
                    h_bin_cent_corr_th_prot->SetBinError(j, 0.);
                    // std::cout << "  w is " << w_bin_for_flux << "  q2 is "
                    //           << q2_mid_value << "  inv mass bin j is " << j << "   m_pPip_corr, w_corr, q2_corr, are : " << bin_centering_corr_th_prot[q2 - 1][w - 8][j] << " , " << (bin_centering_corr_w[q2 - 1][w - 8])
                    //           << " , " << (bin_centering_corr_q2[q2 - 1][w - 8]) << " total is :  " << temp_bin_cent_corr_th_prot << std::endl;
                }
                // Clone the histogram
                // h_bin_cent_corr_th_prot->Draw("same");
                TH1D *total_yield_with_hole_filled_theta_prot_modified = (TH1D *)total_yield_with_hole_filled_theta_prot->Clone();
                total_yield_with_hole_filled_theta_prot_modified->Multiply(h_bin_cent_corr_th_prot);
                total_yield_with_hole_filled_theta_prot_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_theta_prot_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_theta_prot_modified->Draw("Z same");

                TH1D *acceptance_corrected_theta_prot_modified = (TH1D *)acceptance_corrected_theta_prot->Clone();
                acceptance_corrected_theta_prot_modified->Multiply(h_bin_cent_corr_th_prot);
                acceptance_corrected_theta_prot_modified->SetMarkerStyle(20);
                acceptance_corrected_theta_prot_modified->SetMarkerColor(7);
                acceptance_corrected_theta_prot_modified->Draw("Z same");
                total_yield_with_hole_filled_theta_prot->SetMaximum(1.8 * total_yield_with_hole_filled_theta_prot->GetMaximum());
                total_yield_with_hole_filled_theta_prot->SetMinimum(0);

                // // float estimate1 = 0;
                // // estimate1 = total_yield_with_hole_filled_theta_prot->Integral(0, -1);
                // // std::cout << " total from theta_prot: " << estimate1 << "\n";

                can1->cd(9);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_alpha_prot->SetMarkerStyle(24);

                total_yield_with_hole_filled_alpha_prot->SetMarkerColor(4);
                acceptance_corrected_alpha_prot->SetMarkerColor(7);
                acceptance_corrected_alpha_prot->SetLineColor(7);
                acceptance_corrected_alpha_prot->SetMarkerStyle(24);
                total_yield_with_hole_filled_alpha_prot->SetTitle("");
                // total_yield_with_hole_filled_alpha_prot->SetTitle(
                //     "#alpha_{p'}");
                // total_yield_with_hole_filled_alpha_prot->SetStats(0);
                total_yield_with_hole_filled_alpha_prot->SetXTitle("#alpha_{p'}(deg)");
                // acceptance_corrected_alpha_prot->Fit("pol4");
                total_yield_with_hole_filled_alpha_prot->Draw("Z");
                total_yield_with_hole_filled_alpha_prot->SetYTitle("#Delta#sigma/d#alpha_{p}[#mub/rad]");
                acceptance_corrected_alpha_prot->Draw("Z same");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_al_prot = w_path + "/" + cs_files[8]; // Adjust W directory logic
                    CrossSectionData cs_data_al_prot = readCrossSections(cs_file_path_al_prot);

                    // Create TGraphErrors
                    TGraphErrors *graph_al_prot = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_al_prot->SetPoint(i, cs_data_al_prot.w_values[i], cs_data_al_prot.cross_sections[i]);
                        graph_al_prot->SetPointError(i, 0, cs_data_al_prot.errors[i]);
                    }

                    graph_al_prot->SetMarkerStyle(20);
                    graph_al_prot->SetMarkerColor(6);
                    graph_al_prot->SetLineColor(6);
                    graph_al_prot->Draw("P same");
                }
                // // // ///////////////////////////////  Bin centering corrections  alpha_prot ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  alpha_prot ////////////////////////

                TH1D *h_bin_cent_corr_alpha_prot;
                Double_t temp_bin_cent_corr_alpha_prot;
                h_bin_cent_corr_alpha_prot = new TH1D("h_bin_cent_corr_alpha_prot", "h_bin_cent_corr_alpha_prot", acceptance_corrected_alpha_prot->GetXaxis()->GetNbins(), xmin_5D[4], xmax_5D[4]);
                for (Int_t j = 1; j <= acceptance_corrected_alpha_prot->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_alpha_prot = (bin_centering_corr_alpha_prot[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));

                    h_bin_cent_corr_alpha_prot->SetBinContent(j, temp_bin_cent_corr_alpha_prot);
                    h_bin_cent_corr_alpha_prot->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_alpha_prot->Draw("same");
                TH1D *total_yield_with_hole_filled_alpha_prot_modified = (TH1D *)total_yield_with_hole_filled_alpha_prot->Clone();
                total_yield_with_hole_filled_alpha_prot_modified->Multiply(h_bin_cent_corr_alpha_prot);
                total_yield_with_hole_filled_alpha_prot_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_alpha_prot_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_alpha_prot_modified->Draw("Z same");

                TH1D *acceptance_corrected_alpha_prot_modified = (TH1D *)acceptance_corrected_alpha_prot->Clone();
                acceptance_corrected_alpha_prot_modified->Multiply(h_bin_cent_corr_alpha_prot);
                acceptance_corrected_alpha_prot_modified->SetMarkerStyle(20);
                acceptance_corrected_alpha_prot_modified->SetMarkerColor(7);
                acceptance_corrected_alpha_prot_modified->Draw("Z same");
                total_yield_with_hole_filled_alpha_prot->SetMaximum(1.6 * total_yield_with_hole_filled_alpha_prot->GetMaximum());
                total_yield_with_hole_filled_alpha_prot->SetMinimum(0);

                // // float estimate2 = 0;
                // // estimate2 = total_yield_with_hole_filled_alpha_prot->Integral(0, -1);
                // // std::cout << " total from alpha_prot: " << estimate2 << "\n";
            }
            {
                h_exp_pip[no_w_bins]->Add(h_exp_pip_background[no_w_bins], -1.);

                // faraday cup charge
                h_exp_pip[no_w_bins]->Scale(1. / 0.029113878); // from valerii
                // h_exp_pip[no_w_bins]->Scale(1. / 0.0290267);   // this is my analysis output and correcting beam blocker issues
                // h_exp_pip[no_w_bins]->Scale(1. / 0.02788674);  // this is using clas12 root and correcting beam blocker issues

                // faraday cup charge = 0.00240...C
                h_empty_pip[no_w_bins]->Scale(1. / 0.0024075358);

                // SUBTRUCT EMPTY TARGET
                h_exp_pip[no_w_bins]->Add(h_empty_pip[no_w_bins], -1.);

                // radiative effects correction factors
                h_exp_pip[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);

                /// for bin centering w-q2
                h_exp_pip[no_w_bins]->Scale(1 / ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])));

                acceptance_corrected_7D_pip[no_w_bins] =
                    (THnSparseD *)h_exp_pip[no_w_bins]->Clone(
                        "Accepatnce_corrected_inv_7D_pip");
                acceptance_corrected_7D_pip[no_w_bins]->Divide(acceptance_7D_hist_pip[no_w_bins]);

                // // std::cout << "  no of pip acc corr bins " << acceptance_corrected_7D_pip[no_w_bins]->GetNbins() << std::endl;
                // for (int i = 1; i <= acceptance_corrected_7D_pip[no_w_bins]->GetNbins(); ++i)
                // {
                //     acceptance_corrected_7D_pip[no_w_bins]->SetBinError(i, 0);

                //     if (acceptance_corrected_7D_pip[no_w_bins]->GetBinContent(i) <= 0)
                //     {
                //         acceptance_corrected_7D_pip[no_w_bins]->SetBinContent(i, 0);
                //     }
                // }

                acceptance_corrected_7D_simulation_pip[no_w_bins] =
                    (THnSparseD *)h_simu_pip[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_pip_simulation_pip");
                acceptance_corrected_7D_simulation_pip[no_w_bins]->Divide(acceptance_7D_hist_pip[no_w_bins]);

                hole_yield_simulation_pip[no_w_bins] =
                    (THnSparseD *)h_th_pip[no_w_bins]->Clone(
                        "hole_yield_simulation_pip");
                hole_yield_simulation_pip[no_w_bins]->Add(acceptance_corrected_7D_simulation_pip[no_w_bins], -1);

                Int_t *bins_pip = new Int_t[5];

                for (Int_t pimP = 1; pimP <= pimP_max; pimP++)
                {
                    for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            for (Int_t phi = 1; phi <= phi_max; phi++)
                            {
                                for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                {
                                    bins_pip[0] = pimP;
                                    bins_pip[1] = pip_pim;
                                    bins_pip[2] = theta;
                                    bins_pip[3] = phi;
                                    bins_pip[4] = alpha;
                                    if (acceptance_corrected_7D_simulation_pip[no_w_bins]->GetBinContent(bins_pip) > 0.)
                                    {
                                        bin_content_sum_acc_corrected_simu[1] += acceptance_corrected_7D_simulation_pip[no_w_bins]->GetBinContent(bins_pip);

                                        bin_content_sum_acc_corrected_exp[1] += acceptance_corrected_7D_pip[no_w_bins]->GetBinContent(bins_pip);
                                    }
                                }
                            }
                        }
                    }
                }
                scale_factor[1] = (bin_content_sum_acc_corrected_exp[1] / bin_content_sum_acc_corrected_simu[1]);
                hole_yield_exp_pip[no_w_bins] =
                    (THnSparseD *)hole_yield_simulation_pip[no_w_bins]->Clone(
                        "hole_yield_exp_pip");
                hole_yield_exp_pip[no_w_bins]->Scale(scale_factor[1]);

                total_yield_exp_pip[no_w_bins] =
                    (THnSparseD *)acceptance_corrected_7D_pip[no_w_bins]->Clone(
                        "total_yield_exp_pip");
                total_yield_exp_pip[no_w_bins]->Add(hole_yield_exp_pip[no_w_bins], 1);

                // here i am trying to scale for luminosity
                acceptance_corrected_7D_pip[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_pip[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));
                TH1D *acceptance_corrected_inv_Ppim = acceptance_corrected_7D_pip[no_w_bins]->Projection(0);
                TH1D *acceptance_corrected_theta_pip = acceptance_corrected_7D_pip[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_pip = acceptance_corrected_7D_pip[no_w_bins]->Projection(4);

                total_yield_exp_pip[no_w_bins]->Scale(0.755314965e-12);
                total_yield_exp_pip[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                Float_t factor_inv_mass = acceptance_corrected_inv_Ppim->GetBinWidth(5);
                // std::cout << "scale factor inv mass: " << factor_inv_mass << std::endl;

                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_pip->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle pip : " << factor_alpha_angle << std::endl;

                TH1D *total_yield_with_hole_filled_inv_Ppim = total_yield_exp_pip[no_w_bins]->Projection(0);
                TH1D *total_yield_with_hole_filled_theta_pip = total_yield_exp_pip[no_w_bins]->Projection(2);
                TH1D *total_yield_with_hole_filled_alpha_pip = total_yield_exp_pip[no_w_bins]->Projection(4);

                TH1D *h_cos_th_pip;
                Double_t temp_pip;
                // Int_t n_theta_bins;
                h_cos_th_pip = new TH1D("h_cos_th_pip", "h_cos_th_pip", total_yield_with_hole_filled_theta_pip->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= total_yield_with_hole_filled_theta_pip->GetXaxis()->GetNbins(); j++)
                {
                    temp_pip = cos((total_yield_with_hole_filled_theta_pip->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (total_yield_with_hole_filled_theta_pip->GetBinLowEdge(j) + total_yield_with_hole_filled_theta_pip->GetBinWidth(j)));
                    h_cos_th_pip->SetBinContent(j, temp_pip);
                    h_cos_th_pip->SetBinError(j, 0.);
                }
                total_yield_with_hole_filled_inv_Ppim->Scale(1. / (w_bin_size * q2_bin_size));
                Int_3[w - 8] = total_yield_with_hole_filled_inv_Ppim->Integral();
                total_yield_with_hole_filled_inv_Ppim->IntegralAndError(1, total_yield_with_hole_filled_inv_Ppim->GetNbinsX(), Int_err_3[w - 8]);

                std::cout << " Int_3 " << Int_3[w - 8] << "\n";
                total_yield_with_hole_filled_inv_Ppim->Scale(1. / factor_inv_mass);

                total_yield_with_hole_filled_theta_pip->Scale(1. / (w_bin_size * q2_bin_size));
                total_yield_with_hole_filled_alpha_pip->Scale(1. / (w_bin_size * q2_bin_size));

                Int_2_theta[w - 8] = total_yield_with_hole_filled_theta_pip->Integral();
                Int_2_alpha[w - 8] = total_yield_with_hole_filled_alpha_pip->Integral();
                // std::cout << " Int_2_theta " << Int_2_theta[w - 8] << "\n";
                total_yield_with_hole_filled_theta_pip->IntegralAndError(1, total_yield_with_hole_filled_theta_pip->GetNbinsX(), Int_err_2_theta[w - 8]);
                // std::cout << " Int_2_alpha " << Int_2_alpha[w - 8] << "\n";
                total_yield_with_hole_filled_alpha_pip->IntegralAndError(1, total_yield_with_hole_filled_alpha_pip->GetNbinsX(), Int_err_2_alpha[w - 8]);

                total_yield_with_hole_filled_theta_pip->Divide(h_cos_th_pip);
                total_yield_with_hole_filled_alpha_pip->Scale(1. / factor_alpha_angle);

                acceptance_corrected_inv_Ppim->Scale(1. / (w_bin_size * q2_bin_size));

                Int_3_acc_corr[w - 8] = acceptance_corrected_inv_Ppim->Integral();
                acceptance_corrected_inv_Ppim->IntegralAndError(1, acceptance_corrected_inv_Ppim->GetNbinsX(), Int_err_3_acc_corr[w - 8]);
                // std::cout << " Int_3_acc_corr .......... " << Int_3_acc_corr[w - 8] << "\n";

                acceptance_corrected_inv_Ppim->Scale(1. / factor_inv_mass);

                acceptance_corrected_theta_pip->Divide(h_cos_th_pip);
                acceptance_corrected_theta_pip->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_alpha_pip->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                can1->cd(2);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_inv_Ppim->SetMarkerColor(4);
                total_yield_with_hole_filled_inv_Ppim->SetMarkerStyle(24);

                acceptance_corrected_inv_Ppim->SetMarkerColor(7);
                acceptance_corrected_inv_Ppim->SetLineColor(7);
                acceptance_corrected_inv_Ppim->SetMarkerStyle(24);
                total_yield_with_hole_filled_inv_Ppim->SetTitle("");
                // total_yield_with_hole_filled_inv_Ppim->SetTitle("M(#pi^{-}p')");
                total_yield_with_hole_filled_inv_Ppim->SetStats(0);
                total_yield_with_hole_filled_inv_Ppim->SetMinimum(0.);
                total_yield_with_hole_filled_inv_Ppim->SetXTitle("M#pi^{-}p'(GeV)");
                // acceptance_corrected_inv_Ppim->Fit("pol4");
                total_yield_with_hole_filled_inv_Ppim->GetXaxis()->SetRange(5, 11);
                acceptance_corrected_inv_Ppim->GetXaxis()->SetRange(5, 11);

                total_yield_with_hole_filled_inv_Ppim->Draw("Z");
                acceptance_corrected_inv_Ppim->Draw("Z same");
                total_yield_with_hole_filled_inv_Ppim->SetYTitle("#Delta#sigma/#DeltaM_{p#pi^{-}}[#mub/GeV]");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path = w_path + "/" + cs_files[1]; // Adjust W directory logic
                    CrossSectionData cs_data = readCrossSections(cs_file_path);

                    // Create TGraphErrors
                    TGraphErrors *graph = new TGraphErrors(7);
                    for (int i = 0; i < 7; ++i)
                    {
                        graph->SetPoint(i, cs_data.w_values[i], cs_data.cross_sections[i]);
                        graph->SetPointError(i, 0, cs_data.errors[i]);
                    }

                    graph->SetMarkerStyle(20);
                    graph->SetMarkerColor(6);
                    graph->SetLineColor(6);
                    graph->Draw("P same");
                }
                // // // ///////////////////////////////  Bin centering corrections  m_pPim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  m_pPim ////////////////////////

                TH1D *h_bin_cent_corr_pPim;
                Double_t temp_bin_cent_corr_pPim;
                h_bin_cent_corr_pPim = new TH1D("h_bin_cent_corr_pPim", "h_bin_cent_corr_pPim", acceptance_corrected_inv_Ppim->GetXaxis()->GetNbins(), xmin_5D[0], xmax_5D[0]);
                for (Int_t j = 1; j <= acceptance_corrected_inv_Ppim->GetXaxis()->GetNbins(); j++)
                {
                    if (j >= 5 && j <= 11)
                        temp_bin_cent_corr_pPim = (bin_centering_corr_m_pPim[q2 - 1][w - 8][j - 5]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    else
                        temp_bin_cent_corr_pPim = 1.0;
                    h_bin_cent_corr_pPim->SetBinContent(j, temp_bin_cent_corr_pPim);
                    h_bin_cent_corr_pPim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_pPim->Draw("same");
                TH1D *total_yield_with_hole_filled_inv_pPim_modified = (TH1D *)total_yield_with_hole_filled_inv_Ppim->Clone();
                // Modify the cloned histogram
                total_yield_with_hole_filled_inv_pPim_modified->Multiply(h_bin_cent_corr_pPim);
                total_yield_with_hole_filled_inv_pPim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_inv_pPim_modified->SetMarkerColor(4);
                // Draw the modified histogram
                total_yield_with_hole_filled_inv_pPim_modified->Draw("Z same");
                Int_3_bc_corr[w - 8] = total_yield_with_hole_filled_inv_pPim_modified->Integral() * factor_inv_mass;
                total_yield_with_hole_filled_inv_pPim_modified->IntegralAndError(1, total_yield_with_hole_filled_inv_pPim_modified->GetNbinsX(), Int_err_3_bc_corr[w - 8]);

                std::cout << "int 3 bc corr : " << Int_3_bc_corr[w - 8] << std::endl;
                TH1D *acceptance_corrected_inv_pPim_modified = (TH1D *)acceptance_corrected_inv_Ppim->Clone();
                // Modify the cloned histogram
                acceptance_corrected_inv_pPim_modified->Multiply(h_bin_cent_corr_pPim);
                acceptance_corrected_inv_pPim_modified->SetMarkerStyle(20);
                acceptance_corrected_inv_pPim_modified->SetMarkerColor(7);
                // Draw the modified histogram
                acceptance_corrected_inv_pPim_modified->Draw("Z same");
                total_yield_with_hole_filled_inv_Ppim->SetMaximum(1.6 * total_yield_with_hole_filled_inv_Ppim->GetMaximum());
                total_yield_with_hole_filled_inv_Ppim->SetMinimum(0);

                can1->cd(5);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_theta_pip->SetMarkerStyle(24);

                total_yield_with_hole_filled_theta_pip->SetMarkerColor(4);
                acceptance_corrected_theta_pip->SetMarkerColor(7);
                acceptance_corrected_theta_pip->SetLineColor(7);
                acceptance_corrected_theta_pip->SetMarkerStyle(24);

                total_yield_with_hole_filled_theta_pip->SetTitle("");
                // total_yield_with_hole_filled_theta_pip->SetTitle(
                //     "#Theta_{#pi^{+}}");
                total_yield_with_hole_filled_theta_pip->SetStats(0);
                total_yield_with_hole_filled_theta_pip->SetXTitle("#Theta_{#pi^{+}}(deg)");
                // acceptance_corrected_theta_pip->Fit("pol4");
                total_yield_with_hole_filled_theta_pip->Draw("Z");
                acceptance_corrected_theta_pip->Draw("Z same");
                total_yield_with_hole_filled_theta_pip->SetYTitle("#Delta#sigma/d(-cos#theta_{#pi^{+}})[#mub/rad]");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_th_pip = w_path + "/" + cs_files[4]; // Adjust W directory logic
                    CrossSectionData cs_data_th_pip = readCrossSections(cs_file_path_th_pip);

                    // Create TGraphErrors
                    TGraphErrors *graph_th_pip = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_th_pip->SetPoint(i, cs_data_th_pip.w_values[i], cs_data_th_pip.cross_sections[i]);
                        graph_th_pip->SetPointError(i, 0, cs_data_th_pip.errors[i]);
                    }

                    graph_th_pip->SetMarkerStyle(20);
                    graph_th_pip->SetMarkerColor(6);
                    graph_th_pip->SetLineColor(6);
                    graph_th_pip->Draw("P same");
                }

                // // ///////////////////////////////  Bin centering corrections  th_pip ////////////////////////
                // // ///////////////////////////////  Bin centering corrections  th_pip ////////////////////////

                TH1D *h_bin_cent_corr_th_pip;
                Double_t temp_bin_cent_corr_th_pip;
                h_bin_cent_corr_th_pip = new TH1D("h_bin_cent_corr_th_pip", "h_bin_cent_corr_th_pip", acceptance_corrected_theta_pip->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                for (Int_t j = 1; j <= acceptance_corrected_theta_pip->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_th_pip = (bin_centering_corr_th_pip[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_th_pip->SetBinContent(j, temp_bin_cent_corr_th_pip);
                    h_bin_cent_corr_th_pip->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_th_pip->Draw("same");
                TH1D *total_yield_with_hole_filled_theta_pip_modified = (TH1D *)total_yield_with_hole_filled_theta_pip->Clone();
                total_yield_with_hole_filled_theta_pip_modified->Multiply(h_bin_cent_corr_th_pip);
                total_yield_with_hole_filled_theta_pip_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_theta_pip_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_theta_pip_modified->Draw("Z same");

                TH1D *acceptance_corrected_theta_pip_modified = (TH1D *)acceptance_corrected_theta_pip->Clone();
                acceptance_corrected_theta_pip_modified->Multiply(h_bin_cent_corr_th_pip);
                acceptance_corrected_theta_pip_modified->SetMarkerStyle(20);
                acceptance_corrected_theta_pip_modified->SetMarkerColor(7);
                acceptance_corrected_theta_pip_modified->Draw("Z same");
                total_yield_with_hole_filled_theta_pip->SetMaximum(1.6 * total_yield_with_hole_filled_theta_pip->GetMaximum());
                total_yield_with_hole_filled_theta_pip->SetMinimum(0);

                // // float estimate_theta_pip = 0;
                // // estimate_theta_pip = total_yield_with_hole_filled_theta_pip->Integral(0, -1);
                // // std::cout << " total from theta-pip: " << estimate_theta_pip << "\n";

                can1->cd(8);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_alpha_pip->SetMarkerStyle(24);
                acceptance_corrected_alpha_pip->SetMarkerStyle(24);

                total_yield_with_hole_filled_alpha_pip->SetMarkerColor(4);
                acceptance_corrected_alpha_pip->SetMarkerColor(7);
                acceptance_corrected_alpha_pip->SetLineColor(7);
                total_yield_with_hole_filled_alpha_pip->SetTitle("");
                // total_yield_with_hole_filled_alpha_pip->SetTitle(
                //     "#alpha_{#pi^{+}}");
                total_yield_with_hole_filled_alpha_pip->SetStats(0);
                total_yield_with_hole_filled_alpha_pip->SetXTitle(" #alpha_{#pi^{+}}(deg)");
                // acceptance_corrected_alpha_pip->Fit("pol4");
                total_yield_with_hole_filled_alpha_pip->Draw("Z");
                acceptance_corrected_alpha_pip->Draw("Z same");
                total_yield_with_hole_filled_alpha_pip->SetYTitle("#Delta#sigma/d#alpha_{#pi^{+}}[#mub/rad]s");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_al_pip = w_path + "/" + cs_files[7]; // Adjust W directory logic
                    CrossSectionData cs_data_al_pip = readCrossSections(cs_file_path_al_pip);

                    // Create TGraphErrors
                    TGraphErrors *graph_al_pip = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_al_pip->SetPoint(i, cs_data_al_pip.w_values[i], cs_data_al_pip.cross_sections[i]);
                        graph_al_pip->SetPointError(i, 0, cs_data_al_pip.errors[i]);
                    }

                    graph_al_pip->SetMarkerStyle(20);
                    graph_al_pip->SetMarkerColor(6);
                    graph_al_pip->SetLineColor(6);
                    graph_al_pip->Draw("P same");
                }
                // // ///////////////////////////////  Bin centering corrections  alpha_pip ////////////////////////
                // // ///////////////////////////////  Bin centering corrections  alpha_pip ////////////////////////

                TH1D *h_bin_cent_corr_alpha_pip;
                Double_t temp_bin_cent_corr_alpha_pip;
                h_bin_cent_corr_alpha_pip = new TH1D("h_bin_cent_corr_alpha_pip", "h_bin_cent_corr_alpha_pip", acceptance_corrected_alpha_pip->GetXaxis()->GetNbins(), xmin_5D[4], xmax_5D[4]);
                for (Int_t j = 1; j <= acceptance_corrected_alpha_pip->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_alpha_pip = (bin_centering_corr_alpha_pip[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    // std::cout << "  alpha corr val for bin centering is : " << 1 / (bin_centering_corr_alpha_pip[q2 - 1][w - 8][j]) * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])) << std::endl;
                    h_bin_cent_corr_alpha_pip->SetBinContent(j, temp_bin_cent_corr_alpha_pip);
                    h_bin_cent_corr_alpha_pip->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_alpha_pip->Draw("same");
                TH1D *total_yield_with_hole_filled_alpha_pip_modified = (TH1D *)total_yield_with_hole_filled_alpha_pip->Clone();
                total_yield_with_hole_filled_alpha_pip_modified->Multiply(h_bin_cent_corr_alpha_pip); //// multiply.............?????
                total_yield_with_hole_filled_alpha_pip_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_alpha_pip_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_alpha_pip_modified->Draw("Z same");

                TH1D *acceptance_corrected_alpha_pip_modified = (TH1D *)acceptance_corrected_alpha_pip->Clone();
                acceptance_corrected_alpha_pip_modified->Multiply(h_bin_cent_corr_alpha_pip);
                acceptance_corrected_alpha_pip_modified->SetMarkerStyle(20);
                acceptance_corrected_alpha_pip_modified->SetMarkerColor(7);
                acceptance_corrected_alpha_pip_modified->Draw("Z same");
                total_yield_with_hole_filled_alpha_pip->SetMaximum(1.6 * total_yield_with_hole_filled_alpha_pip->GetMaximum());
                total_yield_with_hole_filled_alpha_pip->SetMinimum(0);

                // // float estimate_alpha_pip = 0;
                // // estimate_alpha_pip = total_yield_with_hole_filled_alpha_pip->Integral(0, -1);
                // // std::cout << " total from alpha-pip: " << estimate_alpha_pip << "\n";
            }
            {

                h_exp_pim[no_w_bins]->Add(h_exp_pim_background[no_w_bins], -1.);

                // // faraday cup charge
                h_exp_pim[no_w_bins]->Scale(1. / 0.029113878); // from valerii
                // // h_exp_pim[no_w_bins]->Scale(1. / 0.0290267); // this is my analysis output and correcting beam blocker issues
                // // h_exp_pim[no_w_bins]->Scale(1. / 0.02788674); // this is using clas12 root and correcting beam blocker issues

                // faraday cup charge = 0.00240...C
                h_empty_pim[no_w_bins]->Scale(1. / 0.0024075358);

                // // SUBTRUCT EMPTY TARGET
                h_exp_pim[no_w_bins]->Add(h_empty_pim[no_w_bins], -1.);

                // radiative effects correction factors
                h_exp_pim[no_w_bins]->Scale(rad_corr_factor[q2 - 1][w - 8]);
                /// for bin centering w-q2
                h_exp_pim[no_w_bins]->Scale(1 / ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8])));

                // std::cout << "  no of h_exp_pim bins " << h_exp_pim[no_w_bins]->GetNbins() << std::endl;
                // for (int i = 1; i <= h_exp_pim[no_w_bins]->GetNbins(); ++i)
                // {
                //     h_exp_pim[no_w_bins]->SetBinError(i, sqrt(h_exp_pim[no_w_bins]->GetBinContent(i)));

                //     if (h_exp_pim[no_w_bins]->GetBinContent(i) <= 0)
                //     {
                //         h_exp_pim[no_w_bins]->SetBinContent(i, 0);
                //     }
                // }
                acceptance_corrected_7D_pim[no_w_bins] =
                    (THnSparseD *)h_exp_pim[no_w_bins]->Clone(
                        "Accepatnce_corrected_inv_7D_pim");

                Int_t *bins_pim_test = new Int_t[5];

                float aapme = 0, bbpme = 0;

                // for (Int_t alpha = 10; alpha <= alpha_max; alpha++)
                {
                    for (Int_t pimP = 1; pimP <= pimP_max; pimP++)
                    {
                        for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                        {
                            for (Int_t theta = 1; theta <= theta_max; theta++)
                            {
                                for (Int_t phi = 1; phi <= phi_max; phi++)
                                {
                                    // for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                    // {

                                    // for (Int_t pimP = 7; pimP <= 7; pimP++)
                                    // {

                                    //     for (Int_t pip_pim = 7; pip_pim <= 7; pip_pim++)
                                    //     {
                                    //         for (Int_t theta = 7; theta <= 7; theta++)
                                    //         {

                                    //             for (Int_t phi = 4; phi <= 4; phi++)
                                    //             {

                                    // for (Int_t alpha = 1; alpha <= 10; alpha++)
                                    Int_t alpha = 10;
                                    // {
                                    bins_pim_test[0] = pimP;
                                    bins_pim_test[1] = pip_pim;
                                    bins_pim_test[2] = theta;
                                    bins_pim_test[3] = phi;
                                    bins_pim_test[4] = alpha;
                                    aapme = aapme + h_exp_pim[no_w_bins]->GetBinContent(bins_pim_test);
                                    bbpme = bbpme + h_exp_pim[no_w_bins]->GetBinError(bins_pim_test);

                                    // // if (h_exp_pim[no_w_bins]->GetBinContent(bins_pim) > 0.)
                                    // {
                                    // std::cout << "  5d EXP bin no " << theta << "  pPim  " << pimP
                                    //           << " pip Pim " << pip_pim << "   theta  " << theta
                                    //           << "  phi " << phi
                                    //           << "  alpha " << alpha
                                    //           << "  total Bin content : " << aapme << " Bin err : "
                                    //           << bbpme
                                    //           << "  Bin err \% is: " << bbpme / aapme * 100
                                    //           << std::endl;
                                    // }
                                }
                            }
                        }
                    }
                    // std::cout << "  5d EXP  total Bin content : " << aapme << " Bin err : "
                    //           << bbpme
                    //           << "  Bin err \% is: " << bbpme / aapme * 100
                    //           << std::endl;
                }

                Int_t *bins_pim_sim = new Int_t[5];

                float aapm = 0, bbpm = 0;
                for (Int_t pimP = 1; pimP <= pimP_max; pimP++)
                {
                    for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            for (Int_t phi = 1; phi <= phi_max; phi++)
                            {
                                for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                {
                                    // for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                    // {

                                    // for (Int_t pimP = 7; pimP <= 7; pimP++)
                                    // {

                                    //     for (Int_t pip_pim = 7; pip_pim <= 7; pip_pim++)
                                    //     {
                                    //         for (Int_t theta = 7; theta <= 7; theta++)
                                    //         {

                                    //             for (Int_t phi = 4; phi <= 4; phi++)
                                    //             {

                                    // for (Int_t alpha = 1; alpha <= 10; alpha++)
                                    // Int_t alpha = 10;
                                    // {
                                    bins_pim_sim[0] = pimP;
                                    bins_pim_sim[1] = pip_pim;
                                    bins_pim_sim[2] = theta;
                                    bins_pim_sim[3] = phi;
                                    bins_pim_sim[4] = alpha;
                                    aapm = aapm + acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins_pim_sim);
                                    bbpm = bbpm + acceptance_7D_hist_pim[no_w_bins]->GetBinError(bins_pim_sim);

                                    // if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins_pim) > 0.)
                                    // {

                                    // std::cout << "  5d ACC bin no " << theta << "  pPim  " << pimP
                                    //           << " pip Pim " << pip_pim << "   theta  " << theta
                                    //           << "  phi " << phi
                                    //           << "  alpha " << alpha
                                    //           << "  total Bin content : " << aapm << " Bin err : "
                                    //           << bbpm
                                    //           << "  Bin err \% is: " << bbpm / aapm * 100
                                    //           << std::endl;
                                    // }
                                }
                            }
                        }
                    }
                    // std::cout << "  5d acc  total Bin content : " << aapm << " Bin err : "
                    //           << bbpm
                    //           << "  Bin err \% is: " << bbpm / aapm * 100
                    //           << std::endl;
                }

                acceptance_corrected_7D_pim[no_w_bins]->Divide(acceptance_7D_hist_pim[no_w_bins]);

                // // std::cout << "  no of pim acc corr bins " << acceptance_corrected_7D_pim[no_w_bins]->GetNbins() << std::endl;
                // for (int i = 1; i <= acceptance_corrected_7D_pim[no_w_bins]->GetNbins(); ++i)
                // {
                //     // acceptance_corrected_7D_pim[no_w_bins]->SetBinError(i, 0);

                //     if (acceptance_corrected_7D_pim[no_w_bins]->GetBinContent(i) <= 0)
                //     {
                //         acceptance_corrected_7D_pim[no_w_bins]->SetBinContent(i, 0);
                //         acceptance_corrected_7D_pim[no_w_bins]->SetBinError(i, 0);
                //     }
                // }
                // acceptance_corrected_7D_pim[no_w_bins]->Sumw2();

                acceptance_corrected_7D_simulation_pim[no_w_bins] =
                    (THnSparseD *)h_simu_pim[no_w_bins]->Clone(
                        "Accepatnce_corrected_7D_pim_simulation_pim");
                acceptance_corrected_7D_simulation_pim[no_w_bins]->Divide(acceptance_7D_hist_pim[no_w_bins]);

                hole_yield_simulation_pim[no_w_bins] =
                    (THnSparseD *)h_th_pim[no_w_bins]->Clone(
                        "hole_yield_simulation_pim");
                hole_yield_simulation_pim[no_w_bins]->Add(acceptance_corrected_7D_simulation_pim[no_w_bins], -1);

                float aapmAt = 0, bbpmAt = 0;

                Int_t *bins_pim = new Int_t[5];
                // for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                // {
                for (Int_t pimP = 1; pimP <= pimP_max; pimP++)
                {
                    for (Int_t pip_pim = 1; pip_pim <= pip_pim_max; pip_pim++)
                    {
                        for (Int_t theta = 1; theta <= theta_max; theta++)
                        {
                            for (Int_t phi = 1; phi <= phi_max; phi++)
                            {
                                for (Int_t alpha = 1; alpha <= alpha_max; alpha++)
                                {

                                    // for (Int_t pimP = 7; pimP <= 7; pimP++)
                                    // {

                                    //     for (Int_t pip_pim = 7; pip_pim <= 7; pip_pim++)
                                    //     {
                                    //         for (Int_t theta = 7; theta <= 7; theta++)
                                    //         {

                                    //             for (Int_t phi = 4; phi <= 4; phi++)
                                    //             {

                                    // // for (Int_t alpha = 1; alpha <= 10; alpha++)
                                    // Int_t alpha = 10;
                                    // Int_t pimP = 10;
                                    // Int_t pip_pim = 10;
                                    // Int_t theta = 4;
                                    // Int_t phi = 5;

                                    // {
                                    float aapmA = 0, bbpmA = 0;

                                    bins_pim[0] = pimP;
                                    bins_pim[1] = pip_pim;
                                    bins_pim[2] = theta;
                                    bins_pim[3] = phi;
                                    bins_pim[4] = alpha;

                                    if (acceptance_corrected_7D_simulation_pim[no_w_bins]->GetBinContent(bins_pim) > 0.)
                                    {
                                        aapmA = aapmA + acceptance_corrected_7D_pim[no_w_bins]->GetBinContent(bins_pim);
                                        bbpmA = bbpmA + acceptance_corrected_7D_pim[no_w_bins]->GetBinError(bins_pim);
                                        aapmAt = aapmAt + acceptance_corrected_7D_pim[no_w_bins]->GetBinContent(bins_pim);
                                        bbpmAt = bbpmAt + acceptance_corrected_7D_pim[no_w_bins]->GetBinError(bins_pim);

                                        bin_content_sum_acc_corrected_simu[2] += acceptance_corrected_7D_simulation_pim[no_w_bins]->GetBinContent(bins_pim);

                                        bin_content_sum_acc_corrected_exp[2] += acceptance_corrected_7D_pim[no_w_bins]->GetBinContent(bins_pim);
                                        // if (bbpmA / aapmA > 5)
                                        // if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins_pim) < 0.01 && h_exp_pim[no_w_bins]->GetBinContent(bins_pim) > 0)
                                        //     std::cout
                                        //         << std::fixed << std::setprecision(5)

                                        //         // << "  5d bin " << "  pPim  " << pimP
                                        //         //           << " pip Pim " << pip_pim << "   theta  " << theta
                                        //         //           << "  phi " << phi
                                        //         //           << "  alpha " << alpha
                                        //         << "  total Bin content exp : " << h_exp_pim[no_w_bins]->GetBinContent(bins_pim)
                                        //         << "  acc % : " << acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins_pim)
                                        //         << "  acc corr  " << aapmA
                                        //         << "  Bin err exp: " << h_exp_pim[no_w_bins]->GetBinError(bins_pim)
                                        //         << "  acc: " << acceptance_7D_hist_pim[no_w_bins]->GetBinError(bins_pim)
                                        //         << "  acc corr  " << aapmA
                                        //         << "  Bin err \% is: " << bbpmA / aapmA * 100
                                        //         << std::endl;

                                        // std::cout << "  5d ACC CORR bin no  pPim : " << pimP
                                        //           << " pip Pim " << pip_pim << "   theta  " << theta
                                        //           << "  phi " << phi
                                        //           << "  alpha " << alpha
                                        //           << "  total Bin content : " << acceptance_corrected_7D_pim[no_w_bins]->GetBinContent(bins_pim)
                                        //           << " Bin err: " << acceptance_corrected_7D_pim[no_w_bins]->GetBinError(bins_pim)
                                        //           << std::endl;
                                        aapmA = 0;
                                        bbpmA = 0;
                                    }
                                }
                            }
                        }
                    }
                    // std::cout << "  5D Acc corr alpha bin  " << 10 << "   total Bin content : " << aapmAt << " Bin err : "
                    //           << bbpmAt
                    //           << "  Bin err \% is: " << bbpmAt / aapmAt * 100
                    //           << std::endl;
                }

                // TH1D *exp_theta_pim = h_exp_pim[no_w_bins]->Projection(2);

                // for (int i = 0; i <= 10; i++)
                // {
                //     std::cout << "EXP Bin " << i << "   bin content : " << (exp_theta_pim->GetBinContent(i))
                //               << "  bin err : " << (exp_theta_pim->GetBinError(i))
                //               << "  \% bin err : " << float(exp_theta_pim->GetBinError(i)) / float(exp_theta_pim->GetBinContent(i)) * 100
                //               << std::endl;
                // }

                // TH1D *acc_theta_pim = acceptance_7D_hist_pim[no_w_bins]->Projection(2);

                // for (int i = 0; i <= 10; i++)
                // {
                //     std::cout << "ACC Bin " << i << "   bin content : " << (acc_theta_pim->GetBinContent(i))
                //               << "  bin err : " << (acc_theta_pim->GetBinError(i))
                //               << "  \% bin err : " << float(acc_theta_pim->GetBinError(i)) / float(acc_theta_pim->GetBinContent(i)) * 100
                //               << std::endl;
                // }

                // TH1D *test_theta_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(2);

                // for (int i = 0; i <= 10; i++)
                // {
                //     std::cout << "ACC CORR Bin " << i << "   bin content : " << (test_theta_pim->GetBinContent(i))
                //               << "  direct   " << (exp_theta_pim->GetBinContent(i)) / (acc_theta_pim->GetBinContent(i))
                //               << "  exp : " << (exp_theta_pim->GetBinContent(i)) << "  acc " << (acc_theta_pim->GetBinContent(i))
                //               << "  bin err : " << (test_theta_pim->GetBinError(i))
                //               << "  direct   " << (exp_theta_pim->GetBinError(i)) / (acc_theta_pim->GetBinError(i))
                //               << "  exp : " << (exp_theta_pim->GetBinError(i)) << "  acc " << (acc_theta_pim->GetBinError(i))

                //               << "  \% bin err : " << float(test_theta_pim->GetBinError(i)) / float(test_theta_pim->GetBinContent(i)) * 100

                //               << "  direct   " << ((exp_theta_pim->GetBinError(i)) / (acc_theta_pim->GetBinError(i))) / ((exp_theta_pim->GetBinContent(i)) / (acc_theta_pim->GetBinContent(i))) * 100
                //               << std::endl;
                // }

                scale_factor[2] = (bin_content_sum_acc_corrected_exp[2] / bin_content_sum_acc_corrected_simu[2]);
                hole_yield_exp_pim[no_w_bins] =
                    (THnSparseD *)hole_yield_simulation_pim[no_w_bins]->Clone(
                        "hole_yield_exp_pim");
                hole_yield_exp_pim[no_w_bins]->Scale(scale_factor[2]);

                total_yield_exp_pim[no_w_bins] =
                    (THnSparseD *)acceptance_corrected_7D_pim[no_w_bins]->Clone(
                        "total_yield_exp_pim");
                total_yield_exp_pim[no_w_bins]->Add(hole_yield_exp_pim[no_w_bins], 1);

                // here i am trying to scale for luminosity
                acceptance_corrected_7D_pim[no_w_bins]->Scale(0.755314965e-12);
                acceptance_corrected_7D_pim[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                total_yield_exp_pim[no_w_bins]->Scale(0.755314965e-12);
                total_yield_exp_pim[no_w_bins]->Scale(1. / flux(w_bin_for_flux, q2_mid_value));

                TH1D *acceptance_corrected_theta_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(2);
                TH1D *acceptance_corrected_alpha_pim = acceptance_corrected_7D_pim[no_w_bins]->Projection(4);

                Float_t factor_alpha_angle = PI * acceptance_corrected_alpha_pim->GetBinWidth(5) / 180;
                // std::cout << "scale factor_alpha_ angle : " << factor_alpha_angle << std::endl;

                TH1D *total_yield_with_hole_filled_theta_pim = total_yield_exp_pim[no_w_bins]->Projection(2);
                TH1D *total_yield_with_hole_filled_alpha_pim = total_yield_exp_pim[no_w_bins]->Projection(4);

                TH1D *h_cos_th_pim;
                Double_t temp_pim;
                // Int_t n_theta_bins;
                h_cos_th_pim = new TH1D("h_cos_th_pim", "h_cos_th_pim", total_yield_with_hole_filled_theta_pim->GetXaxis()->GetNbins(), 0., 180.);
                for (Int_t j = 1; j <= total_yield_with_hole_filled_theta_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_pim = cos((total_yield_with_hole_filled_theta_pim->GetBinLowEdge(j)) * PI / 180.) - cos(PI / 180. * (total_yield_with_hole_filled_theta_pim->GetBinLowEdge(j) + total_yield_with_hole_filled_theta_pim->GetBinWidth(j)));
                    h_cos_th_pim->SetBinContent(j, temp_pim);
                    h_cos_th_pim->SetBinError(j, 0.);
                }
                total_yield_with_hole_filled_theta_pim->Scale(1. / (w_bin_size * q2_bin_size));
                total_yield_with_hole_filled_alpha_pim->Scale(1. / (w_bin_size * q2_bin_size));

                Int_3_theta[w - 8] = total_yield_with_hole_filled_theta_pim->Integral();
                Int_3_alpha[w - 8] = total_yield_with_hole_filled_alpha_pim->Integral();
                // std::cout << " Int_3_theta " << Int_3_theta[w - 8] << "\n";
                total_yield_with_hole_filled_theta_pim->IntegralAndError(1, total_yield_with_hole_filled_theta_pim->GetNbinsX(), Int_err_3_theta[w - 8]);
                // std::cout << " Int_3_alpha " << Int_3_alpha[w - 8] << "\n";
                total_yield_with_hole_filled_alpha_pim->IntegralAndError(1, total_yield_with_hole_filled_alpha_pim->GetNbinsX(), Int_err_3_alpha[w - 8]);

                total_yield_with_hole_filled_theta_pim->Divide(h_cos_th_pim);
                total_yield_with_hole_filled_alpha_pim->Scale(1. / factor_alpha_angle);

                acceptance_corrected_theta_pim->Divide(h_cos_th_pim);
                acceptance_corrected_theta_pim->Scale(1. / (w_bin_size * q2_bin_size));
                acceptance_corrected_alpha_pim->Scale(1. / factor_alpha_angle / (w_bin_size * q2_bin_size));

                can1->cd(4);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_theta_pim->SetMarkerColor(4);
                total_yield_with_hole_filled_theta_pim->SetMarkerStyle(24);

                acceptance_corrected_theta_pim->SetMarkerColor(7);
                acceptance_corrected_theta_pim->SetLineColor(7);
                acceptance_corrected_theta_pim->SetMarkerStyle(24);

                total_yield_with_hole_filled_theta_pim->SetTitle("");

                // total_yield_with_hole_filled_theta_pim->SetTitle(
                //     "#Theta_{#pi^{-}}");
                total_yield_with_hole_filled_theta_pim->SetStats(0);
                total_yield_with_hole_filled_theta_pim->SetXTitle("#Theta_{#pi^{-}}(deg)");
                // total_yield_with_hole_filled_theta_pim->SetYTitle(" Yield");
                // acceptance_corrected_theta_pim->Fit("pol4");

                total_yield_with_hole_filled_theta_pim->Draw("Z");
                acceptance_corrected_theta_pim->Draw("Z same");
                total_yield_with_hole_filled_theta_pim->SetYTitle("#Delta#sigma/d(-cos#theta_{#pi^{-}})[#mub/rad])");

                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_th_pim = w_path + "/" + cs_files[3]; // Adjust W directory logic
                    CrossSectionData cs_data_th_pim = readCrossSections(cs_file_path_th_pim);

                    // Create TGraphErrors
                    TGraphErrors *graph_th_pim = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_th_pim->SetPoint(i, cs_data_th_pim.w_values[i], cs_data_th_pim.cross_sections[i]);
                        graph_th_pim->SetPointError(i, 0, cs_data_th_pim.errors[i]);
                    }

                    graph_th_pim->SetMarkerStyle(20);
                    graph_th_pim->SetMarkerColor(6);
                    graph_th_pim->SetLineColor(6);
                    graph_th_pim->Draw("P same");
                }
                // // // ///////////////////////////////  Bin centering corrections  th_pim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  th_pim ////////////////////////

                TH1D *h_bin_cent_corr_th_pim;
                Double_t temp_bin_cent_corr_th_pim;
                h_bin_cent_corr_th_pim = new TH1D("h_bin_cent_corr_th_pim", "h_bin_cent_corr_th_pim", acceptance_corrected_theta_pim->GetXaxis()->GetNbins(), xmin_5D[2], xmax_5D[2]);
                for (Int_t j = 1; j <= acceptance_corrected_theta_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_th_pim = (bin_centering_corr_th_pim[q2 - 1][w - 8][j]); ////// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_th_pim->SetBinContent(j, temp_bin_cent_corr_th_pim);
                    h_bin_cent_corr_th_pim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_th_pim->Draw("same");
                TH1D *total_yield_with_hole_filled_theta_pim_modified = (TH1D *)total_yield_with_hole_filled_theta_pim->Clone();
                total_yield_with_hole_filled_theta_pim_modified->Multiply(h_bin_cent_corr_th_pim);
                total_yield_with_hole_filled_theta_pim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_theta_pim_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_theta_pim_modified->Draw("Z same");

                TH1D *acceptance_corrected_theta_pim_modified = (TH1D *)acceptance_corrected_theta_pim->Clone();
                acceptance_corrected_theta_pim_modified->Multiply(h_bin_cent_corr_th_pim);
                acceptance_corrected_theta_pim_modified->SetMarkerStyle(20);
                acceptance_corrected_theta_pim_modified->SetMarkerColor(7);
                acceptance_corrected_theta_pim_modified->Draw("Z same");
                total_yield_with_hole_filled_theta_pim->SetMaximum(1.6 * total_yield_with_hole_filled_theta_pim->GetMaximum());
                total_yield_with_hole_filled_theta_pim->SetMinimum(0);
                // // // // float estimate_theta_pim = 0;
                // // // // estimate_theta_pim = total_yield_with_hole_filled_theta_pim->Integral(0, -1);
                // // // // std::cout << " total from theta-pim: " << estimate_theta_pim << "\n";
                can1->cd(7);
                gPad->SetBottomMargin(0.2); // More space for X labels
                gPad->SetLeftMargin(0.2);   // More space for Y labels
                gPad->SetRightMargin(0.05);
                gPad->SetTopMargin(0.05);
                total_yield_with_hole_filled_alpha_pim->SetMarkerColor(4);
                total_yield_with_hole_filled_alpha_pim->SetMarkerStyle(24);

                acceptance_corrected_alpha_pim->SetMarkerColor(7);
                acceptance_corrected_alpha_pim->SetLineColor(7);
                acceptance_corrected_alpha_pim->SetMarkerStyle(24);
                total_yield_with_hole_filled_alpha_pim->SetTitle("");

                // total_yield_with_hole_filled_alpha_pim->SetTitle(
                //     "#alpha_{#pi^{-}}");
                total_yield_with_hole_filled_alpha_pim->SetStats(0);
                total_yield_with_hole_filled_alpha_pim->SetXTitle(" #alpha_{#pi^{-}}(deg)");
                // acceptance_corrected_alpha_pim->Fit("pol4");
                total_yield_with_hole_filled_alpha_pim->Draw("Z");
                acceptance_corrected_alpha_pim->Draw("Z same");
                total_yield_with_hole_filled_alpha_pim->SetYTitle("#Delta#sigma/d#alpha_{#pi^{-}}[#mub/rad]");
                // total_yield_with_hole_filled_alpha_pim->SetMaximum(1.6 * total_yield_with_hole_filled_alpha_pim->GetMaximum());
                total_yield_with_hole_filled_alpha_pim->SetMinimum(0);
                /////////////////////// CLAS6 CS ////////////////////////
                if (CLAS6)
                {
                    std::string cs_file_path_al_pim = w_path + "/" + cs_files[6]; // Adjust W directory logic
                    CrossSectionData cs_data_al_pim = readCrossSections(cs_file_path_al_pim);

                    // Create TGraphErrors
                    TGraphErrors *graph_al_pim = new TGraphErrors(10);
                    for (int i = 0; i < 10; ++i)
                    {
                        graph_al_pim->SetPoint(i, cs_data_al_pim.w_values[i], cs_data_al_pim.cross_sections[i]);
                        graph_al_pim->SetPointError(i, 0, cs_data_al_pim.errors[i]);
                    }

                    graph_al_pim->SetMarkerStyle(20);
                    graph_al_pim->SetMarkerColor(6);
                    graph_al_pim->SetLineColor(6);
                    graph_al_pim->Draw("P same");
                }
                // // // ///////////////////////////////  Bin centering corrections  alpha_pim ////////////////////////
                // // // ///////////////////////////////  Bin centering corrections  alpha_pim ////////////////////////

                TH1D *h_bin_cent_corr_alpha_pim;
                Double_t temp_bin_cent_corr_alpha_pim;
                h_bin_cent_corr_alpha_pim = new TH1D("h_bin_cent_corr_alpha_pim", "h_bin_cent_corr_alpha_pim", acceptance_corrected_alpha_pim->GetXaxis()->GetNbins(), xmin_5D[4], xmax_5D[4]);
                for (Int_t j = 1; j <= acceptance_corrected_alpha_pim->GetXaxis()->GetNbins(); j++)
                {
                    temp_bin_cent_corr_alpha_pim = (bin_centering_corr_alpha_pim[q2 - 1][w - 8][j]); ///// * ((bin_centering_corr_w[q2 - 1][w - 8]) * (bin_centering_corr_q2[q2 - 1][w - 8]));
                    h_bin_cent_corr_alpha_pim->SetBinContent(j, temp_bin_cent_corr_alpha_pim);
                    h_bin_cent_corr_alpha_pim->SetBinError(j, 0.);
                }
                // Clone the histogram
                // h_bin_cent_corr_alpha_pim->Draw("same");
                TH1D *total_yield_with_hole_filled_alpha_pim_modified = (TH1D *)total_yield_with_hole_filled_alpha_pim->Clone();
                total_yield_with_hole_filled_alpha_pim_modified->Multiply(h_bin_cent_corr_alpha_pim);
                total_yield_with_hole_filled_alpha_pim_modified->SetMarkerStyle(20);
                total_yield_with_hole_filled_alpha_pim_modified->SetMarkerColor(4);
                total_yield_with_hole_filled_alpha_pim_modified->Draw("Z same");

                TH1D *acceptance_corrected_alpha_pim_modified = (TH1D *)acceptance_corrected_alpha_pim->Clone();
                acceptance_corrected_alpha_pim_modified->Multiply(h_bin_cent_corr_alpha_pim);
                acceptance_corrected_alpha_pim_modified->SetMarkerStyle(20);
                acceptance_corrected_alpha_pim_modified->SetMarkerColor(7);
                acceptance_corrected_alpha_pim_modified->Draw("Z same");
                total_yield_with_hole_filled_alpha_pim->SetMaximum(1.6 * total_yield_with_hole_filled_alpha_pim->GetMaximum());
                // // float estimate_alpha_pim = 0;
                // // estimate_alpha_pim = total_yield_with_hole_filled_alpha_pim->Integral(0, -1);
                // // std::cout << " total from alpha-pim: " << estimate_alpha_pim << "\n";
            }

            Int[w - 8] = (Int_1[w - 8] + Int_2[w - 8] + Int_3[w - 8]) * ff_scale / 3.;
            Int_err[w - 8] = (Int_err_1[w - 8] + Int_err_2[w - 8] + Int_err_3[w - 8]) / 3;
            // Int_err[w - 8] = sqrt(pow(Int_err_1[w - 8], 2) + pow(Int_err_2[w - 8], 2) + pow(Int_err_3[w - 8], 2));

            // //std::cout << " err: " << sqrt(pow(2, 4)) << "\n";
            Int_bc_corr[w - 8] = (Int_1_bc_corr[w - 8] + Int_2_bc_corr[w - 8] + Int_3_bc_corr[w - 8]) * ff_scale / 3.;
            //// Int_err_bc_corr[w - 8] = sqrt(pow(Int_err_1_bc_corr[w - 8], 2) + pow(Int_err_2_bc_corr[w - 8], 2) + pow(Int_err_3_bc_corr[w - 8], 2));
            Int_err_bc_corr[w - 8] = sqrt(pow(Int_err_1[w - 8], 2) + pow(Int_err_2[w - 8], 2) + pow(Int_err_3[w - 8], 2));

            Int_acc_corr[w - 8] = (Int_1_acc_corr[w - 8] + Int_2_acc_corr[w - 8] + Int_3_acc_corr[w - 8]) * ff_scale / 3.;
            Int_err_acc_corr[w - 8] = (Int_err_1_acc_corr[w - 8] + Int_err_2_acc_corr[w - 8] + Int_err_3_acc_corr[w - 8]) / 3;
            //// Int_err_acc_corr[w - 8] = sqrt(pow(Int_err_1_acc_corr[w - 8], 2) + pow(Int_err_2_acc_corr[w - 8], 2) + pow(Int_err_3_acc_corr[w - 8], 2));

            // // Int_theta[w -8] = (Int_1_theta[w -8] + Int_2_theta[w -8] + Int_3_theta[w -8]) / 3.;
            // // Int_err_theta[w -8] = (Int_err_1_theta[w -8] + Int_err_2_theta[w -8] + Int_err_3_theta[w -8]) / 3.;

            // // Int_alpha[w -8] = (Int_1_alpha[w -8] + Int_2_alpha[w -8] + Int_3_alpha[w -8]) / 3.;
            // // Int_err_alpha[w -8] = (Int_err_1_alpha[w -8] + Int_err_2_alpha[w -8] + Int_err_3_alpha[w -8]) / 3.;
            // if (w - 8 == 0)
            // {
            //     Int[w - 8] = Int_3[w - 8];
            //     Int_err[w - 8] = Int_err_3[w - 8];
            //     Int_acc_corr[w - 8] = Int_3_acc_corr[w - 8];
            //     Int_err_acc_corr[w - 8] = Int_err_3_acc_corr[w - 8];
            //     Int_theta[w - 8] = Int_3_theta[w - 8];
            //     Int_err_theta[w - 8] = Int_err_3_theta[w - 8];
            //     Int_alpha[w - 8] = Int_3_alpha[w - 8];
            //     Int_err_alpha[w - 8] = Int_err_3_alpha[w - 8];
            // }
            // // std::cout << Int[w - 8] << "\n";
            // // std::cout << " inside int cs " << Int[w - 8] << " acc-corr " << Int_acc_corr[w - 8] << "\n";
            // // // // can1->Show();
            // // // //  can1->SaveAs(Form("mPim_50_MeV_w_bins_FD_ONLY_%s.png", output_name));
            // // // // // Construct the full path where you want to save the files
            can1->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/1_D_CS/sys_prot_mom_0_9_nine_1D_cs_%.1f<=Q2<=%.1f GeV2_%.3f<=W<=%.3f GeV.png",
                              q2_lower_lim, q2_upper_lim, (1.0 + 0.05 * w), (1.0 + 0.05 * w + 0.05)));
        }

        for (short w = 8; w < 22; w++)
        {
            float const w_bin_for_flux = 1.0 + w * 0.05 + 0.05 / 2;

            h_w_int->Fill(w_bin_for_flux, Int[w - 8]);
            h_w_int->SetBinError(h_w_int->FindBin(w_bin_for_flux), Int_err[w - 8]);

            h_w_int_bc_corr->Fill(w_bin_for_flux, Int_bc_corr[w - 8]);
            h_w_int_bc_corr->SetBinError(h_w_int_bc_corr->FindBin(w_bin_for_flux), Int_err_bc_corr[w - 8]);

            h_w_int_acc_corr->Fill(w_bin_for_flux, Int_acc_corr[w - 8]);
            h_w_int_acc_corr->SetBinError(h_w_int_acc_corr->FindBin(w_bin_for_flux), Int_err_acc_corr[w - 8]);

            // h_empty_cell_contribution->Fill(w_bin_for_flux, empty_cell_contribution[w - 8]);
            // h_empty_cell_contribution->SetBinError(h_empty_cell_contribution->FindBin(w_bin_for_flux), empty_cell_contribution_err[w - 8]);

            h_empty_cell_contribution = (TH1F *)h_w_int->Clone("Empty cell contribution"); // is it thr rigth thing to do????????????
            h_empty_cell_contribution->Add(h_w_int_acc_corr, -1.);

            // std::cout << Int[w - 8] << ", " << std::flush;

            h_w_int_clas6->Fill(w_bin_for_flux, clas6_cs[q2 - 1][w - 8]);
            h_w_int_clas6->SetBinError(h_w_int_clas6->FindBin(w_bin_for_flux), clas6_cs_err[q2 - 1][w - 8]);

            h_w_int_diff = (TH1F *)h_w_int_clas6->Clone("clas6 -clas12"); // is it thr rigth thing to do????????????
            h_w_int_diff->Add(h_w_int, -1.);

            // h_w_int_theta->Fill(w_bin_for_flux, Int_theta[w - 8]);
            // h_w_int_theta->SetBinError(h_w_int_theta->FindBin(w_bin_for_flux), Int_err_theta[w - 8]);

            // h_w_int_alpha->Fill(w_bin_for_flux, Int_alpha[w - 8]);
            // h_w_int_alpha->SetBinError(h_w_int_alpha->FindBin(w_bin_for_flux), Int_err_alpha[w - 8]);

            //         // // TDirectory *output_png = RootOutputFile->mkdir("output_png");
            //         // // output_png->cd();
            std::cout << " w: " << w * 0.05 + 1.025 << "  q2  " << q2_mid_value << " cs in " << Int[w - 8] << " err " << Int_err[w - 8] << " clas6:  " << clas6_cs[q2 - 1][w - 8] << "\n";
        }
        // }
        TCanvas *can2 = new TCanvas("int_cs", "int_cs", 1400, 1000);
        can2->SetGrid(); // Add grid to the canvas

        std::cout << "\n holes_fraction_sim_" << q2_low_values[q2] << "_" << q2_up_values[q2] << std::endl;

        for (short w = 8; w < 22; w++)
        {
            std::cout << holes_fraction_sim[q2 - 1][w - 8] << "  , " << std::flush;
        }

        std::cout << "\n holes_fraction_exp_" << q2_low_values[q2] << "_" << q2_up_values[q2] << std::endl;

        for (short w = 8; w < 22; w++)
        {
            std::cout << holes_fraction_exp[q2 - 1][w - 8] << "  , " << std::flush;
        }

        std::cout << std::endl;
        for (short w = 8; w < 22; w++)
        {
            float w_value = 1.0 + w * 0.05 + 0.05 / 2;
            // std::cout << "w value  " << w_value << "\n";
            // std::cout << Int_err[w - 8] << ", " << std::flush;

            h_w_int->SetMarkerStyle(20);
            h_w_int->SetMarkerColor(1);
            h_w_int->GetXaxis()->SetTitle("W, GeV");
            // h_w_int->GetXaxis()->SetNdivisions(16);
            h_w_int->GetXaxis()->SetLabelSize(0.04);
            h_w_int->GetYaxis()->SetLabelSize(0.04);
            h_w_int->SetAxisRange(0.0, int_cs_up_lim[q2 - 1], "Y");
            // h_w_int->SetAxisRange(-0.0, 10, "Y");

            h_w_int->SetAxisRange(1.35, 2.15, "X");
            // h_w_int->SetTitle("Integrated Cross-Sections #sigma RGA Fall 2018");
            h_w_int->SetTitle(Form("Integrated Cross-Sections #sigma %.1f<=Q2<=%.1fGeV^{2}", q2_lower_lim, q2_upper_lim));
            h_w_int->GetYaxis()->SetTitle("#sigma, #mub");
            // h_w_int->Draw("e1pX0");
            h_w_int->Draw("e1pX0");

            // h_w_int->SetMaximum((h_w_int->GetMaximum()) / 0.97);
            // h_w_int->SetMinimum(0.0);

            // std::cout << "max of hist is  " << h_w_int->GetMaximum() << std::endl;
            h_empty_cell_contribution->SetMarkerStyle(20);
            h_empty_cell_contribution->SetLineColor(14); // Set line color to red
            // h_empty_cell_contribution->SetMarkerColor(14);         // Set marker color to red
            h_empty_cell_contribution->SetFillColorAlpha(14, 0.5); // Set fill color to red with 50% transparency
            h_empty_cell_contribution->SetLineWidth(2);            // Increase the line width
            // h_empty_cell_contribution->GetXaxis()->SetNdivisions(24);
            // h_empty_cell_contribution->SetAxisRange(1.4, 1.9, "X");
            // Draw the histogram with both line, fill, and marker
            // h_empty_cell_contribution->SetAxisRange(0.0, int_cs_up_lim[q2 - 1], "Y");
            h_empty_cell_contribution->Draw("hist same ");
            // h_empty_cell_contribution->Draw("p same"); // Draw markers

            h_w_int_bc_corr->SetMarkerStyle(20);
            h_w_int_bc_corr->SetMarkerColor(2);
            h_w_int_bc_corr->Draw("e1pX0 same");

            if (CLAS6)
            {
                h_w_int_clas6->SetMarkerStyle(20);
                h_w_int_clas6->SetMarkerColor(3);
                h_w_int_clas6->Draw("e1pX0 same");
            }
            // // h_w_int_clas6->Draw("hist same");

            // h_w_int_diff->SetMarkerStyle(21);
            // h_w_int_diff->SetLineWidth(2);
            // h_w_int_diff->SetMarkerColor(2);
            // h_w_int_diff->SetLineColor(kRed);
            // h_w_int_diff->SetMarkerColor(kRed);
            // h_w_int_diff->Draw("p same");
            // h_w_int_diff->Draw("hist same");

            // // TLine *l =
            // //     new TLine(w_value, 0, w_value, h_w_int->GetMaximum() );
            // // l->Draw("SAME");

            // h_w_int_theta->SetMarkerStyle(3);
            // h_w_int_theta->SetMarkerColor(2);
            // h_w_int_theta->GetXaxis()->SetNdivisions(24);
            // h_w_int_theta->SetAxisRange(1.4, 1.9, "X");
            // h_w_int_theta->Draw("e1pX0 same");

            // h_w_int_alpha->SetMarkerStyle(20);
            // h_w_int_alpha->SetMarkerColor(3);
            // h_w_int_alpha->GetXaxis()->SetNdivisions(24);
            // h_w_int_alpha->SetAxisRange(1.4, 1.9, "X");
            // h_w_int_alpha->Draw("e1pX0 same");

            h_w_int_acc_corr->SetMarkerStyle(20);
            h_w_int_acc_corr->SetMarkerColor(7);
            // h_w_int_acc_corr->GetXaxis()->SetNdivisions(24);
            // h_w_int_acc_corr->SetAxisRange(1.4, 1.9, "X");
            h_w_int_acc_corr->Draw("e1pX0 same");

            auto legend = new TLegend(0.1, 0.65, 0.4, 0.9);
            if (CLAS6)
                legend->AddEntry(h_w_int_clas6, "CLAS6", "ep");
            legend->AddEntry(h_w_int, "CLAS12 ", "ep");
            legend->AddEntry(h_w_int_bc_corr, "bc corr ", "ep");
            legend->AddEntry(h_w_int_acc_corr, "CLAS12 With holes ", "ep");
            legend->AddEntry(h_empty_cell_contribution, "Holes contribution", "L");
            // legend->AddEntry(h_w_int_diff, "Diff CL6-CL12", "epL");

            // // legend->AddEntry(h_w_int_theta, "Hole Filled from theta", "ep");
            // // legend->AddEntry(h_w_int_alpha, "Hole Filled from alpha", "ep");

            legend->Draw();

            // std::cout << " cs_out  " << Int[w - 8] << "  clas6_cs  " << clas6_cs[q2 - 1][w - 8] << "  diff " << clas6_cs[q2 - 1][w - 8] - Int[w - 8] << " acc_corr  " << Int_acc_corr[w - 8] << " hole_contribution  " << Int[w - 8] - Int_acc_corr[w - 8] << " ff scale is = " << ff_scale << "\n";
            // std::cout << Int_err[w - 8] << "," << std::flush;

            // // std::cout << "w: " << w * 0.05 + 1.0125 << " acc_corr " << Int_acc_corr[w -8] << " inv_mass: " << Int[w -8] << " theta " << Int_theta[w -8] << " alpha " << Int_alpha[w -8] << " clas6:  " << clas6_cs[w -8] << "\n";
            // std::cout << "w: " << w * 0.05 + 1.0125 << " " << Int_acc_corr[w -8] << " " << Int_err_acc_corr[w -8] << " " << Int[w -8] << " " << Int_err[w -8]
            //           // << " theta " << Int_err_theta[w -8] << " alpha " << Int_err_alpha[w -8] << " clas6:  " << clas6_cs_err[q2-1][w -8]
            //           << "\n";
        }
        // can2->SaveAs(Form("/Users/krishnaneupane/Downloads/2024/CS_measurement/eff_0_3_with_sim_bg_subtracted_cs_with_eff_corr_fact_with_0_5_eff_cut_50_MeV_W_bin_%.1f<=Q2<=%.1f_GeV2.png",
        //                   q2_lower_lim, q2_upper_lim));

        // delete h_w_int;
    }
    return 0;
}

// The subroutine sets errors to data, empt.targ., fermicorr and model histograms
void set_all_errors(int no_w_bins)
{
    Int_t *bins = new Int_t[5];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 3))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;
                        // how_many_bins = how_many_bins + 1;

                        // Setting errors to data hists
                        if (h_exp_prot[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_prot[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot[no_w_bins]->GetBinContent(bins))));
                            // h_exp_prot[no_w_bins]->SetBinError(bins, (0.0));

                            // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins)) << "  Bin err is: " << (h_exp_prot[no_w_bins]->GetBinError(bins)) << std::endl;

                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) == 1.)
                            //     how_many_ones = how_many_ones + 1;
                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) > 0.)
                            //     how_many_highers = how_many_highers + 1;
                        }
                        else
                        {
                            h_exp_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_prot[no_w_bins]->SetBinContent(bins, 0.0);
                            // h_exp_prot[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot[no_w_bins]->GetBinContent(bins))));
                            // std::cout << "Bin content of h_exp_prot is: " << (h_exp_prot[no_w_bins]->GetBinContent(bins)) << "  Bin err is: " << (h_exp_prot[no_w_bins]->GetBinError(bins)) << std::endl;

                            // if (h_exp_prot[no_w_bins]->GetBinContent(bins) == 0.)
                            //     how_many_zeros = how_many_zeros + 1;
                            // h_exp_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_exp_pip[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pip[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pip[no_w_bins]->GetBinContent(bins))));
                            // h_exp_pip[no_w_bins]->SetBinError(bins, (0.0));
                        }
                        else
                        {
                            h_exp_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_pip[no_w_bins]->SetBinContent(bins, 0.0);
                        };

                        if (h_exp_pim[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pim[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pim[no_w_bins]->GetBinContent(bins))));
                            // h_exp_pim[no_w_bins]->SetBinError(bins, (0.0));

                            // eff_threshold_cut->Fill(h_exp_pim[no_w_bins]->GetBinContent(bins)); /// this is only checking for
                            // the yield filling this is not for the threshold cut histogram beware of that.
                        }
                        else
                        {
                            h_exp_pim[no_w_bins]->SetBinError(bins, 0.);
                            // h_exp_pim[no_w_bins]->SetBinContent(bins, 0.0);
                        };

                        // Setting errors to empty target hists
                        if (h_empty_prot[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_prot[no_w_bins]->SetBinError(bins, (sqrt(h_empty_prot[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_empty_pip[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_pip[no_w_bins]->SetBinError(bins, (sqrt(h_empty_pip[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_pip[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_empty_pim[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_empty_pim[no_w_bins]->SetBinError(bins, (sqrt(h_empty_pim[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_empty_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        // Setting errors to h_exp_background hists
                        if (h_exp_prot_background[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_prot_background[no_w_bins]->SetBinError(bins, (sqrt(h_exp_prot_background[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_prot_background[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_prot_background[no_w_bins]->SetBinContent(bins, 0.);
                        };

                        if (h_exp_pip_background[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pip_background[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pip_background[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_pip_background[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_pip_background[no_w_bins]->SetBinContent(bins, 0.);
                        };

                        if (h_exp_pim_background[no_w_bins]->GetBinContent(bins) > 0.)
                        {
                            h_exp_pim_background[no_w_bins]->SetBinError(bins, (sqrt(h_exp_pim_background[no_w_bins]->GetBinContent(bins))));
                        }
                        else
                        {
                            h_exp_pim_background[no_w_bins]->SetBinError(bins, 0.);
                            h_exp_pim_background[no_w_bins]->SetBinContent(bins, 0.);
                        };

                        // Setting errors to simu hist hists
                        if (h_simu_prot[no_w_bins]->GetBinContent(bins) <= 0.)

                        {
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_simu_pip[no_w_bins]->GetBinContent(bins) <= 0.)

                        {
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (h_simu_pim[no_w_bins]->GetBinContent(bins) <= 0.)

                        {
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        // // //Setting errors to model hists
                        // // h_model_1[i]->SetBinError(bins, 0.);
                        // // h_model_2[i]->SetBinError(bins, 0.);
                        // // h_model_3[i]->SetBinError(bins, 0.);
                    };
                };
            };
        };
    };

    // std::cout << "no of Bin: " << how_many_bins << std::endl;
    // std::cout << "no of Zero: " << how_many_zeros << "  \% of zeros " << how_many_zeros / float(how_many_bins) << std::endl;
    // // std::cout << "no of One: " << how_many_ones << std::endl;
    // std::cout << "no of non-Zero: " << how_many_highers << "  \% of non-zeros " << how_many_highers / float(how_many_bins) << std::endl;
};

// The subroutine sets correct errors to the efficiency histograms
void set_eff_errors(int no_w_bins)
{
    Int_t *bins = new Int_t[5];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 1))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;

                        /*Long64_t tmp_rec1_bin = h_simu_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec2_bin = h_simu_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec3_bin = h_simu_pim[no_w_bins]->GetBin(bins);

                    Long64_t tmp_gen1_bin = h_th_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_gen2_bin = h_th_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_gen3_bin = h_th_pim[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff1_bin = acceptance_7D_hist_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_eff2_bin = acceptance_7D_hist_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_eff3_bin = acceptance_7D_hist_pim[no_w_bins]->GetBin(bins);*/

                        Double_t err1, err2, err3;
                        Double_t a1, a2, a3, b1, b2, b3;

                        a1 = (h_simu_prot[no_w_bins]->GetBinContent(bins));
                        a2 = (h_simu_pim[no_w_bins]->GetBinContent(bins));
                        a3 = (h_simu_pip[no_w_bins]->GetBinContent(bins));
                        // std::cout << "Bin content sim is : " << a1 << " ," << a2 << " , " << a3 << std::endl;

                        b1 = (h_th_prot[no_w_bins]->GetBinContent(bins));
                        b2 = (h_th_pim[no_w_bins]->GetBinContent(bins));
                        b3 = (h_th_pip[no_w_bins]->GetBinContent(bins));
                        // std::cout << "Bin content th is : " << b1 << " ," << b2 << " , " << b3 << std::endl;

                        //------------------------------------------------
                        // err1 = (a1 * (b1 - a1)) / b1 / b1 / b1; // for weight = 1 histograms
                        err1 = (b1 - 2 * a1) / b1 / b1 / b1 * h_rec_prot_sig2[no_w_bins]->GetBinContent(bins) + a1 * a1 / b1 / b1 / b1 / b1 * h_th_prot_sig2[no_w_bins]->GetBinContent(bins);

                        if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) > 0.0 && (err1 > 0.))
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, sqrt(err1));
                            // std::cout << " err1 is : " << err1 << std::endl;
                        }

                        if (err1 < 0.)
                        {
                            // std::cout << " err1 less than zero is : " << err1 << std::endl;

                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        // ///// first hist cd(1)
                        // eff->Fill(h_simu_prot[no_w_bins]->GetBinContent(bins) / h_th_prot[no_w_bins]->GetBinContent(bins));
                        // ///// 2nd hist cd(2)
                        // d_eff->Fill(err1);
                        // ///// 4th hist cd(4)
                        // // deff_vs_eff->Fill(acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins),
                        // //                   acceptance_7D_hist_prot[no_w_bins]->GetBinError(bins) / acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins));

                        // // if (a1 / b1 > 0.01)
                        // // eff_threshold_cut->Fill(a1 / b1);

                        // //---------------------------------------------------------

                        err2 = (b2 - 2 * a2) / b2 / b2 / b2 * (h_rec_pim_sig2[no_w_bins]->GetBinContent(bins)) + a2 * a2 / b2 / b2 / b2 / b2 * (h_th_pim_sig2[no_w_bins]->GetBinContent(bins));

                        if ((acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) > 0.0) && (err2 > 0.))
                        {
                            // std::cout << " err2 is : " << err2 << std::endl;
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, sqrt(err2));
                        }
                        if (err2 < 0.)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        //-------------------------------------

                        err3 = (b3 - 2 * a3) / b3 / b3 / b3 * (h_rec_pip_sig2[no_w_bins]->GetBinContent(bins)) + a3 * a3 / b3 / b3 / b3 / b3 * (h_th_pip_sig2[no_w_bins]->GetBinContent(bins));

                        if (acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) > 0.0 && (err3 > 0.))
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, sqrt(err3));

                        if (err3 < 0.)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                    };
                };
            };
        };
    };
};

// The subroutine performs the efficiency error cut
void eff_err_cut(Float_t eff_err_threshold, Float_t eff_threshold, Float_t rec_threshold, int no_w_bins)
{

    Int_t *bins = new Int_t[5];

    Int_t o_max = pipP_max;
    Int_t p_max = pipP_max;
    Int_t r_max = theta_max;
    Int_t t_max = phi_max;
    Int_t y_max = alpha_max;

    // if ((i == 0) || (i == 1))
    // {
    //         o_max = p_max = 8;
    //         r_max = 6;
    //         t_max = 5;
    //         y_max = 5;
    // };
    // if ((i == 2) || (i == 3))
    // {
    //         o_max = p_max = 10;
    //         r_max = 8;
    //         t_max = 5;
    //         y_max = alpha_max;
    // };
    // if ((i >= 4) && (i <= 6))
    // {
    //         o_max = p_max = 12;
    //         r_max = theta_max;
    //         t_max = 5;
    //         y_max = 8;
    // };

    for (Int_t o = 1; o <= o_max; o++)
    {
        for (Int_t p = 1; p <= p_max; p++)
        {
            for (Int_t r = 1; r <= r_max; r++)
            {
                for (Int_t t = 1; t <= t_max; t++)
                {
                    for (Int_t y = 1; y <= y_max; y++)
                    {
                        bins[0] = o;
                        bins[1] = p;
                        bins[2] = r;
                        bins[3] = t;
                        bins[4] = y;

                        /*
                    Long64_t tmp_eff1_bin = acceptance_7D_hist_prot[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec1_bin = h_simu_prot[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff2_bin = acceptance_7D_hist_pip[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec2_bin = h_simu_pip[no_w_bins]->GetBin(bins);

                    Long64_t tmp_eff3_bin = acceptance_7D_hist_pim[no_w_bins]->GetBin(bins);
                    Long64_t tmp_rec3_bin = h_simu_pim[no_w_bins]->GetBin(bins);
                    */
                        Double_t err1_evt, err2_evt, err3_evt;
                        Double_t n_rec1, n_rec2, n_rec3, n_gen1, n_gen2, n_gen3;

                        n_rec1 = (h_rec_prot_evt[no_w_bins]->GetBinContent(bins));
                        n_rec2 = (h_rec_pim_evt[no_w_bins]->GetBinContent(bins));
                        n_rec3 = (h_rec_pip_evt[no_w_bins]->GetBinContent(bins));

                        n_gen1 = (h_th_prot_evt[no_w_bins]->GetBinContent(bins));
                        n_gen2 = (h_th_pim_evt[no_w_bins]->GetBinContent(bins));
                        n_gen3 = (h_th_pip_evt[no_w_bins]->GetBinContent(bins));
                        // std::cout << "   n gen3 : " << (h_th_pim_evt[no_w_bins]->GetBinContent(bins)) << std::endl;

                        err1_evt = (n_gen1 - n_rec1) * n_rec1 / n_gen1 / n_gen1 / n_gen1;
                        err2_evt = (n_gen2 - n_rec2) * n_rec2 / n_gen2 / n_gen2 / n_gen2;
                        err3_evt = (n_gen3 - n_rec3) * n_rec3 / n_gen3 / n_gen3 / n_gen3;

                        // eff_threshold_cut->Fill(sqrt((h_th_prot_evt[no_w_bins]->GetBinContent(bins) - h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) *
                        //                              (h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins))) /
                        //                         ((h_rec_prot_evt[no_w_bins]->GetBinContent(bins)) / (h_th_prot_evt[no_w_bins]->GetBinContent(bins))));

                        // eff_threshold_cut->Fill(sqrt(err1_evt) / ((n_rec1) / (n_gen1)));

                        // if (err1_evt > 0)
                        //     std::cout << " (n_gen1 - n_rec1) * n_rec1  is:  " << ((n_gen1 - n_rec1) * n_rec1) << " err1 is: " << (err1_evt) << std::endl;
                        // std::cout << " sqrt(err1_evt) / n_rec1 * n_gen1  ~ threshold  " << (sqrt(err1_evt) / n_rec1 * n_gen1) << std::endl;
                        if (sqrt(err1_evt) / n_rec1 * n_gen1 > eff_err_threshold)
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (acceptance_7D_hist_prot[no_w_bins]->GetBinContent(bins) < eff_threshold)
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (h_simu_prot[no_w_bins]->GetBinContent(bins) < rec_threshold)
                        {
                            acceptance_7D_hist_prot[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_prot[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_prot[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (sqrt(err2_evt) / n_rec2 * n_gen2 > eff_err_threshold)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (acceptance_7D_hist_pim[no_w_bins]->GetBinContent(bins) < eff_threshold)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (h_simu_pim[no_w_bins]->GetBinContent(bins) < rec_threshold)
                        {
                            acceptance_7D_hist_pim[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pim[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pim[no_w_bins]->SetBinError(bins, 0.);
                        };

                        if (sqrt(err3_evt) / n_rec3 * n_gen3 > eff_err_threshold)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (acceptance_7D_hist_pip[no_w_bins]->GetBinContent(bins) < eff_threshold)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                        if (h_simu_pip[no_w_bins]->GetBinContent(bins) < rec_threshold)
                        {
                            acceptance_7D_hist_pip[no_w_bins]->SetBinContent(bins, 0.);
                            acceptance_7D_hist_pip[no_w_bins]->SetBinError(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinContent(bins, 0.);
                            h_simu_pip[no_w_bins]->SetBinError(bins, 0.);
                        };
                    };
                };
            };
        };
    };
};
